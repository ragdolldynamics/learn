{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Learn</p> <p>RAGDOLL</p> <p>                 Real-time physics for Autodesk\u00ae Maya 2018-2022 </p> <p> </p> <p>                 Ragdoll provides animators with real-time physics for fast, automatic overlapping motion.             </p> Learn more Download News <p> </p>"},{"location":"about/","title":"About","text":"<p>Here's a brief overview of how Ragdoll came to be.</p> <p>In 2008 Marcus Ottosson graduated from BTH in Blekinge, Sweden and ventured into the world as character animator at Meindbender; to work on The Duplicators and The Pirate amongst others.</p> <p>In 2012 He joined Framestore and familiarised himself with the world of physics simulation, developing the technology behind the tethers for Alfonso Cuaron's feature film Gravity, and later completed work on the Cloak of Leviation in Doctor Strange.</p> <p>In 2015 He started a company called Abstract Factory developing tools in Python for use in production pipelines, including Avalon, Pyblish, Qt.py, cmdx and Allzpark; later recieving the \"Best Tool\" award for Pyblish at the 2020 DigiPro/The Pipeline Conference.</p> <p>In 2017 He started a company called WeightShift with co-founders Danny Chapman and Tim Daust. They had just wrapped up the Endorphin and Euphoria projects at Natural Motion.</p> <p>Like Euphoria, WeightShift developed a physically based animation tool, except this one was tailored to Autodesk Maya and got adopted by major feature film studios including Framestore (Harry Potter, Gravity et. al.) and Weta Digital (Avatar, Lord of the Rings et. al.)</p> <p>In 2020 WeightShift is purchased by Epic Games</p> <p>In 2020 <code>Ragdoll enters chat</code></p> <p>Ragdoll carries on where WeightShift left off, but turns things on its head. Rather than targeting riggers and technical animators, Ragdoll adopts a \"no-rigging required\" approach.</p> <p>July 28<sup>th</sup> 2021 Ragdoll is launched.</p> <p></p>"},{"location":"about/#london-on-craigslist","title":"London on Craigslist","text":"<p>In 2012, Marcus travelled to London after 5 years of character animation experience in Sweden and \u00a315,000 of life savings in order to secure a job at Framestore, the studio he'd been looking up to since before venturing out into the real-world. He booked a crummy hotel around Hyde Park for 2 weeks during which time he expected to find a permanent residence somewhere in town, but it wasn't so easy! After days of viewing flats and hours after finally checking out - in desperation - he transferred a majority of his life savings for 6 months of rent up-front to a listing he found on Craigslist. That luckily wasn't a scam.</p> <p>With his foot firmly on the ground, Marcus applied to work for Framestore; only to find that they weren't looking for animators! Instead, they needed \"Creature FX\" artists, to begin work right away on a project taking place in space. Creatures? In space? Done deal! That's when he learned that \"creature\" actually meant \"tether\" and FX means \"simulation\" and that the project was Gravity.</p> <p></p> <p>It was during that time when the character animator was introduced to physics simulation and with it an idea to bring this marvel of technology to the otherwise non-physically simulated world of character animation.</p> <p></p>"},{"location":"about/#early-prototypes","title":"Early Prototypes","text":"<p>With Maya and nCloth under his belt, he had all the tools necessary to begin working on an adaptation for animators. Or so he thought!</p> <p>First Prototype</p> <p>Utilising the <code>Bend Resistance</code> and <code>Attract to Matching Mesh</code> features of nCloth. The challenge was tailoring the edges such that they carried the weight of the character and the motion he was to perform. More rigidity meant less performance, thus he always ended up too squishy.</p> <p></p> <p>nCloth to IK</p> <p>This time using follicles on the simulated geometry to derive positions for a skeleton to be attached and used to skin the final character geometry. Don't let the fps counter fool you, this version was point-cached. The interactive performance was less than 5 fps.</p> <p></p> <p>Alternative Setup</p> <p>Same idea, now interacting with another nCloth object in the scene.</p> <p></p> <p>A few prototypes later, he realised this wasn't going to fly. To tackle this, one would need a firm grasp on software development, but that would take time.</p> <p>As they say; two steps forward, one step back.</p> <p></p>"},{"location":"about/#lets-start-small","title":"\"Let's start small\"","text":"<p>Inspired by the manner and amount of automation taking place at Framestore, he set out to bring automation to the masses, using skills less reliant on maths and algorithms and more reliant on workflow.</p> <p></p> <p>3 years later, Pyblish is a technically and practically successful product, another 3 years it would go on to win the DigiPro 2020 award for Best Pipeline Tool, even though it would yield very little money; lessons learnt in running a business on open-source software. (Namely don't)</p> <p>He was now somewhat technically savvy with a greater understanding of the challenge that lies ahead, what he needed now was a team.</p> <p></p>"},{"location":"about/#team-avalon","title":"Team Avalon","text":"<p>Building on his prior connections in Sweden, he reached out to the founders of a former workplace for aid. They were interested in branching out into software development and was a suitable customer to the technology I had in mind; they offered to invest. By happenstance, he found a character rigger with multiple feature film projects behind her, interested in trying something new. Finally, the technology was to be based heavily on machine learning for which he found a lecturer at Oxford University interested in dedicating time and resources to our cause.</p> <p>Months of pitching at events in search for a team (Startup Weekend ftw!), everything was now in place. But there was a hitch; in order to offer investment, they wanted something in return. A pipeline. Marcus spent the next 3 months developing Avalon, which was later open sourced and is now a moderately successful pipeline framework powering dozens of studios around the globe, including Colorbleed, Moonshine and Kredenc.</p> <p></p> <p>Ready, set, go; the team was set, a customer waiting and investment ready to go. But there was a problem. After signing for a shared office space and days before moving in to start working, the investor couldn't live up to his end of the bargain and the deal blew up.</p> <p>Two steps forward, one step back.</p> <p></p>"},{"location":"about/#team-weightshift","title":"Team Weightshift","text":"<p>After having to let everyone go, Marcus remembered one of the prospects he interviewed for this team; a senior figure at Natural Motion - developers of physics simulation software Endorphin and Euphoria - which was just about to be absorbed by the mobile-games goliath Zynga, scrapping their work on character animation technology.</p> <p>They spent two weeks putting together a prototype of their aspirations and went on to form a company to develop WeightShift Dynamics</p> <p></p> <p>2 years later and WeightShift had been adopted by Weta Digital in New Zealand and Framestore in London. But there was a hitch; visions no longer aligned, conflict arose and the team disbanded.</p> <p>The silver lining was that Epic Games was interested purchasing the technology, providing enough of a runway to restart development and try again.</p> <p>Two steps forward, one step back.</p> <p></p>"},{"location":"about/#team-ragdoll","title":"Team Ragdoll","text":"<p>After a brief stint developing Allzpark for the Japanese Studio Anima and then animating for Redfall and Horizon Zero Dawn II at Goodbye Kansas it was now 2020. With funding and experience spanning animation, programming, business and now physics all the pieces were in place. What he could not do in 2012 was now made possible.</p> <p></p>"},{"location":"api/","title":"API Reference","text":"<p>Ragdoll consists of custom nodes written in C++, but everything involved in connecting these up and generating the dependency network happens in Python. This API is exposed to you for integration with auto-rigging, tools development and to generally just extend the capabilities of the system.</p> <p>The full source code of everything Python is also available on GitHub, where you may also submit issues and pull-requests to improve the tooling for everyone.</p> <p>See Also</p> <ul> <li>API Reference</li> </ul> <p></p>"},{"location":"api/#overview","title":"Overview","text":"<p>There are 3 supported methods of integrating Ragdoll into your pipeline. Each with its own flare.</p> <ul> <li><code>api.py</code> - Public interface</li> <li><code>commands.py</code> - Low-level commands</li> <li><code>interactive.py</code> - User-facing commands</li> </ul> <p></p>"},{"location":"api/#apipy","title":"api.py","text":"<p>The publicly facing programming interface to Ragdoll. Use this for tools integrated with other tools that rely on heavy compatibility between versions and few surprises on what goes in and out.</p> <ul> <li>\u2714\ufe0f Guaranteed backwards compatibility</li> <li>\u2714\ufe0f High interoperability with <code>maya.cmds</code>, including <code>camelCase</code></li> <li>\u2714\ufe0f No dependence on user selection or preferences</li> <li>\u274c Limited to documented and officially supported features</li> </ul> <pre><code>from maya import cmds\nfrom ragdoll import api as rd\n\ncube, _ = cmds.polyCube()\ncmds.move(0, 10, 0)\ncmds.rotate(35, 50, 30)\n\nsolver = rd.createSolver()\nmarker = rd.assignMarker(cube, solver)\n\nrd.record()\n\ncmds.evalDeferred(cmds.play)\n</code></pre> <p></p> <p>Member Reference</p> <ul> <li>API Member Reference</li> </ul> <p></p>"},{"location":"api/#commandspy","title":"commands.py","text":"<p>The <code>api.py</code> module builds on <code>commands.py</code>, but wraps it in a string-based interface so as to make it compatible with your everyday calls to <code>maya.cmds</code>.</p> <p>All of <code>api.py</code> is present in <code>commands.py</code>, along with a few extras that may or may not change over time. It is best suited for tight integration and control but is primarily used internally for implementing <code>interactive.py</code> and <code>tools.py</code>.</p> <ul> <li>\u2714\ufe0f Fast</li> <li>\u2714\ufe0f Flexible</li> <li>\u2714\ufe0f Same guarantees as <code>api.py</code> for identical members</li> <li>\u274c Unfamiliar data <code>cmdx</code> types</li> </ul> <p><code>commands.py</code> uses the highly performant <code>cmdx</code> library to communicate with Maya and all return values are instances of <code>cmdx</code>.</p> <pre><code>from maya import cmds\nfrom ragdoll import commands as rc\nfrom ragdoll.vendor import cmdx\n\ncmds.file(new=True, force=True)\n\ncube, _ = map(cmdx.encode, cmds.polyCube())\ncube[\"translateY\"] = 10\ncube[\"rotate\", cmdx.Degrees] = (35, 50, 30)\n\n# Every simulation needs a solver\nsolver = rc.create_solver(\"mySolver\")\nassert isinstance(solver, cmdx.DagNode)\nassert solver.isA(\"rdSolver\")\n\n# Every solver needs one or more marker bodies\nmarker = rc.assign_marker(cube, solver)\nassert isinstance(marker, cmdx.DagNode)\nassert marker.isA(\"rdMarker\")\n\n# Allow start frame to evaluate before progressing\ncmds.evalDeferred(cmds.play)\n</code></pre> <p></p>"},{"location":"api/#interactivepy","title":"interactive.py","text":"<p>Finally, this module is used for UI elements like the main Ragdoll menu. Every function takes selection into account, along with any preferences set via the Option Dialogs.</p> <p>It's useful for when you want to replicate what the menu does, including taking selection into account and outputting warning messages in the Script Editor. It won't raise exceptions like <code>api</code> and <code>commands</code>, instead each function return either <code>True</code> for success or nothing for failure. Failures typically follow one or more warning messages.</p> <ul> <li>\u2714\ufe0f Animator-friendly, useful for quick scripts</li> <li>\u274c No usable return value</li> <li>\u274c Sensitive to user preferences</li> <li>\u274c No guarantee on backwards compatibility</li> <li>\u274c Verbose output in Script Editor</li> </ul> <pre><code>from maya import cmds\nfrom ragdoll import interactive as ri\n\ncube, _ = cmds.polyCube()\ncmds.move(0, 10, 0)\ncmds.rotate(35, 50, 30)\n\ncmds.select(cube)\nri.assign_marker()\n\ncmds.evalDeferred(cmds.play)\n</code></pre> <p>Pro Tip</p> <p>Whenever you click a menu item, this Python command is printed in the Script Editor!</p> <p></p>"},{"location":"api/#members","title":"Members","text":"<p>Currently available members of <code>ragdoll.api</code>.</p> <ul> <li>Call <code>help()</code> for usage instructions</li> </ul> <pre><code># Fundamentals\napi.createSolver(name=\"mySolver\")\napi.assignMarker(transform, solver)\napi.assignMarkers([transform1, transform2], solver)\n\n# Constraints\napi.createFixedConstraint(marker1, marker2)\napi.createDistanceConstraint(marker2, marker2)\napi.createPinConstraint(marker1)\n\n# Edit\napi.reconnect(child_marker, parent_marker)\napi.retarget(marker, new_transform)\napi.replaceMesh(marker, new_mesh)\n\n# IO\napi.recordPhysics()\napi.exportPhysics()\napi.reinterpretPhysics()  # A.k.a. Import Physics\napi.extractPhysics()\n</code></pre> <p></p>"},{"location":"api/#environment-variables","title":"Environment Variables","text":"<p>Gain more control over the integration of Ragdoll into your pipeline with these optional environment variables. For example, to avoid the startup dialog on first launch, set <code>RAGDOLL_NO_STARTUP_DIALOG=1</code> before loading the plug-in.</p> Variable Description Default RAGDOLL_PLUGIN Override absolute path to binary plugin, .mll on Windows .so on Linux. This overrides whatever is on <code>MAYA_PLUG_IN_PATH</code> <code>\"ragdoll\"</code> RAGDOLL_NO_STARTUP_DIALOG Do not display the startup-dialog on first launch. <code>False</code> RAGDOLL_AUTO_SERIAL Automatically activate Ragdoll on install using this serial number. Unset RAGDOLL_TELEMETRY Help development by uploading usage data. Enabled for non-commercial licences, optional for commercial licences."},{"location":"api_reference/","title":"Api reference","text":""},{"location":"api_reference/#api-member-reference","title":"API Member Reference","text":"<p>The complete Ragdoll API. </p> <pre><code>from maya import cmds\nimport ragdoll.api as rd\n\nbox = cmds.polyCube()\n\nsolver = rd.createSolver()\nmarker = rd.assignMarker(box[0], solver)\n\nrd.recordPhysics()\n</code></pre> Function Description createSolver Create a new rdSolver node createGroup Create a new group under <code>solver</code> with <code>name</code> and <code>opts</code> assignMarkers Assign markers to <code>transforms</code> belonging to <code>solver</code> assignMarker Convenience function for passing and recieving a single <code>transform</code> createDistanceConstraint Create a new distance constraint between <code>parent</code> and <code>child</code> createPinConstraint Create a new constraint for <code>parent</code> and optionally <code>parent</code> createFixedConstraint Create a new fixed constraint between <code>parent</code> and <code>child</code> linkSolver Link solver <code>a</code> with <code>b</code> unlinkSolver Unlink <code>solver</code> retargetMarker Retarget <code>marker</code> to <code>transform</code> untargetMarker Remove parent from <code>child</code> reparentMarker Make <code>new_parent</code> the new parent of <code>child</code> unparentMarker Remove parent from <code>child</code> replaceMesh Replace the 'Mesh' shape type in <code>marker</code> with <code>mesh</code>. assignCollisionGroup Assign <code>markers</code> to a new collision <code>group</code> addToCollisionGroup Assign <code>markers</code> to a new collision <code>group</code> removeFromCollisionGroup Assign <code>markers</code> to a new collision <code>group</code> exportPhysics Export everything Ragdoll-related into <code>fname</code> importPhysics Recreate Maya scene from exported Ragdoll file updatePhysics Update existing physics from an exported Ragdoll file recordPhysics Transfer simulation from <code>solver</code> to animation land reinterpretPhysics Recreate Maya scene from exported Ragdoll file loadPhysics Create a Maya scene from an exported Ragdoll file extractPhysics Generate an animated joint hierarchy from <code>solver</code> deletePhysics Delete Ragdoll from anything related to <code>nodes</code> deleteAllPhysics Nuke it from orbit <p></p>"},{"location":"api_reference/#argument-signatures","title":"Argument Signatures","text":"<p>A more in-depth view on each function.</p>"},{"location":"api_reference/#createsolver","title":"createSolver","text":"<p>Create a new rdSolver node <pre><code>def createSolver(name, opts):\n    \"\"\"Create a new rdSolver node\n               ____\n              /    \\\n          /  |      |\n      ---/----\\____/\n        /       /\n    ---/-------/---\n      /       /\n\n    The solver is where the magic happens. Markers are connected to it\n    and solved within; populating its .outputMatrix attribute with the\n    final result.\n\n    Arguments:\n        name (str, optional): Override the default name of this solver\n        opts (dict, optional): Configure the solver with these options\n\n    Options:\n        frameskipMethod (int): Method to use whenever a frame is skipped,\n            can be either api.FrameskipPause or api.FrameskipIgnore\n\n    \"\"\"\n</code></pre> </p>"},{"location":"api_reference/#creategroup","title":"createGroup","text":"<p>Create a new group under <code>solver</code> with <code>name</code> and <code>opts</code> <pre><code>def createGroup(solver, opts):\n    \"\"\"Create a new group under `solver` with `name` and `opts`\n\n    Arguments:\n        solver (rdSolver): Owning solver of this group\n        name (str, optional): A custom name for this group\n        opts (dict, optional): Default attributes of this group\n\n    Options:\n        selfCollide (bool): Whether or not members of this\n            group should collide with each other.\n\n    \"\"\"\n</code></pre> </p>"},{"location":"api_reference/#assignmarkers","title":"assignMarkers","text":"<p>Assign markers to <code>transforms</code> belonging to <code>solver</code> <pre><code>def assignMarkers(transforms, solver, opts):\n    \"\"\"Assign markers to `transforms` belonging to `solver`\n\n    Each marker transfers the translation and rotation of each transform\n    and generates its physical equivalent, ready for recording.\n\n    Arguments:\n        transforms (list): One or more transforms to assign markers onto\n        solver (rdSolver or rdGroup): Add newly created markers to this solver\n        opts (dict, optional): Options, see below\n\n    Options:\n        autoLimit (bool): Transfer locked channels into physics limits\n        preventIdenticalMarker (bool): Skip transforms with identical position\n            and orientation, typically sub-controls.\n        defaults (dict): Key/value pairs of default attribute values\n\n    \"\"\"\n</code></pre> </p>"},{"location":"api_reference/#assignmarker","title":"assignMarker","text":"<p>Convenience function for passing and recieving a single <code>transform</code> <pre><code>def assignMarker(transform, solver, opts):\n    \"\"\"Convenience function for passing and recieving a single `transform`\n\n    \"\"\"\n</code></pre> </p>"},{"location":"api_reference/#createdistanceconstraint","title":"createDistanceConstraint","text":"<p>Create a new distance constraint between <code>parent</code> and <code>child</code> <pre><code>def createDistanceConstraint(parent, child, opts):\n    \"\"\"Create a new distance constraint between `parent` and `child`\n\n    \"\"\"\n</code></pre> </p>"},{"location":"api_reference/#createpinconstraint","title":"createPinConstraint","text":"<p>Create a new constraint for <code>parent</code> and optionally <code>parent</code> <pre><code>def createPinConstraint(child, parent, opts):\n    \"\"\"Create a new constraint for `parent` and optionally `parent`\n\n    Arguments:\n        child (rdMarker): Affected Marker\n        parent (rdMarker, optional): Attach child to parent, otherwise to world\n        transform (dagNode, optional): Parent the constraint shape node here\n        opts (dict, optional): User options\n\n    \"\"\"\n</code></pre> </p>"},{"location":"api_reference/#createfixedconstraint","title":"createFixedConstraint","text":"<p>Create a new fixed constraint between <code>parent</code> and <code>child</code> <pre><code>def createFixedConstraint(parent, child, opts):\n    \"\"\"Create a new fixed constraint between `parent` and `child`\n\n    \"\"\"\n</code></pre> </p>"},{"location":"api_reference/#linksolver","title":"linkSolver","text":"<p>Link solver <code>a</code> with <code>b</code> <pre><code>def linkSolver(a, b, opts):\n    \"\"\"Link solver `a` with `b`\n\n    This will make `a` part of `b`, allowing markers to interact.\n\n    Arguments:\n        a (rdSolver): The \"child\" solver\n        b (rdSolver): The \"parent\" solver\n\n    Returns:\n        Nothing\n\n    \"\"\"\n</code></pre> </p>"},{"location":"api_reference/#unlinksolver","title":"unlinkSolver","text":"<p>Unlink <code>solver</code> <pre><code>def unlinkSolver(solver, opts):\n    \"\"\"Unlink `solver`\n\n    From any other solver it may be connected to.\n\n    Arguments:\n        a (rdSolver): The solver to unlink from any other solver\n\n    Returns:\n        Nothing\n\n    \"\"\"\n</code></pre> </p>"},{"location":"api_reference/#retargetmarker","title":"retargetMarker","text":"<p>Retarget <code>marker</code> to <code>transform</code> <pre><code>def retargetMarker(marker, transform, opts):\n    \"\"\"Retarget `marker` to `transform`\n\n    When recording, write simulation from `marker` onto `transform`,\n    regardless of where it is assigned.\n\n    \"\"\"\n</code></pre> </p>"},{"location":"api_reference/#untargetmarker","title":"untargetMarker","text":"<p>Remove parent from <code>child</code> <pre><code>def untargetMarker(marker, opts):\n    \"\"\"Remove parent from `child`\n\n    Meaning `child` will be a free marker, without a parent.\n\n    \"\"\"\n</code></pre> </p>"},{"location":"api_reference/#reparentmarker","title":"reparentMarker","text":"<p>Make <code>new_parent</code> the new parent of <code>child</code> <pre><code>def reparentMarker(child, parent, opts):\n    \"\"\"Make `new_parent` the new parent of `child`\n\n    Arguments:\n        child (rdMarker): The marker whose about to have its parent changed\n        new_parent (rdMarker): The new parent of `child`\n\n    \"\"\"\n</code></pre> </p>"},{"location":"api_reference/#unparentmarker","title":"unparentMarker","text":"<p>Remove parent from <code>child</code> <pre><code>def unparentMarker(child, opts):\n    \"\"\"Remove parent from `child`\n\n    Meaning `child` will be a free marker, without a parent.\n\n    \"\"\"\n</code></pre> </p>"},{"location":"api_reference/#replacemesh","title":"replaceMesh","text":"<p>Replace the 'Mesh' shape type in <code>marker</code> with <code>mesh</code>. <pre><code>def replaceMesh(marker, mesh, opts):\n    \"\"\"Replace the 'Mesh' shape type in `marker` with `mesh`.\n\n    Arguments:\n        marker (cmdx.Node): Rigid whose mesh to replace\n        mesh (cmdx.Node): Mesh to replace with\n\n    Returns:\n        Nothing\n\n    \"\"\"\n</code></pre> </p>"},{"location":"api_reference/#assigncollisiongroup","title":"assignCollisionGroup","text":"<p>Assign <code>markers</code> to a new collision <code>group</code> <pre><code>def assignCollisionGroup(markers, group, delete_orphans):\n    \"\"\"Assign `markers` to a new collision `group`\n\n    Arguments:\n        markers (list): Markers to assign\n        group (rdCollisionGroup, optional): The group to add Markers to,\n            if none is given a new one is created.\n        delete_orphans (bool, optional): Delete any orphaned groups\n\n    \"\"\"\n</code></pre> </p>"},{"location":"api_reference/#addtocollisiongroup","title":"addToCollisionGroup","text":"<p>Assign <code>markers</code> to a new collision <code>group</code> <pre><code>def addToCollisionGroup(markers, group, delete_orphans):\n    \"\"\"Assign `markers` to a new collision `group`\n\n    Arguments:\n        markers (list): Markers to assign\n        group (rdCollisionGroup, optional): The group to add Markers to,\n            if none is given a new one is created.\n        delete_orphans (bool, optional): Delete any orphaned groups\n\n    \"\"\"\n</code></pre> </p>"},{"location":"api_reference/#removefromcollisiongroup","title":"removeFromCollisionGroup","text":"<p>Assign <code>markers</code> to a new collision <code>group</code> <pre><code>def removeFromCollisionGroup(markers, group, delete_orphans):\n    \"\"\"Assign `markers` to a new collision `group`\n\n    Arguments:\n        markers (list): Markers to assign\n        group (rdCollisionGroup, optional): The group to add Markers to,\n            if none is given a new one is created.\n        delete_orphans (bool, optional): Delete any orphaned groups\n\n    \"\"\"\n</code></pre> </p>"},{"location":"api_reference/#exportphysics","title":"exportPhysics","text":"<p>Export everything Ragdoll-related into <code>fname</code> <pre><code>def exportPhysics(fname, opts):\n    \"\"\"Export everything Ragdoll-related into `fname`\n\n    Arguments:\n        fname (str, optional): Write to this file,\n            or console if no file is provided\n        data (dict, optional): Export this dictionary instead\n\n    Returns:\n        data (dict): Exported data as a dictionary\n\n    \"\"\"\n</code></pre> </p>"},{"location":"api_reference/#importphysics","title":"importPhysics","text":"<p>Recreate Maya scene from exported Ragdoll file <pre><code>def importPhysics(fname, opts):\n    \"\"\"Recreate Maya scene from exported Ragdoll file\n\n    User-interface attributes like `density` and display settings\n    are restored from a file otherwise mostly contains the raw\n    simulation data.\n\n    \"\"\"\n</code></pre> </p>"},{"location":"api_reference/#updatephysics","title":"updatePhysics","text":"<p>Update existing physics from an exported Ragdoll file <pre><code>def updatePhysics(fname, opts):\n    \"\"\"Update existing physics from an exported Ragdoll file\n\n    \"\"\"\n</code></pre> </p>"},{"location":"api_reference/#recordphysics","title":"recordPhysics","text":"<p>Transfer simulation from <code>solver</code> to animation land <pre><code>def recordPhysics(solver, opts):\n    \"\"\"Transfer simulation from `solver` to animation land\n\n    Options:\n        start_time (int, optional): Record from this time\n        end_time (int, optional): Record to this time\n        include (list, optional): Record these transforms only\n        exclude (list, optional): Do not record these transforms\n        kinematic (bool, optional): Record kinematic frames too\n        maintain_offset (bool, optional): Maintain whatever offset is\n            between the source and destination transforms, default\n            value is True\n\n    \"\"\"\n</code></pre> </p>"},{"location":"api_reference/#reinterpretphysics","title":"reinterpretPhysics","text":"<p>Recreate Maya scene from exported Ragdoll file <pre><code>def reinterpretPhysics(fname, opts):\n    \"\"\"Recreate Maya scene from exported Ragdoll file\n\n    User-interface attributes like `density` and display settings\n    are restored from a file otherwise mostly contains the raw\n    simulation data.\n\n    \"\"\"\n</code></pre> </p>"},{"location":"api_reference/#loadphysics","title":"loadPhysics","text":"<p>Create a Maya scene from an exported Ragdoll file <pre><code>def loadPhysics(fname, opts):\n    \"\"\"Create a Maya scene from an exported Ragdoll file\n\n    New transforms are generated and then assigned Markers.\n\n    \"\"\"\n</code></pre> </p>"},{"location":"api_reference/#extractphysics","title":"extractPhysics","text":"<p>Generate an animated joint hierarchy from <code>solver</code> <pre><code>def extractPhysics(solver, opts):\n    \"\"\"Generate an animated joint hierarchy from `solver`\n\n    This will generate a new joint hierarchy and apply the full\n    simulation as keyframes onto it, for a complete replica of\n    the simulation in a Ragdoll-independent way.\n\n    \"\"\"\n</code></pre> </p>"},{"location":"api_reference/#deletephysics","title":"deletePhysics","text":"<p>Delete Ragdoll from anything related to <code>nodes</code> <pre><code>def deletePhysics(nodes):\n    \"\"\"Delete Ragdoll from anything related to `nodes`\n\n    This will delete anything related to Ragdoll from your scenes, including\n    any attributes added (polluted) onto your animation controls.\n\n    Arguments:\n        nodes (list): Delete physics from these nodes\n        dry_run (bool, optional): Do not actually delete anything,\n            but still run through the process and throw exceptions\n            if any, and still return the results of what *would*\n            have been deleted if it wasn't dry.\n\n    \"\"\"\n</code></pre> </p>"},{"location":"api_reference/#deleteallphysics","title":"deleteAllPhysics","text":"<p>Nuke it from orbit <pre><code>def deleteAllPhysics():\n    \"\"\"Nuke it from orbit\n\n    Return to simpler days, days before physics, with this one command.\n\n    \"\"\"\n</code></pre> </p> <p></p>"},{"location":"api_reference/#constants","title":"Constants","text":"<p>Some functions take constants for arguments.</p> <pre><code>from ragdoll import api\napi.assign_marker(a, b, opts={\"density\": api.DensityFlesh})\n</code></pre> Constant Value FrameskipPause 0 FrameskipIgnore 1 DisplayDefault 0 DisplayWire 1 DisplayConstant 2 DisplayShaded 3 DisplayMass 4 DisplayFriction 5 DisplayRestitution 6 DisplayVelocity 7 DisplayContacts 8 InputInherit 0 InputKinematic 2 InputDynamic 3 PGSSolverType 0 TGSSolverType 1 BoxShape 0 SphereShape 1 CapsuleShape 2 MeshShape 4 ConvexHullShape 4 DensityOff 0 DensityCotton 1 DensityWood 2 DensityFlesh 3 DensityUranium 4 DensityBlackHole 5 DensityCustom 6 StartTimeRangeStart 0 StartTimeAnimationStart 1 StartTimeCustom 2 Lod0 0 Lod1 1 Lod2 2 LodCustom 3 MatchByName 0 MatchByHierarchy 1 RecordConstraintMethod 0 RecordMatchMethod 1 InputOff 3 InputGuide 3"},{"location":"blender-beta/","title":"Blender Beta","text":"<p>Thanks to Blender Studio for the Dragonfly rig \u2764\ufe0f</p>"},{"location":"blender-beta/#beta-testing-ragdoll-in-blender","title":"Beta Testing Ragdoll in Blender \ud83e\udd73","text":""},{"location":"blender-beta/#welcome","title":"Welcome","text":"<p>Ragdoll is a real-time physics solver for Maya, and now it's coming to Blender. At this moment, we are working hard to port features from the Maya version of Ragdoll into the Blender one. In the meantime, we invite you to join us in shaping its final form for Blender animators!</p>"},{"location":"blender-beta/#addon-status","title":"AddOn Status","text":"Blender Version Windows macOS (Intel) macOS (Apple Silicon) Linux 3.4 \u2705 \u2705 \u2705 \u274c 3.5 \u2705 \u274c \u274c \u274c"},{"location":"blender-beta/#a-quick-warm-up","title":"A Quick Warm Up","text":"<p>From left to right:</p> <ul> <li>A simple cycled up-down animation applied to the base of the Dragonfly</li> <li>It's then driving the Ragdoll simulation</li> <li>Once we are satisfied, Ragdoll records the result and bakes it onto the rig</li> <li>Profit!</li> </ul> <p></p> <p>And that's basically what Ragdoll is for \u2014 adding the fun of physics to your animation workflow!</p> <p>To learn more about this Ragdoll Dragonfly, read below!</p>"},{"location":"blender-beta/#interface","title":"Interface","text":"<p>Since we are playing with physics, you can find Ragdoll in the <code>Physics Properties</code> tab, if the current active object is compatible with Ragdoll.</p> <p></p>"},{"location":"blender-beta/#marker","title":"Marker","text":"<p>What types of things can work with Ragdoll (assign marker to)?</p> <p>At this moment, only Mesh-type objects and Pose-Bones can. NURBS or Empty may be supported in the future.</p> <p>Mesh</p> <p>When the current active object is already in Ragdoll, the <code>Physics Properties</code> tab will display associated properties.</p> <p></p> <p>Pose Bone</p> <p>To work with Pose-Bones, enter <code>Pose Mode</code> and select the bone you want to use with Ragdoll.</p> <p>You can, and mostly would, select multiple bones and click on the <code>Assign and Connect</code> button. It will give you a chain of markers.</p> <p></p>"},{"location":"blender-beta/#solver","title":"Solver","text":"<p>Note that the Ragdoll solver (and all its friends) can be found in a collection called <code>RagdollCol</code>. The solver node is responsible for simulating physical interactions between all its associated markers and more.</p> <p></p>"},{"location":"blender-beta/#group","title":"Group","text":"<p>Currently, when clicking the <code>Assign and Connect</code> button with multiple objects/pose-bones, a Group is created with them.</p> <p>A group allows you to batch tweak some common properties like <code>Stiffness</code> and <code>Damping</code> for convenience.</p> <p></p>"},{"location":"blender-beta/#more-about-them","title":"More About Them","text":"<p>Please visit the Learn Ragdoll website for more details about them. Especially this page which discusses the cornerstone of Ragdoll \u2014 Marker.</p>"},{"location":"blender-beta/#manipulator-tool","title":"Manipulator Tool","text":"<p>The Ragdoll manipulator tool provides a direct way to tweak some common marker properties. It will become more feature-rich in the future, and you can expect to spend more time using it when working with Ragdoll.</p> <p>The tool can be activated through here:</p> <p></p> <p>And the solver node needs to be selected to bring up the GUI.</p> <p></p>"},{"location":"blender-beta/#tips-to-make-dragonfly-fly","title":"Tips to Make Dragonfly Fly","text":"<p>Full walkthrough video: https://www.youtube.com/watch?v=vAAiqxYW9Us</p> <p>Here's a short list of tips that could help:</p>"},{"location":"blender-beta/#connecting-marker","title":"Connecting Marker","text":"<p>When assigning multiple markers, those markers will be chained together, and the first one will be set to Kinematic. And if a marker's behavior is set to Kinematic, it will 100% follow the input animation.</p> <p>Since we will only apply an up-down movement to the rig base, just pick the torax (chest) of the Dragonfly for the first marker to follow that animation.</p> <p>Then, when assigning the next chain of markers, remember to also start from that torax bone.</p> <p></p>"},{"location":"blender-beta/#offset-solver","title":"Offset Solver","text":"<p>Other than changing the <code>Display Type</code> property to <code>Wire</code> in the Solver for a cleaner view, sometimes you may want a side-by-side view when editing markers. If that's the case, simply move the Solver node and all the marker shapes will step aside.</p> <p>You may want to uncheck <code>Lock Object Modes</code> for faster object and bone selection.</p> <p>Once done, move back and then activate the Manipulator tool for matching marker shapes to geometry.</p> <p></p>"},{"location":"blender-beta/#ik-legs","title":"IK Legs","text":"<p>You may also reference this page.</p> <p>Simply put, we don't want to assign markers directly to IK controllers since physics is more like an FK thing. So instead, we would assign them to the bones that are driven by IK controls.</p> <p>With this Dragonfly rig, although we can find them, they are basically locked. To work around that, the idea is to add an extra bone (the gray one in the middle) and make our own FK to drive IK.</p> <p></p>"},{"location":"blender-beta/#scene-scale","title":"Scene Scale","text":"<p>This Dragonfly is quite a big one. To get a much real-world result, we have to tune down the scene scale.</p> <p></p> <p></p> <p>That's it!</p> <p>We hope you have fun, and please don't hesitate to ask questions on the forum!</p>"},{"location":"crack-torrent/","title":"Ragdoll Crack Torrent","text":"<p>Looking for a crack for Ragdoll, to use it for free without reprocussions? Look no further! Here's a torrent you can use to download it for free.</p> <ul> <li>\u23ec Download Torrent</li> <li>\ud83e\uddf2 Magnet Link</li> </ul>"},{"location":"custom-attach/","title":"Custom attach","text":"<p>The <code>Record Simulation</code> command consists of 4 steps.</p> # Step Description 1 <code>Extract</code> Extract Simulation onto a new joint hierarchy 2 <code>Attach</code> Constrain rig controls to joint hierarchy 3 <code>Bake</code> Call <code>cmds.bakeResults</code> 4 <code>Cleanup</code> Delete joint hierarchy and constraints <p>The final result is keyframes on the rig controls, in a new Animation Layer.</p> <p>Version 2.0 - Up to date</p> <p>Written for Ragdoll <code>2022.05.04</code> and above.</p> <p></p>"},{"location":"custom-attach/#manual-record","title":"Manual Record","text":"<p>Here's what it looks like to do manually, for 1 control.</p> <p></p> <p>Repeat the <code>Attach</code> step for each control, and take locked channels into account, and you've entirely replicated what <code>Record Simulation</code> does.</p> <p></p>"},{"location":"custom-attach/#custom-attach","title":"Custom Attach","text":"<p>The <code>Attach</code> step can be overridden to accommodate for custom constraints, for when your studio rigs cannot use the native <code>cmds.parentConstraint</code> and <code>cmds.orientConstraint</code> nodes that ship with Maya.</p> <p>Here's how it works.</p> <pre><code># 1 - Import the Record Simulation command\nfrom ragdoll import recording\n\n# 2 - Write your own command to attach\ndef custom_attach(...):\n    ...\n\n# 3 - Replace the default attach\nrecording._Recorder._attach = custom_attach\n</code></pre> <p>Here's an example of the default implementation, pay special attention to the calls to <code>cmds.parentConstraint</code> and <code>cmds.orientConstraint</code>; these are the ones you want to replace with your own commands.</p> <pre><code>from ragdoll.vendor import cmdx\nfrom ragdoll import recording\n\n\ndef custom_attach(self, marker_to_dagnode):\n    \"\"\"Constrain rig controls to simulation\n\n    Arguments:\n        marker_to_dagnode (dict): Dictionary with marker: dagnode, the dagnode\n            is the animation control, e.g. L_hand_ctl\n\n    Returns:\n        new_constraints (list): Newly created constraints as cmdx.Node instances\n\n    \"\"\"\n\n    # Constraints created by this function\n    # This list is used to delete the constraints after recording is complete\n    new_constraints = []\n\n    # Attach animation controls at the start time,\n    # that's where the simulation and animation overlap\n    initial_time = cmdx.current_time()\n    cmdx.current_time(self._solver_start_frame)\n\n    for dst, marker in self._dst_to_marker.items():\n        src = marker_to_dagnode.get(marker, None)\n\n        if not src:\n            continue\n\n        # dst == your rig control\n        # src == the extracted transform\n\n        skip_rotate = set()\n        skip_translate = set()\n\n        for chan, plug in zip(\"xyz\", dst[\"rotate\"]):\n            if plug.locked:\n                skip_rotate.add(chan)\n\n        for chan, plug in zip(\"xyz\", dst[\"translate\"]):\n            if plug.locked:\n                skip_translate.add(chan)\n\n        if skip_translate != {\"x\", \"y\", \"z\"}:\n\n            #\n            # REPLACE ME\n            #\n            pcon = cmds.parentConstraint(\n                src.shortest_path(),\n                dst.shortest_path(),\n                maintainOffset=True,\n                skipTranslate=list(skip_translate) or \"none\",\n                skipRotate=list(\"xyz\"),\n            )\n\n            # Store reference to this node\n            pcon = cmdx.encode(pcon[0])\n            new_constraints.append(pcon)\n\n        if skip_rotate != {\"x\", \"y\", \"z\"}:\n\n            #\n            # REPLACE ME\n            #\n            ocon = cmds.orientConstraint(\n                src.shortest_path(),\n                dst.shortest_path(),\n                maintainOffset=True,\n                skip=list(skip_rotate) or \"none\",\n            )\n\n            ocon = cmdx.encode(ocon[0])\n            new_constraints.append(ocon)\n\n    cmdx.current_time(initial_time)\n\n    return new_constraints\n\n\n# Store original attach, just in case\ntry:\n    old_attach\nexcept NameError:\n    old_attach = recording._Recorder._attach\n\n# Replace with custom implementation\nrecording._Recorder._attach = custom_attach\n</code></pre> <p></p>"},{"location":"custom-attach/#usage","title":"Usage","text":"<p>Copy/paste the above snippet into your Script Editor and call <code>Record Simulation</code>. Nothing should have changed, because the above is a near-exact copy of the original.</p> <p>From here, start editing the snippet. Keep executing the script in your Script Editor as you make changes, and call <code>Record Simulation</code> from the <code>Ragdoll</code> menu to try it out.</p> <p>To restore the original implementation, either use <code>old_attach</code> or reload the plug-in.</p> <p></p>"},{"location":"custom-attach/#variables","title":"Variables","text":"<p>The <code>src</code> variable is the extracted simulation, the joint. The <code>dst</code> variable is your rig control, what you want to constrain to <code>src</code>. The <code>skip_translate</code> and <code>skip_rotate</code> variables are two <code>sets</code> containing the channels on your rig controls were locked (if any). Use these if your constraint commands needs them (like <code>cmds.parentConstraint</code> does).</p> <p></p>"},{"location":"custom-attach/#default-constraint-commands","title":"Default Constraint Commands","text":"<p>The default implementation uses <code>cmds.parentConstraint</code> for the <code>Translate</code> channels, and <code>cmds.orientConstraint</code> for the <code>Rotate</code> channels to accommodate for when one or more <code>Rotate</code> channels are locked. As it happens, the <code>cmds.parentConstraint</code> produces gimbal locks in situations like that.</p> <p>You may use a single constraint command for all channels, if available, to try and see whether those also run into gimbal issues - such as randomly flipping 180 degrees. If they do, consider using a different constraint for the rotate channel.</p> <p></p>"},{"location":"custom-attach/#return-value","title":"Return Value","text":"<p>The command MUST return <code>new_constraint</code> which MUST be of <code>list</code> type and contain any and all nodes created by this function. In the default implementation, we call on <code>maya.cmds</code> to create the constraint, but convert the resulting <code>string</code> types to <code>cmdx.Node</code> via <code>cmdx.encode()</code>. You MUST do the same.</p> <p></p>"},{"location":"custom-attach/#reference","title":"Reference","text":"<p>See the original command, along with available members of <code>self</code> on GitHub.</p> <ul> <li><code>mottosso/ragdoll/ragdoll/tools/markers_tool.py</code></li> </ul>"},{"location":"documentation/","title":"Documentation","text":"<p>Read all about each feature of Ragdoll in detail here.</p> <ul> <li>Cache</li> <li>Constraints</li> <li>Environment</li> <li>Export Physics</li> <li>Fields</li> <li>Group</li> <li>Import Physics</li> <li>Level of Detail</li> <li>Link</li> <li>Live Mode</li> <li>Locomotion</li> <li>Manipulator</li> <li>Marker</li> <li>Record Simulation</li> <li>Retargeting</li> <li>Snap to Simulation</li> <li>Solver</li> <li>Replace Mesh</li> </ul> <p></p>"},{"location":"documentation/#external-resources","title":"External Resources","text":"<p>Here I'll collect any third-party tutorials written or recorded for Ragdoll.</p> Resource Description Review by Amedeo Beretta General overview, covering the basics of the tool just as it's coming out of private early access"},{"location":"download/","title":"Download","text":"Download <p>Pick an integration</p> <p></p> <p>Autodesk Maya 2019-2025</p> Download <p>Blender 3.4-4.1</p> Download <p>Ragdoll Core Installer</p> Download <p></p> <p>Ragdoll Core Python SDK</p> Read More <p>Ragdoll Core C++ SDK</p> Coming Soon <p></p> <p>Join the community of ragdollers on Discord and/or Discourse.</p> Chat Forums"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#examples","title":"Examples","text":"<p>Download and have a go!</p> <code>6.78 mb</code> Example 1 | Just a Girl <p>An example of hair simulation with Ragdoll.</p> Download <p></p> <code>2.93 mb</code> Example 2 | mGirl <p>An example of cloth simulation with Ragdoll.</p> Download <p></p> <code>2.77 mb</code> Example 3 | Muscle <p>An example of muscle simulation with Ragdoll.</p> Download <p></p> <code>1.18 mb</code> Example 4 | Overview <p>Some basic object types to fool around with.</p> Download <p></p> <code>0.16 mb</code> Example 5 | Parkour <p>An animated Ragdoll \"parkour\" character.</p> Download <p></p> <code>4.15 mb</code> Example 6 | mHair <p>Basic character setup with basic hair controls.</p> Download <p></p> <code>0.44 mb</code> Example 7 | Mechanical <p>An accurate mechanical contraption.</p> Download <p></p> <code>0.40 mb</code> Example 8 | Driving <p>A late night drive on a busy country road.</p> Download <p></p> <code>0.05 mb</code> Example 9 | Dynamic Control <p>A regular animation control. With dynamics!</p> Download <p></p> <code>2.91 mb</code> Example 10 | Dance, Baby <p>Fool around with guide strength to affect this dance performance!</p> Download <p></p> <code>0.24 mb</code> Example 11 | Slowmo <p>Manipulate time with the <code>timeMultiplier</code> attribute.</p> Download"},{"location":"features/","title":"Features","text":"<ul> <li>No pre-roll needed</li> <li>No rigging needed</li> <li>Rewind &amp; Resume</li> <li>Frameskip Protection</li> <li>Cycle Protection</li> </ul>"},{"location":"floating-licence/","title":"Floating Licencing","text":"<p>Congratulations on your purchase of a floating licence for Ragdoll Dynamics!</p>"},{"location":"floating-licence/#overview","title":"Overview","text":"<p>This page will help you get set-up with a licence server, on-premise, and instruct Ragdoll to \"lease\" a licence from it. The server itself can run on any machine and any platform, including Windows, Linux and MacOS, so long as it is accessible from the machine running Ragdoll.</p> <p>Windows, Linux and MacOS</p> <p>The server can run on a different operating system than your workstations. For example, a common scenario is having the server running on Linux and workstations run on a combination of Windows, MacOS and Linux.</p> <p>On each platform, the procedure is the same.</p> <ol> <li>Download the server software</li> <li>Optionally edit the configuration file</li> <li>Activate the server with your <code>Product Key</code></li> <li>Start it up</li> </ol> <p>The server will need to remain running in order for Ragdoll to lease licences.</p> <p></p>"},{"location":"floating-licence/#linux","title":"Linux","text":"<p>Here's a typical series of commands for an x64 system, look inside the .zip for alternative Linux-based platforms.</p> <p>Requirements</p> <p>Make sure you have <code>unzip</code> and <code>wget</code> at the ready, or use alternatives like <code>curl</code> and <code>tar</code> at your own leisure.</p> <pre><code>mkdir turbofloat\ncd turbofloat\nwget https://files.ragdolldynamics.com/api/public/dl/hAlavAOP/TurboFloat-Server-Linux.zip\nwget https://files.ragdolldynamics.com/api/public/dl/6lMDDMdn/TurboActivate.dat\nunzip TurboFloat-Server-Linux.zip\nmv bin-linux/x64/turbofloatserver ./\nchmod +x turbofloatserver\n./turbofloatserver -a=\"YOUR-SERIAL-NUMBER\"\n./turbofloatserver -x\n# Floating license server for Ragdoll Dynamics (TFS v4.4.4.0)\n</code></pre> <p>You can optionally pass <code>-silent</code> after <code>-x</code> for less verbosity.</p> No internet? <p>The licence server can be activated offline.</p> <ul> <li>See Can I activate my server offline?</li> </ul> <p>From here, you'll likely want <code>turbofloatserver -x</code> called automatically on reboot, such that Ragdoll and Maya can lease licences from it. The exact procedure varies between Linux distributions and company preferences, see the systemd section for tips on the most common approach.</p> <p>More Details</p> <ul> <li>Using systemd with Ragdoll</li> <li>Installation Options</li> <li>Configuration Options</li> </ul> <p></p>"},{"location":"floating-licence/#windows","title":"Windows","text":"<p>Here's what you need to do in order to run the licence server on the Windows platform.</p> <p></p>"},{"location":"floating-licence/#download","title":"Download","text":"<ul> <li><code>TurboFloat-Server-Windows.zip</code></li> </ul> <p>Inside of this file you will find this.</p> <p></p> <p>Edit the <code>.xml</code> file with a <code>port</code> you would like to use.</p> <p>Port number</p> <p>Make note of this port number as you will need it later when connecting to it from Maya.</p> <p>64-bit Server</p> <p>If you need a 32-bit version of the server, find the appropriate <code>TurboFloat</code> binaries here.</p> <ul> <li>https://wyday.com/download/</li> </ul> <p></p>"},{"location":"floating-licence/#activate","title":"Activate","text":"<p>Next we'll need to activate the server. Open a <code>cmd.exe</code> or PowerShell prompt and type in the following.</p> <pre><code>TurboFloatServer.exe -a=\"YOUR-SERIAL-NUMBER\"\n</code></pre> <p>There should be no output from the command, unless there's a problem.</p> No internet? <p>The licence server can be activated offline.</p> <ul> <li>See Can I activate my server offline?</li> </ul> <p>Now you're ready to launch the server!</p> <p></p>"},{"location":"floating-licence/#start","title":"Start","text":"<p>This next command will launch the server.</p> <pre><code>TurboFloatServer.exe -x\n# Floating license server for Ragdoll Dynamics (TFS v4.4.3.0)\n</code></pre> <p>Test</p> <p>This is a good place to test Ragdoll from within Maya, so scroll to the Maya section, test it out and then come back here to finish things up.</p> <p>All good? Great.</p> <p>Optional</p> <p>At this point, you can optionally have the server restart itself and run in the background by installing it as a \"service\".</p> <pre><code>TurboFloatServer.exe -i\n# 2021-05-12, 07:47:26 &lt;error&gt;: OpenSCManager failed (5)\n</code></pre> <p>To do that, you'll need to launch PowerShell/cmd as Administrator.</p> <pre><code># As Administrator\nTurboFloatServer.exe -i\n# 2021-05-12, 07:48:40 &lt;notification&gt;: Service installed successfully.\n</code></pre> <p>From here you can try launching Ragdoll Dynamics in Maya to see whether it manages to successfully lease a licence.</p> <p>More Details</p> <ul> <li>Installation Options</li> <li>Configuration Options</li> </ul> <p></p>"},{"location":"floating-licence/#maya","title":"Maya","text":"<p>With a licence server running, your next step is having Ragdoll connect to it.</p> <p>On each platform, the procedure is the same.</p> <ul> <li>Set <code>RAGDOLL_FLOATING</code></li> <li>Load plug-in</li> </ul> <p>Example</p> <pre><code># From Python\nos.environ[\"RAGDOLL_FLOATING\"] = \"127.0.0.1:13\"\ncmds.loadPlugin(\"ragdoll\")\n</code></pre> <pre><code># From an environment like bash\nexport RAGDOLL_FLOATING=127.0.0.1:13\nmaya\n</code></pre> <p>The format of <code>RAGDOLL_FLOATING</code> is <code>&lt;ip-address&gt;:&lt;port-number&gt;</code>.</p> <p></p> <p>Everything ok?</p> Failed to initialise floating licence <p>If this message appears in your Script Editor upon loading the plug-in, take a closer look at your Output Window on Windows or terminal on Unix.</p> <pre><code># Error: ragdoll._install_floating() - Failed to initialise floating licence, error code '1' #\n</code></pre> Could not load ragdollfloat.dll <p>Windows users may experience this issue, which indicates a broken install. In your distribution, you should have seen both a <code>ragdoll.mll</code> and <code>ragdollfloat.dll</code>. Make sure this file exists, else contact us and we'll help you sort it.</p> <p></p>"},{"location":"floating-licence/#python","title":"Python","text":"<p>Just like with a node-locked licence, you can control the leasing of licences via Python.</p> <pre><code>from ragdoll import licence\n\n# Activate this machine\nlicence.request_lease()\n\n# Deactivate this machine\nlicence.drop_lease()\n</code></pre> <p></p>"},{"location":"floating-licence/#troubleshooting","title":"Troubleshooting","text":"<p>Let's have a look at a few common errors and how to solve them.</p> <p></p>"},{"location":"floating-licence/#failed-to-save-activation-request","title":"Failed to Save Activation Request","text":"<p>This can happen when attempting to generate an activation request for offline activation.</p> <pre><code>./turbofloatserver -a=\"KWVT-U5RS-...\" -areq=\"/bad/path/request.xml\"\n# &lt;error&gt;: Failed to save the activation request file.\n# &lt;error&gt;: Error code 0x1. Contact support or your system administrator.\n</code></pre> <p>The path given, in this case <code>/bad/path/request.xml</code> might not be writable. Try a different path.</p> <p></p>"},{"location":"floating-licence/#failed-to-load-product-details","title":"Failed to Load Product Details","text":"<p>This can happen when attempting to activate a floating licence</p> <pre><code>./turbofloatserver -a=\"KWVT-U5RS-...\"\n# &lt;error&gt;: Failed to load the product details file.\n# &lt;error&gt;: Failed to load the settings.\n</code></pre> <p>The <code>turbofloatserver</code> executable wasn't able to find the <code>TurboActivate.dat</code> file. This file should reside in the same folder as <code>turbofloatserver</code> and can be downloaded from here.</p> <ul> <li>https://files.ragdolldynamics.com/api/public/dl/6lMDDMdn/TurboActivate.dat</li> </ul> <p></p>"},{"location":"floating-licence/#faq","title":"FAQ","text":"<p>Let's cover some common scenarios.</p> <p></p>"},{"location":"floating-licence/#how-can-i-test-connectivity-between-my-machines","title":"How can I test connectivity between my machines?","text":"<p>To test whether machine A is accessible from machine B, try <code>ping</code>.</p> <pre><code>ping 10.0.0.13\n# Reply from 10.0.0.13: bytes=32 time=1ms TTL=117\n</code></pre> <p></p>"},{"location":"floating-licence/#can-i-limit-the-internet-access-of-my-licence-server","title":"Can I limit the internet access of my licence server?","text":"<p>If you're in a secure network, you may want to limit the licence server to the least amount of external access. You can do so by \"whitelisting\" it in your firewall, using this URL and port number.</p> <ul> <li>url: <code>https://wyday.com</code></li> <li>port: <code>443</code></li> </ul> <p>More details here: https://wyday.com/limelm/help/turbofloat-server/</p> <p></p>"},{"location":"floating-licence/#can-i-activate-my-server-offline","title":"Can I activate my server offline?","text":"<p>Lifetime licences, yes. Monthly licences, no.</p> <p>Like node-locked licences, the floating licence server can be activated without an internet connection to the machine running the server.</p> <p>The procedure is the same on each platform.</p> <ol> <li>Generate an activation request from the computer running the licence server</li> <li>Go to https://ragdolldynamics.com/offline</li> <li>Activate using the response from the same computer</li> </ol> <p>Here's how to generate the request.</p> <pre><code>./turbofloatserver -areq=\"/path/to/ActivationRequest.xml\" -a=\"YOUR-SERIAL-NUMBER\"\n</code></pre> <p>And here's how to apply the response.</p> <pre><code>./turbofloatserver -aresp=\"/path/to/ActivationResponse.xml\" -a\n</code></pre> <p>Absolute Path</p> <p>Take care to replace the path in the above commands, and use an absolute path rather than anything relative or special such as <code>~/</code>. The <code>turbofloatserver</code> command can get a little cranky about those things.</p> <p></p>"},{"location":"floating-licence/#how-do-i-reactivate-my-licence-offline","title":"How do I reactivate my licence offline?","text":"<p>If you are offline and changes has been made to your licence on our end, such as the number of seats changing or a new expiry date has been set, here is what you need to do.</p> <p>1. Deactivate locally and remotely</p> <p>Run the following command, replacing the path with one that can be written to.</p> <pre><code>./turbofloatserver -deact=\"/path/to/DeactivationRequest.xml\"\n</code></pre> <p>This should generate the file <code>DeactivationRequest.xml</code> that should look something like this.</p> <pre><code>&lt;DeactivationRequest&gt;blablabla&lt;/DeactivationRequest&gt;\n</code></pre> <p>Now paste the contents of this file into to https://ragdolldynamics.com/offline along with your serial and press Deactivate.</p> <p>Your licence is now deactivated both on locally and remotely.</p> <p>Warning</p> <p>If you forget to pass the <code>DeactivationRequest.xml</code> into the offline deactivation page, Ragdoll will not know about your deactivation. It will continue to believe that your licence remains activated, and may prevent you from activating it twice.</p> <p>If this happens, contact us such that we can manually deactivate your licence on our end.</p> <p>2. Activate</p> <p>Next, follow the steps in Can I activate my server offline as usual.</p> <p></p>"},{"location":"floating-licence/#how-do-i-reactivate-my-licence-online","title":"How do I reactivate my licence online?","text":"<p>If your licence has been activated online and has been updated on our end, you may need to reactivate your licence.</p> <pre><code>./turbofloatserver -deact\n./turbofloatserver -a=\"KWVT-U5RS-...\"\n</code></pre> <p>This will refresh your local licence with whatever changes occured on our end.</p> <p></p>"},{"location":"floating-licence/#failed-to-deactivate-old-product-key","title":"Failed to Deactivate Old Product Key","text":"<p>Can happen during offline activation if your local machine is activated twice.</p> <pre><code>./turbofloatserver -areq=\"/path/to/ActivationRequest.xml\" -a=\"XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX\"\n./turbofloatserver -areq=\"/path/to/ActivationRequest.xml\" -a=\"XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX\"\n# Failed to deactivate old product key.\n</code></pre> <p>If this happens, locally deactivate your machine and try again.</p> <pre><code>./turbofloatserver -deact\n./turbofloatserver -areq=\"/path/to/ActivationRequest.xml\" -a=\"XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX\"\n</code></pre> <p></p>"},{"location":"floating-licence/#failed-to-parse-the-configuration-xml-file","title":"Failed to Parse the Configuration XML File","text":"<p>Can happen if the activation request is passed in as a response.</p> <ul> <li>Activation Request is provided by <code>turbofloatserver</code> and is uploaded to https://ragdolldynamics.com/offline</li> <li>Activation Response is provided by https://ragdolldynamics.com/offline and passed to <code>turbofloatserver</code></li> </ul> <pre><code>./turbofloatserver -areq=\"/path/to/ActivationRequest.xml\" -a=\"XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX\"\n</code></pre> <p>Should instead be:</p> <pre><code>./turbofloatserver -areq=\"/path/to/ActivationResponse.xml\" -a=\"XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX\"\n</code></pre> <p>Note the \"Response\" and not \"Request\"</p> <p></p>"},{"location":"floating-licence/#what-happens-when-my-server-is-offline","title":"What happens when my server is offline?","text":"<p>Leasing will attempt to connect for about 2 seconds until giving up. During that time, Maya may appear frozen.</p> <p></p>"},{"location":"floating-licence/#what-happens-when-my-server-goes-offline","title":"What happens when my server goes offline?","text":"<p>Leasing is re-done once every 30 minutes.</p> <p>30 minutes is the default value (see below), which means that if the server goes down whilst an artist is using it, the solver will be disabled within 30 minutes.</p> <p>The duration can be adjusted, however it is a balance since the time is also how long it takes for the server to free a lease as a result of a Maya crash.</p> <ul> <li>See What happens to a lease when Maya crashes?</li> </ul> <p></p>"},{"location":"floating-licence/#can-i-change-the-port-used-by-the-server","title":"Can I change the port used by the server?","text":"<p>Yes.</p> <p>The default port is <code>13</code> and can be edited via the <code>TurboFloatServer-config.xml</code> file residing in the same directory as the server executable.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;config&gt;\n    ...\n    &lt;bind port=\"13\"/&gt;\n    ...\n&lt;/config&gt;\n</code></pre> <ul> <li>More Configuration Options</li> </ul> <p></p>"},{"location":"floating-licence/#can-i-move-my-licence-server-to-a-different-machine","title":"Can I move my licence server to a different machine?","text":"<p>Yes.</p> <p>To move a licence, you can deactivate it and then activate it again someplace else.</p> <pre><code>TurboFloatServer -deact\n</code></pre> <p>This will deactivate the server. The same can be done if your licence server is offline, by passing a filename to the command.</p> <pre><code>TurboFloatServer -deact=\"deactivation_request.xml\"\n</code></pre> <p>Open this file and paste the contents of it into the offline deactivation wizard here.</p> <ul> <li>https://ragdolldynamics.com/offline</li> </ul> <p></p>"},{"location":"floating-licence/#what-if-i-have-multiple-serial-numbers","title":"What if I have multiple serial numbers?","text":"<p>Complete, Unlimited and Batch have their own serial numbers and each serial number needs its own server.</p> <ul> <li>Each server needs to be a physical machine, but can under certain circumstances be allowed to run within a virtual machine; contact us if this is you.</li> <li>Each server needs their own unique address; they cannot run on the same machine.</li> </ul> <p>From there, provide each of your clients with the full server address to the pool it should lease licences from.</p> <p>For example.</p> <pre><code># Render farm\nRAGDOLL_FLOATING=10.0.0.4:601\n\n# Artist workstations\nRAGDOLL_FLOATING=10.0.0.5:601\n</code></pre> <p></p>"},{"location":"floating-licence/#can-i-disable-the-splash-screen","title":"Can I disable the splash screen?","text":"<p>Yes.</p> <p>Consumers of floating licences generally won't need to manage licenses themselves, and so the startup dialog can be avoided altogether for a smoother experience when inside of Maya.</p> <pre><code>export RAGDOLL_NO_STARTUP_DIALOG=1\nmaya\n</code></pre> <ul> <li>See Environment Variables for details</li> </ul> <p></p>"},{"location":"floating-licence/#can-i-use-ragdoll-with-cloud-workstations-like-aws-and-gcp","title":"Can I use Ragdoll with cloud workstations like AWS and GCP?","text":"<p>Yes.</p> <p>Cloud workstations can pick up licences from your locally hosted licence server. It is not recommended nor supported to run your licence server on a virtual machine.</p> <pre><code># Cloud workstation example\nexport RAGDOLL_FLOATING=local.server:8001\nmaya\n</code></pre> <p>In this example, the cloud workstation is referencing your locally hosted licence server via an IP on your VPN.</p> <p></p>"},{"location":"floating-licence/#what-happens-to-a-lease-when-maya-crashes","title":"What happens to a lease when Maya crashes?","text":"<p>A lease is automatically dropped upon unloading the plug-in or shutting down Maya. In the event of a Maya crash, a lease will automatically drop after 30 minutes per default.</p> <p>The time can be edited via the configuration file; a lower time means more compute and file resources are consumed on the server, the lowest value is 30 seconds.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;config&gt;\n    ...\n    &lt;lease length=\"30\"/&gt;&lt;!-- seconds --&gt;\n    ...\n&lt;/config&gt;\n</code></pre> <p></p>"},{"location":"floating-licence/#can-i-fall-back-to-a-node-locked-licence","title":"Can I fall back to a node-locked licence?","text":"<p>Yes.</p> <p>Remove the <code>RAGDOLL_FLOATING</code> environment variable and reload the plug-in or restart Maya to attempt activation of a node-locked licence.</p> <p></p>"},{"location":"floating-licence/#can-i-activate-my-server-on-a-virtual-machine","title":"Can I activate my server on a Virtual Machine?","text":"<p>No.</p> <p>The server cannot distinguish between two virtual machines which would make it possible to activate an endless amount of them with their own duplicate pools of licences.</p> <p>Although the server cannot run on a VM, clients can. E.g. running Docker for testing in a continous-integration environment or automation for simulation baking or rendering etc.</p> <p></p>"},{"location":"floating-licence/#can-i-monitor-my-licence-server","title":"Can I monitor my licence server?","text":"<p>Yes.</p> <p>With a logging level set to \"notification\", you'll get real-time output from the server whenever a lease is requested and dropped, including..</p> <ol> <li>Time of event</li> <li>Expiry time</li> <li>IP</li> <li>Username</li> <li>PID (Process ID)</li> </ol> <p>The expiry is when the lease will be renewed. Normally not something you need to worry about, unless Maya crashes. This is then the time it'll take the server to realise the lease has been freed.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;config&gt;\n    ...\n    &lt;log file=\"tfs-log.txt\" level=\"notification\"/&gt;\n    ...\n&lt;/config&gt;\n</code></pre> <pre><code>2021-05-12, 11:58:47 &lt;notification&gt;: New connection from IP: ::ffff:127.0.0.1\n2021-05-12, 11:58:47 &lt;notification&gt;: New lease assigned (marcus, 1, IP=::ffff:127.0.0.1, PID=14328). Expires: 2021-05-12 11:28:47 (in UTC). Used / Total leases: 1 / 1\n2021-05-12, 11:58:51 &lt;notification&gt;: New connection from IP: ::ffff:127.0.0.1\n2021-05-12, 11:58:51 &lt;notification&gt;: Lease was released by client (marcus, 1, IP=::ffff:127.0.0.1, PID=14328). Used / Total leases: 0 / 1\n</code></pre> <p>The <code>tfs-log.txt</code> file is dynamically updated as users lease and drop licences, and includes mention of how many licences are in use and remaining. You can monitor the tail of this file for real-time updates, and use any tooling to parse these notifications into your own infrastructure.</p> <p>See Also</p> <ul> <li>https://forums.ragdolldynamics.com/t/floating-server-web-api</li> </ul> <p></p>"},{"location":"floating-licence/#what-does-the-server-say-when-a-lease-request-is-rejected","title":"What does the server say when a lease request is rejected?","text":"<p>With <code>level=\"notification\"</code> it'll say this.</p> <pre><code>2021-05-16, 14:52:50 &lt;notification&gt;: License lease request rejected because no more free slots, numTotalLics=9, pkey=YOUR-SERIAL-NUMBER\n</code></pre> <p></p>"},{"location":"floating-licence/#how-do-i-run-my-server-in-the-background-using-systemd","title":"How do I run my server in the background using systemd?","text":"<p>systemd is a common option for running background processes on Linux. Here's a quick run-down how to get <code>turbofloatserver</code> running with it.</p> <p>Prerequisities</p> <ol> <li>Make sure you can run <code>turbofloatserver -x</code> already</li> <li>Make note of the full path to your <code>turbofloatserver</code>, here we will assume <code>/turbofloat</code></li> </ol> <p>Ok, with that out of the way, create a new file called <code>/etc/systemd/system/turbofloat.service</code> with the content below.</p> <p>turbofloat.service</p> <pre><code>[Unit]\nDescription=TurboFloat server for CI\nAfter=network.target\n\n[Service]\nType=simple\nUser=root\nWorkingDirectory=/root\nExecStart=/turbofloat/turbofloatserver -x -s\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Replace with your Path</p> <p>Here we use <code>/turbofloat/turbofloatserver -x -s</code> but your path will likely be different!</p> <p>Now let's start it.</p> <pre><code>systemctl start turbofloat\n</code></pre> <p>You may need sudo</p> <p>Unless you are logged in as a root/administrator user, you may need to use <code>sudo</code> with this command. E.g. <code>sudo systemctl</code></p> <p>If there are no complaints, we're set to have this automatically run in the background whenever the computer restarts.</p> <pre><code>systemctl enable turbofloat\n</code></pre> <p>And that's it. You should now have access to this server in the exact same way as you did when calling <code>turbofloatserver -x</code> manually.</p> <p>To check the status of your server, try this.</p> <pre><code>~/turbofloat$ systemctl status turbofloat\n\u25cf turbofloat.service - TurboFloat server for CI\n     Loaded: loaded (/etc/systemd/system/turbofloat.service; enabled; vendor preset: enabled)\n     Active: active (running) since Wed 2023-10-18 13:31:21 BST; 37s ago\n   Main PID: 81594 (turbofloatserve)\n      Tasks: 17 (limit: 35692)\n     Memory: 1.1M\n        CPU: 18ms\n     CGroup: /system.slice/turbofloat.service\n             \u2514\u250081594 /home/marcus/turbofloat/turbofloatserver -x -s\n\nOct 18 13:31:21 minilinux systemd[1]: Started TurboFloat server for CI.\nOct 18 13:31:21 minilinux turbofloatserver[81594]: 2023-10-18, 13:31:21 &lt;notification&gt;: Auto-detected 16 CPU cores; creating a thread pool that large.\nOct 18 13:31:21 minilinux turbofloatserver[81594]: Floating license server for Ragdoll Dynamics (TFS v4.4.4.0)\n</code></pre> <p>You can also use <code>journalctl</code> to follow the log interactively, as though it was running in the local terminal.</p> <pre><code>~/turbofloat$ journalctl --follow --unit turbofloat\nOct 18 13:31:21 minilinux systemd[1]: Started TurboFloat server for CI.\nOct 18 13:31:21 minilinux turbofloatserver[81594]: 2023-10-18, 13:31:21 &lt;notification&gt;: Auto-detected 16 CPU cores; creating a thread pool that large.\nOct 18 13:31:21 minilinux turbofloatserver[81594]: Floating license server for Ragdoll Dynamics (TFS v4.4.4.0)\n</code></pre>"},{"location":"licencing/","title":"Licencing","text":""},{"location":"licencing/#overview","title":"Overview","text":"<p>Let's cover the basics..</p> <ul> <li>Ragdoll requires a commercial licence for commercial use</li> <li>Ragdoll is free for non-commercial use</li> <li>Ragdoll is free for testing within a commercial environment</li> </ul> <p>About activation..</p> <ul> <li>A commercial licence is activated with a <code>Product Key</code></li> <li>Get a <code>Product Key</code> by purchasing a licence</li> <li>A non-commercial licence is activated automatically on launch</li> <li>A non-commercial licence expires 30 days after activation</li> </ul> <p>See also</p> <ul> <li>Managing Floating Licences</li> </ul> <p></p>"},{"location":"licencing/#ragdoll-apprentice","title":"Ragdoll Apprentice","text":"<p>Once activated without a <code>Product Key</code>, Ragdoll enters \"Apprentice Mode\", and is limited to the following.</p> <ul> <li>Non-commercial projects</li> <li>Ragdoll Apprentice cannot be used in the same pipeline as commercial versions of Ragdoll</li> <li>Ragdoll Apprentice uses its own file format for Maya scenes</li> </ul> <p>See the Ragdoll EULA for details.</p> <p></p>"},{"location":"licencing/#faq","title":"FAQ","text":"<p>Let's dive into specifics.</p> <p></p>"},{"location":"licencing/#how-does-it-work","title":"How does it work?","text":"<p>On first launch, Ragdoll will try and connect to the Ragdoll Licence Server and register your trial version. This version is node-locked to the particular machine you are on.</p> <p>Once you've acquired a product key, you can either:</p> <ol> <li>Click the <code>Ragdoll</code> menu item (bottom)</li> <li>Enter your product key</li> <li>Click <code>Activate</code></li> </ol> <p>Or if you prefer:</p> <pre><code>from ragdoll import licence\nlicence.activate(key)\n</code></pre> <p></p>"},{"location":"licencing/#what-happens-when-my-trial-expires","title":"What happens when my trial expires?","text":"<p>Any <code>rdScene.enabled</code> attribute will be set to <code>False</code>.</p> <p>Scenes will still load just fine and nothing else in your scene is affected. Once activated, the <code>.enabled</code> attribute will return to normal.</p> <p></p>"},{"location":"licencing/#can-i-renew-my-trial-licence","title":"Can I renew my trial licence?","text":"<p>Possibly. Reach out to us if this is relevant to you.</p> <p></p>"},{"location":"licencing/#can-i-open-scenes-made-with-the-trial-version-in-the-commercial-version","title":"Can I open scenes made with the trial version in the commercial version?","text":"<p>No.</p> <p>Files made with Ragdoll Apprentice will appear scrambled with a commercial version. Ragdoll Apprentice is however able to read files saved with a commercial version.</p> <p></p>"},{"location":"licencing/#can-i-use-my-licence-on-more-than-one-machine","title":"Can I use my licence on more than one machine?","text":"<p>One licence, one machine.</p> <p>Ragdoll is licenced per simultaneous use, so for use on two or more machines in parallel you will need 2 licences - a.k.a. \"seats\".</p> <p>When purchasing multiple seats, you may receive a single serial number containing all seats. For floating licences, you'd host a single licence server using this serial to accommodate each machine. For node-locked licences, you'd activate each individual machine using the same serial.</p> <p></p>"},{"location":"licencing/#can-i-move-a-licence-between-two-machines","title":"Can I move a licence between two machines?","text":"<p>Yes.</p> <p>For node-locked licences, you can hit the <code>Deactivate</code> button (which is same as the <code>Activate</code> button once you've activated) and the serial may be used to activate another machine.</p> <p>Floating licences are dynamically activated on any machine requesting a licence from your centralised licence server.</p> <p></p>"},{"location":"licencing/#do-i-need-an-internet-connection-to-use-ragdoll","title":"Do I need an internet connection to use Ragdoll?","text":"<p>No.</p> <p>Activation can happen either offline or online, online happening from within Maya at the click of a button and offline being a 4-step process, see below.</p> <p></p>"},{"location":"licencing/#how-do-i-use-my-floating-licence","title":"How do I use my floating licence?","text":"<p>Floating licences have two parts.</p> <ol> <li>A self-hosted licence server</li> <li>The Ragdoll plug-in</li> </ol> <p>Whenever Ragdoll is loaded from Maya, it connects to your licence server in order to \"lease\" a licence. If you own 10 licences, then one of them will remain leased until the plug-in is unloaded from Maya.</p> <p>See also</p> <ul> <li>Managing Floating Licences</li> </ul> <p></p>"},{"location":"licencing/#can-i-activate-offline","title":"Can I activate offline?","text":"<p>Yes.</p> <p>See Offline Activation below.</p> <p></p>"},{"location":"licencing/#when-exactly-is-internet-required","title":"When exactly is internet required?","text":"<p>A connection is made in one of two separate occasions.</p> <ol> <li>Calling <code>ragdoll.licence.install()</code> from Python</li> <li>On simulating any frame</li> </ol> <p><code>install()</code> is typically called when the plug-in is loaded and menu is installed.</p> <p>That is, Maya can open a scene with Ragdoll in it without making a connection to the internet if neither of these things happen. This means you can simulate on one machine, bake or otherwise disable the solver and send it off to a farm (e.g. local or cloud) without worrying about licences.</p> <p>The alternative would be having to erase any trace of Ragdoll from a scene which would be such a pain.</p> <p></p>"},{"location":"licencing/#disabled-network-devices","title":"\"Disabled Network Devices\"","text":"<p>The licence software used by Ragdoll (WyDay TurboActivate) uses your network devices to associate your serial number with a unique fingerprint of your machine. In order for it to do that, it needs access to each of them.</p> <p>Try running your DCC as admin while activating Ragdoll, and then run Maya as normal.</p> <p>Alternatively, have a look at your network connections and make sure they are all enabled while activating Ragdoll, then they can be disabled again.</p> <p></p>"},{"location":"licencing/#can-i-manage-my-licence-via-python","title":"Can I manage my licence via Python?","text":"<p>Sure can, see below.</p> <p></p>"},{"location":"licencing/#licence-api","title":"Licence API","text":"<p>As a user, you'll generally use the UI. But the UI is ultimately making calls to Python (which is making calls to C++) and you can bypass the UI using these same calls.</p> <pre><code>from ragdoll import licence\n\n# Called once before calling any other licencing function\n# This is automatically called on Ragdoll Python initialisation\n# and simulation start, but needs calling manually if simulation\n# hasn't yet started.\nlicence.install()\n\n# Retrieve the currently activated product key\nlicence.current_key()\n\n# Activate using your product ket\nlicence.activate(key)\n\n# Activation for those without access to Internet\nlicence.activation_request_to_file(key, fname)\nlicence.activate_from_file(fname)\n\n# Deactivate whatever key is currently activated\nlicence.deactivate()\n\n# Deactivate offline, to e.g. move a licence from one machine to another\nlicence.deactivation_request_to_file(fname)\n\n# Dictionary of useful information\ndata = licence.data()\n\n{\n    # Same as current_key\n    \"key\": \"Your-Key\",\n\n    # Is the current licence activated?\n    \"isActivated\": True,\n\n    # Is the current licence a trial licence?\n    \"isTrial\": False,\n\n    # Has the licence not been tampered with?\n    \"isGenuine\": True,\n\n    # Has the licence been verified with the server\n    # (requires a connection to the internet)?\n    \"isVerified\": True,\n\n    # How many days until this trial expires?\n    \"trialDays\": 23\n}\n</code></pre> <p></p>"},{"location":"licencing/#offline-activation","title":"Offline Activation","text":"<p>Lifetime licences may be activated offline.</p> What about monthly licences? <p>These require an internet connection. Floating licences require internet only for the licence server itself, meaning your workstations can remain disconnected and protected. Node-locked licences require internet on the machine being activated.</p> <ol> <li>Launch the Offline Activation Wizard</li> <li>Copy/paste the activation request into https://ragdolldynamics.com/offline</li> <li>Click Activate</li> <li>Copy/paste the activation response into the Wizard</li> <li>Profit</li> </ol> <p></p> <p></p>"},{"location":"licencing/#offline-deactivation","title":"Offline Deactivation","text":"<p>Similar to Activation, Deactivation happens via the Offline Deactivation Wizard.</p> <ol> <li>Launch the Offline Deactivation Wizard</li> <li>Copy/paste the deactivation request into https://ragdolldynamics.com/offline</li> <li>Click Deactivate</li> <li>Profit</li> </ol> <p>Caution</p> <p>Once you press <code>Deactivate</code>, then from Maya's perspective your licence will be deactivated. However, the licence server will not know of your deactivation until you paste the request into online deactivation page.</p> <p>This means that it is possible to deactivate a licence but forget to tell the licence server about it, which means you will not be able to reactivate it elsewhere.</p> <p>If this happens, reach out to support@ragdolldynamics.com and we may manually deactivate it for you.</p> <p></p>"},{"location":"menu/","title":"Menu Reference","text":"<p>All items found in the <code>Ragdoll</code> menu at the top of Maya's main window.</p> <p>Add menu items to your shelf with <code>Ctrl + Shift + Click</code></p> <p></p>"},{"location":"menu/#overview","title":"Overview","text":"Item Description  Clear Warnings Clear warnings and errors in the Message Board, see option box for details  Export Physics Save physics to disk.  Import Physics Load physics from disk.  Load Physics Generate new Maya scene from .rag file  Update Physics Update changed physics parameters and add new Markers to existing Maya scene  Bake Mesh Store geometry inside of the Marker, disconnecting it from its source mesh.  Convert to Mesh Convert the Marker geometry into a Maya mesh.  Edit Constraint Pivots Edit the parent and child pivots using native Maya transforms  Reset Constraint Frames Reset constraint frames to their defaults  Delete Physics Clear the Maya scene of anything related to Ragdoll.  Ragdoll Explorer Explore the internals of the solver.  Ragdoll Rendering Edit rendering settings of Ragdoll, shadows and motion blur.  Ragdoll Preferences Edit global Ragdoll preferences, like the scale at which Ragdoll draws things.  Save Preferences Save Ragdoll preferences to disk.  Reset Preferences Restore Ragdoll preferences to their default values.  Ragdoll View your version, and eventually look for updates and tutorials. Not yet though.  Assign Assign marker to this node  Assign and Connect Assign marker to this group of nodes  Assign Cluster Assign cluster to this mesh  Assign Environment Assign environment to this polygonal mesh.  Assign Plan Assign a plan to selected body and feet.  Align Plans Align the end of plan A with the beginning of plan B  Reset Plan Reset the entire plan  Reset Step Sequence Reset the step sequence for a plan  Reset Targets Reset the targets of a plan  Reset Starting Position Snap first target to animation  Reset Nominal Matrix Reset the reference position of the selected foot or feet.  Assign Terrain Assign a terrain to selected plan.  Assign Refinement Plan Assign a refinement plan to selected body and feet.  Assign Collision Group Assign a collision group to selected Markers.  Add to Collision Group Add selected Markers to selected collision.  Remove from Collision Group Remove selected Markers from selected collision group.  Plan to Animation Convert plan into animation  Animation to Plan Convert animation into targets for a plan  Add Target Add another target to selected plan.  Update Plan Recompute locomotion for all or selected plans.  Extract Plan Extract keyframes from plan.  Delete Locomotion Delete all locomotion from the Maya scene.  Assign Character Assign character to selected hierarchy of markers.  Assign End Effector Assign end effector to selected marker(s).  Group Group the selected markers  Ungroup Ungroup the selected markers  Move to Group Move selected markers to group  Merge Solvers Merge two or more solvers into one.  Extract Markers Extract markers into new solver.  Move to Solver Move markers into existing solver.  Assign Constraint Constrain the two selected markers  Distance Constraint Constrain the distance between two markers  Weld Constraint Constrain the position and orientation between two markers  Pin Constraint Softly constrain the position and orientation of a marker in worldspace  Attach Constraint Softly constrain the position and orientation of a marker relative another marker.  Mimic Constraint Generate a hierarchy of local soft pins  Reset T Key Restore T as the hotkey to enter into the Manipulator  Record Simulation Transfer simulation into animation  Snap to Simulation Snap animation to simulation  Manipulator Interactively edit the contents of a solver  Auto Limit Automatically transfer locked rotate channels into Ragdoll limits  Extract Simulation Extract simulation from markers  Extract Direct Output Extract marker output matrices directly onto a set of new joints  Retarget Marker Change where to record the selected marker  Reassign Marker Change the input to the selected marker  Reparent Marker Change the parent of the selected marker  Unparent Marker Remove the parent from the selected marker  Untarget Marker Remove all output from the selected marker  Reset Origin Reset transforms used for pose-space symmetry.  Reset Shape Reset shape settings based on new conditions.  Reset Constraint Frames Reset constraint frames to their defaults  Edit Constraint Frames Edit constraint frames manually  Toggle Channel Box Attributes Expose (or unexpose) more attributes for your Markers  Replace Mesh Replace input of the 'Mesh' shape type with another polygonal or NURBS mesh.  Replace Hard Mesh Replace contact of the 'Mesh' shape type with another polygonal or NURBS mesh.  Disconnect Mesh Disconnect any mesh from this Marker  Parent Marker Select the parent of this marker  Child Markers Select the children of this marker  Markers Select all markers in the scene.  Groups Select all groups in the scene.  Group Members Select members of selected groups  Solvers Select all solvers in the scene.  Markers from Assigned Select all Markers assigned to the current selection  Assigned from Markers Select assigned nodes from currently selected Markers  Create Lollipop Create a new lollipop for the selected marker.  Cache Solver Cache the entire simulation of a solver  Uncache Solver Remove the cache for a solver  Snap to Sim Snap marked controls to simulation.  Link Solver Simulate two or more solvers as one.  Unlink Solver Simulate previously linked solvers separately.  Air Create a field emulating air.  Drag Create a field that prevents anything from moving.  Gravity Create another source of gravity.  Newton Create a field pushing or pulling Markers towards a point.  Radial Create a field pushing from a point.  Turbulence Introduce turbulence into the simulation.  Uniform Create a field pushing Markers along an axis.  Vortex Create a field pushing markers in a circle.  Volume Axis Create a field affecting Markers within a volume.  Volume Curve Create a field affecting Markers along a curve.  Use Selected as Source Emit forces the using selected Marker.  Disconnect Source Stop using a marker as source of the selected field.  Center of Mass Centroid Apply forces to the exact center of mass.  Volumetric Centroid Apply forces throughout the volume of a Marker.  Warp Time Animate the progression of time  Restore Time"},{"location":"news/","title":"News","text":""},{"location":"news/#news","title":"News","text":"<p>Stay up to date with the latest improvements and fixes to Ragdoll.</p> <ul> <li>./2024.02.29 - Ragdoll x Blender</li> <li>./2023.10.03 - Beyond Ragdoll</li> <li>./2023.04.01 - Locomotion 2.0</li> <li>./2022.11.29 - Live Mode</li> <li>./2022.07.20 - Meshes Meshes Meshes</li> <li>./2022.06.15 - Parallel Locomotion</li> <li>./2022.06.09 - Locomotion</li> <li>./2022.05.04 - Retargeting 2.0 and Maya 2023</li> <li>./2022.03.14 - Quality of Life</li> <li>./2022.02.28 - Environment</li> <li>./2022.02.14 - Fields</li> <li>./2022.02.01 - Quality of Life</li> <li>./2022.01.21 - Maintenance Release</li> <li>./2022.01.17 - Import and Export for Markers</li> <li>./2021.12.15 - Minor Tweaks</li> <li>./2021.12.12 - Interactive Manipulators</li> <li>./2021.11.15 - Animation Capture pt. 4/4</li> <li>./2021.10.25 - Animation Capture pt. \u00be</li> <li>./2021.10.07 - Animation Capture pt. 2/4</li> <li>./2021.09.27 - Animation Capture pt. \u00bc</li> <li>./2021.08.28 - New Tutorials</li> <li>./2021.08.06 - New Documentation</li> <li>./2021.07.27 - Launch</li> <li>./2021.07.15 - Launch Tweaks</li> <li>./2021.07.02 - Quality of Life</li> <li>./2021.06.10 - Telemetry</li> <li>./2021.06.07 - Minor Bugfixes</li> <li>./2021.05.17 - Floating Licence Support</li> <li>./2021.05.10 - Mimic</li> <li>./2021.04.28 - Solver Upgrade</li> <li>./2021.04.23 - No Limits and Improved Performance</li> <li>./2021.04.11 - JSON Import</li> <li>./2021.03.25 - Maya 2022</li> <li>./2021.03.23 - JSON Export</li> <li>./2021.03.11 - Localspace Simulation</li> <li>./2021.03.04 - Passive to Active Transitions</li> <li>./2021.03.01 - Automatic Initial State</li> <li>./2021.02.07 - Scale</li> <li>./2021.01.27 - Message Board</li> <li>./2021.01.17 - Hotfix</li> <li>./2021.01.15 - Dynamic Control 3.0</li> <li>./2021.01.14 - Multiplier Nodes</li> <li>./2021.01.04 - Licencing</li> <li>./2020.12.18 - Documentation</li> <li>./2020.12.07 - Dynamic Control Improvements</li> <li>./2020.12.01 - Character 2.0</li> <li>./2020.11.24 - Hotfix</li> <li>./2020.11.23 - Dynamic Control 2.0</li> <li>./2020.11.22 - Bugfixes</li> <li>./2020.11.17 - Splash Screen</li> <li>./2020.11.16 - Cached Playback</li> <li>./2020.11.10 - Multi-threading</li> <li>blender/2024.04.09 - Patch 2</li> <li>blender/2024.03.07 - Patch 1</li> <li>blender/2024.02.29 - Ragdoll x Blender</li> <li>maya/2024.11.08.beta - Untitled</li> <li>maya/2023.10.03 - Universal Transfer</li> </ul>"},{"location":"no-javascript/","title":"No javascript","text":"Got'cha! <p> You've just been redirected from a JavaScript-heavy landing page because your browser won't permit JavaScript. </p> Continue Try again <p> </p>"},{"location":"nodes/","title":"Nodes","text":"<p>Detailed information about all of Ragdoll's custom nodes along with the most commonly used attributes. For full attribute reference, see the link at the bottom of each node type, such as rdRigid.</p> <p>Each Ragdoll node starts with <code>rd</code>, e.g. <code>rdRigid</code></p> <p></p>"},{"location":"nodes/#scene","title":"Scene","text":"<p>Container of all rigids, constraints and forces that interact.</p> <p>The scene represents the knowledge each simulation has, including rigids and their properties, constraints, forces. The works. There can be more than one Ragdoll scene in your Maya scene, but much like Maya scenes they cannot interact. The order in which scenes are simulated is also undefined, so you cannot expect e.g. fingers in one solver to run after the body in another solver.</p> <p>Parallelism</p> <p>Ragdoll scenes support both scene-level parallelism and node-level parallelism.</p> <p>Scene-level parallelism happens when there are more than one Ragdoll scene present, each scene is then run in parallel for improved performance. For that reason, prefer using as many scenes as possible, especially if they are unlikely to interact.</p> <p>Node-level Parallelism happens internally, whereby a single simulation is distributed over multiple threads. The behavior can be tuned via the <code>rdScene.threadCount</code> attribute. Keep this at 0 when your scenes are small, i.e. &lt; 100 rigids. The overhead of splitting up a simulation outweighs the benefit unless there is a lot to split. You should notice a performance difference in either direction as you manipulate this attribute.</p> <p></p> <p></p> Attribute Description Type <code>.airDensity</code> Global multiplier to the <code>linearDamping</code> and <code>angularDamping</code> of every rigid part of this scene. This is a convenience attribute to the same attribute found in the <code>rdRigid</code> node for global effects, like the whole scene turning into honey. <code>float</code> <code>.currentTime</code> Ragdoll's knowledge of time. This is typically connected automatically and needn't be touched, but it is technically possible to animate this and achieve complex slow-motion or time-related effects. <code>time</code> <code>.enabled</code> State of the solver. An enabled solver will update whenever time changes. <code>bool</code> <code>.gravity</code> Default gravity, in Maya's current distance unit (typically centimeters). Because native Maya shapes are generally quite small - e.g. 1 centimeter for a polyCube - the default gravity is less than the realistic 986.0 cm/s2. If your characters are real-world scaled - e.g. 2 meters tall - then gravity should be closer to 986.0 instead. <code>distance3</code> <code>.groundFriction</code> Friction of the ground. <code>float</code> <code>.groundRestitution</code> Bounciness of the ground plane. <code>float</code> <code>.substeps</code> Divide changes in time by this many. Ragdoll simulates once per frame (or generally once per change in time, including sub-frame changes), but multiples the number of steps taken by this amount for greater accuracy at a (possible) cost to performance. <code>int</code> <code>.useGround</code> Automatically add a static ground shape to this scene. This has a very similar effect to making your own plane and turning that into a Passive Rigid. The ground responds to changes in translation of the scene, but cannot be animated. <code>bool</code> Full Reference <p></p>"},{"location":"nodes/#rigid","title":"Rigid","text":"<p>A single transform in or out of Ragdoll.</p> <p>The rigid is the physical equivalent of native Maya geometry. It can either feed into the simulation (passive) or come out of the simulation (active).</p> <ul> <li><code>Active Rigid</code> pass data from Ragdoll to Maya</li> <li><code>Passive Rigid</code> pass data from Maya to Ragdoll</li> </ul> <p></p> <p></p> Attribute Description Type <code>.airDensity</code> Multiplier of both <code>linearDamping</code> and <code>angularDamping</code>. The two damping attributes are typically used together, but can also be used separately in which case this attribute could be left at 1.0 and forgotten. <code>float</code> <code>.angularDamping</code> Resistance along the opposite direction of rotation for a rigid. Like <code>linearDamping</code> but along the rotation axes. <code>float</code> <code>.collide</code> Whether this rigid should collide with other rigids. This can be useful in areas of many overlapping rigids that aren't necessarily constrained, such as a shoulder or hip. <code>bool</code> <code>.friction</code> The resistance at which two rigids rub against each other. A value of 0 creates an appearance of ice, whereas a value of 1.0 represents 100% friction, no sliding allowed. The value may exceed 1.0, but it is unclear what happens. Use at your own risk. <code>float</code> <code>.inputMatrix</code> Passive position and orientation, this may be animated. <code>matrix</code> <code>.inputParentInverseMatrix</code> Used to cancel out any Maya parent prior to outputting the outputMatrix. <code>matrix</code> <code>.kinematic</code> Whether this rigid should be affected by contacts, constraints and forces. <code>bool</code> <code>.linearDamping</code> Resistance in the opposite direction of travel for a rigid. This creates an underwater look, or at high-enough values resembles honey or eventually cement. <code>float</code> <code>.mass</code> The 'weight' of a rigid. Except 'weight' is technically the result of mass and gravity, and a rigid still has mass even when there isn't any gravity. This attribute is mostly relevant when two active rigids interact, think of a pool table where one of the balls is heavier than another. On the other hand, dropping a feather from high on up onto a static ground yields an identical result to dropping much heavier bowling ball. The ground being static will not move regardless and the speed at which your rigid falls to the ground is independent of its mass given there is no actual air in the simulation to apply counterforce like in the real world. <code>float</code> <code>.restitution</code> The 'bounciness' of a rigid body. Bounce is an opposite force applied whenever two rigids come into contact. The bounce is however also dependent on the <code>rdScene.bounceThresholdVelocity</code> which determines how strong a contact must be in order for an opposing force to be added. Without a threshold, a rigid would bounce at increasingly small intervals into infinity. However, for high-frequency bounces, like a billiard ball bouncing on a marble floor, don't forget to increase your substeps so as to capture the very small and fast motion happening towards the end of its bounce lifetime. <code>float</code> <code>.shapeExtents</code> The dimensions of the 'Box' <code>shapeType</code>. <code>float3</code> <code>.shapeLength</code> Length of the 'Capsule' and 'Cylinder' <code>shapeType</code>. <code>float</code> <code>.shapeOffset</code> Position of a shape relative the rigid. Think of the shape as being a child of the rigid, and this is its child position. It'll be in the orientation of the parent, as you would expect. <code>double3</code> <code>.shapeRadius</code> Radius of the 'Sphere', 'Capsule' and 'Cylinder' <code>shapeType</code>. <code>float</code> <code>.shapeType</code> Shape used for collision detection and automatic computation of <code>centerOfMass</code> and <code>angularMass</code>. The 'Mesh' option converts any input to <code>inputMesh</code> or <code>inputCurve</code> to a suitable physical representation called 'Convex Hull'. As the name implies, the hull cannot be concave. To model concave shapes, like a torus, use multiple rigids and parent them together to form a compound shape. <code>enum</code> <code>.thickness</code> Additional offset from the surface of a shape. Think of this as the shape being extruded by this amount along the surface normals. It's meant to create some padding between two rigids that collide and can help stabilise complex or strong contacts. <code>float</code> Full Reference <p></p>"},{"location":"nodes/#constraint","title":"Constraint","text":"<p>A relationship between two rigids.</p> <p>Typically this relationship is something to limit one or more axes - e.g. <code>translateXYZ</code> and <code>rotateZ</code> - of one rigid relative another rigid, like a door \"constrained\" to a wall. In that case, the wall would be considered a \"parent\" and the door a \"child\". </p> <p>However it is important to keep in mind that in the real world, there is no such thing. The door is as constrained to the wall as the wall is constrained to the door. This is especially apparent when the two constrained rigids are both active and have a similar mass, such as your upper and lower leg. As you bend your knee, both the thigh and lower leg are affected equally.</p> <p></p> <p></p> Attribute Description Type <code>.angularDriveDamping</code> Angular damping of the drive. <code>float</code> <code>.angularDriveStiffness</code> Angular stiffness of the drive. <code>float</code> <code>.angularLimitDamping</code> Damping of contacts with the limit. It is an opposing force to whatever direction a contact is applied. A low value produces a springy appearance, whereas a high value resists any and all motion. <code>float</code> <code>.angularLimitStiffness</code> Stiffness of contacts with the angular limit. A low value makes limits appear soft. Values are relative the mass of your rigid and the amount of force being applied by contacts and other constraints. But with a mass of 1.0 and under normal gravity, the default value should produce a somewhat hard response. <code>float</code> <code>.driveEnabled</code> Whether or not to try and follow the <code>driveMatrix</code> attribute. Drives (a.k.a. Guides) are used to follow an input animation by applying forces relative the delta between your animation and the simulation. The further your animation is from the current state of the simulation, the stronger the force. It's a spring-like force. <code>bool</code> <code>.driveMatrix</code> A target position and orientation for the <code>childRigid</code>, relative the <code>parentFrame</code>. The constraint can apply a spring-like force to both parent and child to try and match this matrix as though the <code>childRigid</code> was an actual child of the <code>parentRigid</code>. <code>matrix</code> <code>.driveStrength</code> Multipler to <code>linearDriveStiffness</code>, <code>linearDriveDamping</code>, <code>angularDriveStiffness</code> and <code>angularDriveDamping</code>. This is a convenience attribute to simplify manipulation (and animation) of the overall drive behaviour. The same result can be achieved by manually multiplying these values. The equation is <code>strength * strength * stiffness</code> and the same for damping. <code>float</code> <code>.limitEnabled</code> Whether any of the specified limits are enabled or not. Think of this as a convenience override for linear (position) and angular (rotation) limits. You can achieve the same effect by setting each limit to a value of 0. <code>bool</code> <code>.limitStrength</code> Multiplier for the <code>linearLimitStiffness</code>, <code>linearLimitDamping</code>, <code>angularLimitStiffness</code> and <code>angularLimitDamping</code> attributes. <code>float</code> <code>.linearDriveDamping</code> Linear damping of the drive. A high value produces a slimy, slow-moving motion. <code>float</code> <code>.linearDriveStiffness</code> Linear stiffness of the drive. If you think of the drive as a spring, then the stiffness determines the thickness of the coil of that spring. A thick coil yields a fast, springy motion. <code>float</code> <code>.linearLimitDamping</code> Damping factor for contacts with the limit. <code>float</code> <code>.linearLimitStiffness</code> Stiffness of contacts with linear limit. Whenever the linear limit is hit, this attribute determines how soft/hard to response should be. A low value (e.g. 10) yields a soft appearance, whereas a high (e.g. 1'000'000) yields a metal-versus-marble contact. <code>float</code> Full Reference <p></p>"},{"location":"nodes/#control","title":"Control","text":"<p>A placeholder for drawing a rigid under a different transform.</p> <p>This node is cosmetic only. It helps you spot the rigid and rigid orientation in the viewport for a standalone controller, like a <code>Guide</code>. It also draws the node with a special icon in the outliner. But that's about it!</p> <p></p> <p></p> Full Reference <p></p>"},{"location":"nodes/#constraint-multiplier","title":"Constraint Multiplier","text":"<p>Multiply one or more attributes of one or more constraints.</p> <p>This node enables you to animate one attribute that affect many attributes, like <code>Translate Guide Stiffness</code> across an entire character or limb.</p> <p></p> <p></p> Attribute Description Type <code>.angularDriveDamping</code> Multiplier for <code>rdConstraint.angularDriveDamping</code> <code>float</code> <code>.angularDriveStiffness</code> Multiplier for <code>rdConstraint.angularDriveStiffness</code> <code>float</code> <code>.angularLimitDamping</code> Multiplier for <code>rdConstraint.angularLimitDamping</code> <code>float</code> <code>.angularLimitStiffness</code> Multiplier for <code>rdConstraint.angularLimitStiffness</code> <code>float</code> <code>.driveStrength</code> Multiplier for <code>rdConstraint.driveStrength</code> <code>float</code> <code>.limitStrength</code> Multiplier for <code>rdConstraint.limitStrength</code> <code>float</code> <code>.linearDriveDamping</code> Multiplier for <code>rdConstraint.linearDriveDamping</code> <code>float</code> <code>.linearDriveStiffness</code> Multiplier for <code>rdConstraint.linearDriveStiffness</code> <code>float</code> <code>.linearLimitDamping</code> Multiplier for <code>rdConstraint.linearLimitDamping</code> <code>float</code> <code>.linearLimitStiffness</code> Multiplier for <code>rdConstraint.linearLimitStiffness</code> <code>float</code> Full Reference <p></p>"},{"location":"nodes/#rigid-multiplier","title":"Rigid Multiplier","text":"<p>Multiply one or more attributes of one or more rigids.</p> <p>This node enables you to animate one attribute that affect many attributes, like <code>Air Density</code> across an entire character or limb.</p> <p></p> <p></p> Attribute Description Type <code>.airDensity</code> Multiplier for <code>rdRigid.airDensity</code> <code>float</code> <code>.angularDamping</code> Multiplier for <code>rdRigid.angularDamping</code> <code>float</code> <code>.linearDamping</code> Multiplier for <code>rdRigid.linearDamping</code> <code>float</code> Full Reference <p></p>"},{"location":"nodes/#other","title":"Other","text":"<p>Notes on general concepts used in Ragdoll.</p> <p></p>"},{"location":"nodes/#backwards-compatibility","title":"Backwards Compatibility","text":"<ul> <li>Default values never change, those written into the node type itself</li> <li>Initial values may change, those set during node-creation</li> </ul> <p>This means previously authored scenes will always behave the same, whilst still enabling new default values for future versions and future authored physics.</p> <p></p>"},{"location":"nodes/#exclusive-nodes","title":"Exclusive Nodes","text":"<p>Ragdoll consists of a few new native types, like <code>rdRigid</code> and <code>rdConstraint</code>. During creation, Ragdoll may generate Maya-native types too, like <code>multMatrix</code> and <code>composeMatrix</code>. Those nodes are exclusive to Ragdoll and should be removed alongside them. This is managed via the so-called <code>.exclusiveNodes</code> attribute on each Ragdoll node type.</p> <p></p>"},{"location":"nodes/#user-attributes","title":"User Attributes","text":"<p>Whenever Ragdoll attributes appear on your original animation controls, they are referred to as \"user attributes\" by Ragdoll and tracked via the <code>.userAttributes</code> attribute on each Ragdoll node. These attributes are exclusive to Ragdoll and are removed alongside the Ragdoll node types they interact with.</p>"},{"location":"open-source/","title":"Open source","text":"<p>MIT License</p> <p>Copyright \u00a9 2013-2020 Ryo Suzuki reputeless@gmail.com</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p> <p>https://github.com/skypjack/entt The MIT License (MIT)</p> <p>Copyright \u00a9 2017-2020 Michele Caini</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copy of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copy or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p> <p>https://github.com/bulletphysics/bullet3 The files in this repository are licensed under the zlib license, except for the files under 'Extras' and examples/ThirdPartyLibs.</p> <p>Bullet Continuous Collision Detection and Physics Library http://bulletphysics.org</p> <p>This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software. Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:</p> <ol> <li>The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.</li> <li>Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.</li> <li>This notice may not be removed or altered from any source distribution.</li> </ol> <p>NVIDIA PhysX SDK Copyright \u00a9 2019 NVIDIA Corporation. All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  * Redistributions of source code must retain the above copyright    notice, this list of conditions and the following disclaimer.  * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the    documentation and/or other materials provided with the distribution.  * Neither the name of NVIDIA CORPORATION nor the names of its    contributors may be used to endorse or promote products derived    from this software without specific prior written permission.</p> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p> <p>Open Dynamics Engine Copyright \u00a9 2001-2004, Russell L. Smith. All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <p>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</p> <p>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</p> <p>Neither the names of ODE's copyright owner nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</p> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p> <p>https://github.com/stack-of-tasks/pinocchio BSD 2-Clause License</p> <p>Copyright \u00a9 2014-2020, CNRS  Copyright \u00a9 2018-2020, INRIA All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ol> <li>Redistributions of source code must retain the above copyright notice, this    list of conditions and the following disclaimer.</li> <li>Redistributions in binary form must reproduce the above copyright notice,    this list of conditions and the following disclaimer in the documentation    and/or other materials provided with the distribution.</li> </ol> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p> <p>The views and conclusions contained in the software and documentation are those of the authors and should not be interpreted as representing official policies, either expressed or implied, of the Pinocchio project.</p> <p>https://github.com/mosra/magnum Copyright \u00a9 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,             2020 Vladim\u00edr Vondru\u0161 mosra@centrum.cz</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"overview/","title":"Overview","text":"<p>Ragdoll is a real-time physics solver for Maya and Blender, similar the native nCloth and nHair solvers except it works on transforms rather than points. That makes it better equipt to integrate with your existing animation controls and doesn't require translating from points like people did in the 90's.</p> <p>This domain contains Ragdoll learning resources, for a more general overview see the Product Page.</p> <p></p>"},{"location":"overview/#where-to-find-help","title":"Where to Find Help?","text":"<p>Depending on where you are and what you are looking for, one of these should fit the bill.</p> # Source Description Chat Come join the party on Discord! Release Notes Every new release has examples of every new feature and squashed bug. Search Top of every page, you know what to do \u261d\ufe0f YouTube Videos Long-form walkthroughs and examples. Community Inspire and be inspired via the Ragdoll forums Support Get us involved and let's make some waves <p></p>"},{"location":"overview/#whats-next","title":"What's Next?","text":"<p>Here are some options for getting into Ragdoll.</p> Route Description Install &amp; Explore Tried and true, who reads documentation anyway? Watch &amp; Learn We've made a number of videos demonstrating how to use Ragdoll. Read All About It Keep clicking that next button at the bottom of every page. <p></p>"},{"location":"overview/#press","title":"Press","text":"<p>Mentions of Ragdoll in the press.</p> Date Source Title 2022-11-29 gfxspeak Manipulate Maya character rigs with real-time physics in seconds 2022-11-29 digitalmediaworld Ragdoll Dynamics 3.0 Develops Real-Time Character Physics for Animators 2022-11-29 cgsociety.org Ragdoll Dynamics 3.0 Adds Real-Time Character Physics Animators Can Steer Like a Puppeteer 2022-11-29 80.lv Ragdoll Dynamics 3.0 for Maya Released 2022-11-29 redsharknews Ragdoll Dynamics 3.0: steer like a puppeteer 2022-11-29 postperspective Ragdoll 3.0: Fast Automation of Character Physics in Maya 2022-11-29 postperspective Ragdoll Dynamics 3.0 \u0434\u043b\u044f Maya 2022-11-29 blog.superrendersfarm Ragdoll Dynamics 3.0 released 2022-11-29 render.ru Ragdoll Dynamics sort en version 3.0! 2022-11-29 swiss.dayfr Ragdoll Dynamics is released in version 3.0! 2022-11-29 germany.detailzero From 'Gravity' tethers to, literally, Ragdoll Dynamics 2022-11-29 beforesandafters Ragdoll Dynamics 3.0 released 2022-11-29 cgchannel Imbalance releases Ragdoll Dynamics 3.0 for Maya 2022-11-29 cgbucket Ragdoll Dynamics 3.0 released 2022-11-29 cgpress.org Ragdoll Dynamics erscheint in der Version 3.0! 2022-11-29 digitalproduction Imbalance Releases Ragdoll Dynamics 3.0 2022-11-29 boxreview Imbalance Releases Ragdoll Dynamics 3.0 2022-11-29 afnews Imbalance Releases Ragdoll Dynamics 3.0 2022-11-29 animationmagazine Ragdoll Dynamics 3.0 Adds Real-Time Character Physics Animators Can Steer Like a Puppeteer 2022-11-29 awn Imbalance Releases Ragdoll Dynamics 3.0 2022-11-29 facebook 80 Level - Imbalance has released Ragdoll Dynamics 3.0 2022-11-29 facebook Imbalance Releases Ragdoll... - Animation World Network 2022-11-29 facebook Are you a Befores &amp; Afters PLUS Patron 2022-11-29 facebook Check out Ragdoll Dynamics 3.0 for Maya. The ace real-time physics tool now lets you pose charact... 2022-11-29 facebook CGPress - Imbalance has announced the release of Ragdoll... 2022-11-29 facebook Ragdoll Dynamics 3.0 Develops Real-Time Character Physics for Animators 2022-11-29 facebook Ragdoll Dynamics erscheint in der... - Digital Production 2022-11-29 80level Tweet by @80Level 2022-11-29 afnewsinfo Tweet by @afnewsinfo 2022-11-29 afnewsinfo Tweet by @animag 2022-11-29 animag Tweet by @ANIMATIONWorld 2022-11-29 animationworld Tweet by @beforesmag 2022-11-29 beforesmag Tweet by @BoxReview_ 2022-11-29 boxreview_ Tweet by @theCGchannel 2022-11-29 dig_prod Tweet by @dig_prod 2022-11-29 thecgchannel Tweet by @RedSharkNews 2022-11-29 redsharknews 2022-11-29 linkedin 80.lv on LinkedIn 2022-11-29 youtube From 'Gravity' tethers to Ragdoll Dynamics 2022-11-29 postperspective 2022-12-18 Escape Studios Ragdoll Dynamics for Maya 2022-09-21 80lv Development and Capabilities of Ragdoll Dynamics 2021-08-03 CGChannel Ragdoll Dynamics adds real-time physics to your Maya rigs 2021-07-30 CGPress Ragdoll Dynamics plugin for Maya 2021-07-28 80lv New Tool Lets You Animate With Physics in Real-Time <p>Share your sources</p> <p>Know of anywhere else Ragdoll got mentioned? Let us know and we'll add it to the list!</p> <p> Contact Us </p> <p></p>"},{"location":"parallel/","title":"Parallel","text":""},{"location":"parallel/#overview","title":"Overview","text":"<p>This guide describes the Maya features for accelerating playback and manipulation of animated scenes. It covers key concepts, shares best practices/usage tips, and lists known limitations that we aim to address in subsequent versions of Maya.</p> <p>This guide will be of interest to riggers, TDs, and plug-in authors wishing to take advantage of speed enhancements in Maya.</p> <p>If you would like an overview of related topics prior to reading this document, check out Supercharged Animation Performance in Maya 2016.</p>"},{"location":"parallel/#key-concepts","title":"Key Concepts","text":"<p>Starting from Maya 2016, Maya accelerates existing scenes by taking better advantage of your hardware. Unlike previous versions of Maya, which were limited to node-level parallelism, Maya now includes a mechanism for scene-level analysis and parallelization. For example, if your scene contains different characters that are unconstrained to one another, Maya can evaluate each character at the same time.</p> <p>Similarly, if your scene has a single complex character, it may be possible to evaluate rig sub-sections simultaneously. As you can imagine, the amount of parallelism depends on how your scene has been constructed. We will get back to this later. For now, let\u2019s focus on understanding key Maya evaluation concepts.</p> <p>At the heart of Maya\u2019s new evaluation architecture is an Evaluation Manager (EM), responsible for handling the parallel-friendly representation of your scene. It maintains (and updates while the scene is edited) a few data structures (described below) used for efficient evaluation.</p> <p>The basic description of the scene is the Dependency Graph (DG), consisting of DG nodes and connections. Nodes can have multiple attributes, and instances of these attributes on a specific node are called plugs. The DG connections are at the plug level, that is, two nodes can be connected to one another multiple ways through different plugs. Generally speaking, these connections represent data flow through the nodes as they evaluate. The following image shows an example DG:</p> <p></p> <p>The dotted arrows inside the nodes represent an implicit computation dependency between an output attribute (on the right of the node) and the input attributes (on the left) being read to compute the result stored in the output.</p> <p>Before Parallel Maya, the DG was used to evaluate the scene using a Pull Model or Pull Evaluation. In this model, the data consumer (for instance the renderer) queries data from a given node. If the data is already evaluated, the consumer receives it directly. However, if the data is dirty, the node must first recompute it. It does so by pulling on the inputs required to compute the requested data. These inputs can also be dirty, in which case the evaluation request will then be forwarded to those dirty sources until it reaches the point where the data can be evaluated. The result then propagates back up in the graph, as the data is being \u201cpulled\u201d.</p> <p>This evaluation model relies on the ability to mark node data as invalid and therefore requiring new evaluation. This mechanism is known as the Dirty Propagation in which the invalid data status propagates to all downstream dependencies. The two main cases where dirty propagation happened in the Pull Evaluation model were when:</p> <ul> <li>the current time is changed: in this case, animation curves no longer have the right value which depends on the current time. Therefore, dirty propagation starts from each animation curve and the dirty status is propagated through the graph to reach everything depending on time, directly or indirectly.</li> <li>a value is changed on a node: whether the value is being changed through interactive manipulation or by a script, all data that depends on this new value must be recomputed. Therefore, dirty propagation starts from the edited plug and the dirty status is propagated through the graph to reach everything depending on the edited attribute.</li> </ul> <p>The Pull Evaluation model is not well suited for efficient parallel evaluation because of potential races that can arise from concurrent pull evaluations.</p> <p>To have tighter control over evaluation, Maya now uses a Forward Evaluation model to enable concurrent evaluation of multiple nodes. The general idea is simple: if all a node\u2019s dependencies have been evaluated before we evaluate the given node, pull evaluation will not be triggered when accessing evaluated node data, so evaluation remains contained in the node and is easier to run concurrently.</p> <p>All data dependencies between the nodes must be known to apply this evaluation model, and this information is captured in the Evaluation Graph (EG), containing Evaluation Nodes. The EM uses dirty propagation to capture dependency information between the nodes, as well as which attributes are animated. EG connections represent node-level dependencies; destination nodes employ data from source nodes to correctly evaluate the scene. One important distinction between the DG and the EG is that the former uses plug-level connections, while the latter uses node-level connections. For example, the previous DG would create the following EG:</p> <p></p> <p>A valid EG may not exist or become invalid for various reasons. For example, you have loaded a new scene and no EG has been built yet, or you have changed your scene, invalidating a prior EG. However, once the EG is built, unlike previous versions of Maya that propagated dirty on every frame, Maya now disables dirty propagation, reusing the EG until it becomes invalid.</p> <p>Tip</p> <p>If your scene contains expression nodes that use <code>getAttr</code>, the DG graph will be missing explicit dependencies. This results in an incorrect EG. Expression nodes also reduce the amount of parallelism in your scenes (see Scheduling Types for details). Consider removing <code>getAttr</code> from expressions and/or using utility nodes.</p> <p>While the EG holds the dependency information, it is not ready to be evaluated concurrently as-is. The EM must first create units of work that can be scheduled, that is, tasks. The main types of task created are:</p> <ul> <li>Individual Nodes: in the simplest case, an evaluation node can be computed directly. The task therefore consists of evaluating all of its animated attributes.</li> <li>Cycle Clusters: depending on the scene, the EG may contain circular node-level dependencies. If this is the case, the EM creates clusters that group together nodes in the same cycle. At scene evaluation time, nodes in cycle clusters are evaluated serially before continuing with other parallel parts of the EG, hence the evaluation of a cycle cluster consisting of a single task. While node-level cycles are perfectly legal, creating scenes with attribute-level cycles should be avoided as this is unsupported and leads to unspecified behavior.</li> <li>Custom Evaluator Clusters: the EM supports the concept of custom evaluators to override evaluation of sub-section of the EG. One example of this is the GPU override, which uses your graphics card\u2019s graphics processing unit (GPU) to accelerate deformations. The custom evaluators will create clusters for nodes for which they take responsibility, and the EM creates a task for each of these clusters. At scene evaluation time, control is passed to the specific custom evaluator when the task is up to be executed.</li> </ul> <p></p> <p>This step, called partitioning, is where the EM creates the individual pieces of work that will have to be executed. Each of these tasks will map to a Scheduling Node in the Scheduling Graph (SG), where connections represent dependencies between the tasks:</p> <p></p> <p>The SG is an acyclic graph, otherwise it would be impossible to schedule nodes in a cycle since there would be no starting point for which all dependencies could be evaluated. In addition to the dependencies that come directly from the EG, the SG can have additional scheduling constraints to prevent concurrent evaluation of subsets of nodes (see Scheduling Types for details).</p>"},{"location":"parallel/#supported-evaluation-modes","title":"Supported Evaluation Modes","text":"<p>Starting in Maya 2016, 3 evaluation modes are supported:</p> Mode What does it do? DG Uses the legacy Dependency Graph-based evaluation of your scene. This was the default evaluation mode prior to Maya 2016 Serial Evaluation Manager Serial mode. Uses the EG but limits scheduling to a single core. Serial mode is a troubleshooting mode to pinpoint the source of evaluation errors. Parallel Evaluation Manager Parallel mode. Uses the EG and schedules evaluation across all available cores. This mode is the new Maya default since 2016. <p>When using either Serial or Parallel EM modes, you can also activate GPU Override to accelerate deformations on your GPU. You must be in Viewport 2.0 to use this feature (see GPU Override).</p> <p>To switch between different modes, go to the Preferences window (Windows &gt; Settings/Preferences &gt; Preferences &gt; Animation). You can also use the evaluationManager MEL/Python command; see documentation for supported options.</p> <p>To see the evaluation options that apply to your scene, turn on the Heads Up Display Evaluation options (Display &gt; Heads Up Display &gt; Evaluation).</p>"},{"location":"parallel/#first-make-it-right-then-make-it-fast","title":"First Make it Right Then Make it Fast","text":"<p>Before discussing how to make your Maya scene faster using Parallel evaluation, it is important to ensure that evaluation in DG and EM modes generates the same results. If you see different results in the viewport during animation (as compared to previous versions of Maya), or tests reveal numerical errors, it is critical to understand the cause of these errors. Errors may be due to an incorrect EG, threading related problems, or other issues.</p> <p>Below, we review Evaluation Graph Correctness and Thread Safety, two important concepts to understand errors.</p>"},{"location":"parallel/#evaluation-graph-correctness","title":"Evaluation Graph Correctness","text":"<p>If you see evaluation errors, first test your scene in Serial evaluation mode (see Supported Evaluation Modes). Serial evaluation mode uses the EM to build an EG of your scene, but limits evaluation to a single core to eliminate threading as the possible source of differences. Note that since Serial evaluation mode is provided for debugging, it has not been optimized for speed and scenes may run slower in Serial than in DG evaluation mode. This is expected.</p> <p>If transitioning to Serial evaluation eliminates errors, this suggests that differences are most likely due to threading-related issues. However, if errors persist (even after transitioning to Serial evaluation) this suggests that the EG is incorrect for your scene. There are a few possible reasons for this:</p> <p>Custom Plugins. If your scene uses custom plug-ins that rely on the mechanism provided by the <code>MPxNode::setDependentsDirty</code> function to manage attribute dirtying, this may be the source of problems. Plug-in authors sometimes use <code>MPxNode::setDependentsDirty</code> to avoid expensive calculations in <code>MPxNode::compute</code> by monitoring and/or altering dependencies and storing computed results for later re-use.</p> <p>Since the EM relies on dirty propagation to create the EG, any custom plug-in logic that alters dependencies may interfere with the construction of a correct EG. Furthermore, since the EM evaluation does not propagate dirty messages, any custom caching or computation in <code>MPxNode::setDependentsDirty</code> is not called while the EM is evaluating.</p> <p>If you suspect that your evaluation errors are related to custom plug-ins, temporarily remove the associated nodes from your scene and validate that both DG and Serial evaluation modes generate the same result. Once you have made sure this is the case, revisit the plug-in logic. The API Extensions section covers Maya SDK changes that will help you adapt plug-ins to Parallel evaluation.</p> <p>Another debugging option is to use \u201cscheduling type\u201d overrides to force custom nodes to be scheduled more conservatively. This approach enables the use of Parallel evaluation even if only some of the nodes are thread-safe. Scheduling types are described in more detail in the Thread Safety section.</p> <p>Errors in Autodesk Nodes. Although we have done our best to ensure that all out-of-the-box Autodesk Maya nodes correctly express dependencies, sometimes a scene uses nodes in an unexpected manner. If this is the case, we ask you make us aware of scenes where you encounter problems. We will do our best to address problems as quickly as possible.</p>"},{"location":"parallel/#thread-safety","title":"Thread Safety","text":"<p>Prior to Maya 2016, evaluation was single-threaded and developers did not need to worry about making their code thread-safe. At each frame, evaluation was guaranteed to proceed serially and computation would finish for one node prior to moving onto another. This approach allowed for the caching of intermediate results in global memory and using external libraries without considering their ability to work correctly when called simultaneously from multiple threads.</p> <p>These guarantees no longer apply. Developers working in recent versions of Maya must update plug-ins to ensure correct behavior during concurrent evaluation.</p> <p>Two things to consider when updating plug-ins:</p> <ul> <li> <p>Different instances of a node type should not share resources. Unmanaged shared resources can lead to evaluation errors since different nodes, of the same type, can have their <code>compute()</code> methods called at the same time.</p> </li> <li> <p>Avoid non thread-safe lazy evaluation. In the EM, evaluation is scheduled from predecessors to successors on a per-node basis. Once computation has been performed for predecessors, results are cached, and made available to successors via connections. Any attempt to perform non-thread safe lazy evaluation could return different answers to different successors or, depending on the nature of the bug, instabilities.</p> </li> </ul> <p>Here\u2019s a concrete example for a simple node network consisting of 4 nodes:</p> <p></p> <p>In this graph, evaluation first calculates outputs for Node1 (that is, Node1.A, Node1.B, Node1.C), followed by parallel evaluation of Nodes 2, 3, and 4 (that is, Read Node1.A to use in Node2, Read Node1.B to use in Node3, and so on).</p> <p>Knowing that making legacy code thread-safe requires time, we have added new scheduling types to provide control over how the EM schedule nodes. Scheduling types provide a straightforward migration path, so you do not need to hold off on performance improvements, just because a few nodes still need work.</p> <p>There are 4 scheduling types:</p> Scheduling Type What are you telling the scheduler? Parallel Asserts that the node and all third-party libraries used by the node are thread-safe. The scheduler may evaluate any instances of this node at the same time as instances of other nodes without restriction. Serial Asserts it is safe to run this node with instances of other nodes. However, all nodes with this scheduling type should be executed sequentially within the same evaluation chain. Globally Serial Asserts it is safe to run this node with instances of other node types but only a single instance of this node type should be run at a time. Use this type if the node relies on static state, which could lead to unpredictable results if multiple node instances are simultaneously evaluated. The same restriction may apply if third-party libraries store state. Untrusted Asserts this node is not thread-safe and that no other nodes should be evaluated while an instance of this node is evaluated. Untrusted nodes are deferred as much as possible (that is, until there is nothing left to evaluate that does not depend on them), which can introduce costly synchronization. <p>By default, nodes scheduled as Serial provide a middle ground between performance and stability/safety. In some cases, this is too permissive and nodes must be downgraded to GloballySerial or Untrusted. In other cases, some nodes can be promoted to Parallel. As you can imagine, the more parallelism supported by nodes in your graph, the higher level of concurrency you are likely to obtain.</p> <p>Tip</p> <p>When testing your plug-ins with Parallel Maya, a simple strategy is to schedule nodes with the most restrictive scheduling type (that is, Untrusted), and then validate that evaluation produces correct results. Raise individual nodes to the next scheduling level, and repeat the experiment.</p> <p>There are three ways to alter the scheduling level of your nodes:</p> <p>Evaluation Toolkit. Use this tool to query or change the scheduling type of different node types.</p> <p>C++/Python API methods. Use the OpenMaya API to specify the desired node scheduling by overriding the <code>MPxNode::schedulingType</code> method. This function should return one of the enumerated values specified by <code>MPxNode::schedulingType</code>. See the Maya MPxNode class reference for more details.</p> <p>MEL/Python Commands. Use the evaluationManager command to change the scheduling type of nodes at runtime. Below, we illustrate how you can change the scheduling of scene transform nodes:</p> Scheduling Type Command Parallel <code>evaluationManager -nodeTypeParallel on \"transform\"</code> Serial <code>evaluationManager -nodeTypeSerialize on \"transform\"</code> GloballySerial <code>evaluationManager -nodeTypeGloballySerialize on \"transform\"</code> Untrusted <code>evaluationManager -nodeTypeUntrusted on \"transform\"</code> <p>The Evaluation Toolkit and MEL/Python Commands method to alter node scheduling level works using node type overrides. They add an override that applies to all nodes of a given type. Using C++/Python API methods and overriding the <code>MPxNode::schedulingType</code> function gives the flexibility to change the scheduling type for each node instance. For example, expression nodes are marked as globally serial if the expression outputs are a purely mathematical function of its inputs.</p> <p>The expression engine is not thread-safe so only one expression can run at a time, but it can run in parallel with any other nodes. However, if the expression uses unsafe commands (expressions could use any command to access any part of the scene), the node is marked as untrusted because nothing can run while the expression is evaluated.</p> <p>This changes the way scheduling types should be queried. Using the <code>evaluationManager</code> command with the above flags in query mode will return whether an override has been set on the node type, using either the Evaluation Toolkit or the MEL/Python commands.</p> <p>The Evaluation Toolkit window lets you query both the override type on the node type (which cannot vary from one node of the same type to the other), or the actual scheduling type used for a node when building the scheduling graph (which can change from one node instance to the other).</p>"},{"location":"parallel/#safe-mode","title":"Safe Mode","text":"<p>On rare occasions you may notice that Maya switches from Parallel to Serial evaluation during manipulation or playback. This is due to Safe Mode, which attempts to trap errors that possibly lead to instabilities. If Maya detects that multiple threads are attempting to simultaneously access a single node instance, evaluation will be forced to Serial execution to prevent problems.</p> <p>Tip</p> <p>If Safe Mode forces your scene into Serial mode, the EM may not produce the expected incorrect results when manipulating. In such cases you can either disable the EM:</p> <p><code>cmds.evaluationManager(mode=\"off\")</code></p> <p>or disable EM-accelerated manipulation:</p> <p><code>cmds.evaluationManager(man=0)</code></p> <p>While Safe Mode exposes many problems, it cannot catch them all. Therefore, we have also developed a special Analysis Mode that performs a more thorough (and costly) check of your scene. Analysis mode is designed for riggers/TDs wishing to troubleshoot evaluation problems during rig creation. Avoid using Analysis Mode during animation since it will slow down your scene.</p>"},{"location":"parallel/#evaluation-graph-invalidation","title":"Evaluation Graph Invalidation","text":"<p>As previously described, the EG adds necessary node-level scheduling information to the DG. To make sure evaluation is correct, it\u2019s critical the EG always be up-to-date, reflecting the state of the scene. The process of detecting things that have changed and rebuilding the EG is referred to as graph invalidation.</p> <p>Different actions may invalidate the EG, including:</p> <ul> <li>Adding/removing nodes</li> <li>Changing the scenes transformation (DAG) hierarchy</li> <li>Adding/removing extension attributes</li> <li>Loading an empty scene or opening a new file</li> </ul> <p>Other, less obvious, actions include:</p> <ul> <li>Static animation curves. Although animation curves are time-dependent, DG evaluation treats curves with identical (static) keys as time-independent to avoid unnecessary calculations. The EG uses a similar optimization, excluding and avoiding scheduling of static animation curves. This keeps the EG compact, making it fast to build, schedule, and evaluate. A downside of this approach is that changes to static animation curves will cause the EG to become invalid; on time change Maya will rebuild the EG and determine if curves should be treated as time-dependent and added to the EG.</li> <li>Dirty propagation crossing the Evaluation Graph. The DG architecture allowed for implicit dependencies (that is, dependencies not expressed via connections), using them during dirty propagation. When dirty propagation is detected for these implicit dependencies, the EG will invalidate itself since this could signal the need to add new dependencies to the EG.</li> </ul> <p>Frequent graph invalidations may limit parallel evaluation performance gains or even slow it down (see Idle Actions), since Maya requires DG dirty propagation and evaluation to rebuild the EG. To avoid unwanted graph rebuilds, consider adding 2 keys, each with slightly different values, on rig attributes that you expect to use frequently. You can also lock static channels to prevent creation of static animation curves during keying. We expect to continue tuning this area of Maya, with the goal of making the general case as interactive as possible.</p> <p>Tip</p> <p>You can use the controller command to identify objects that are used as animation sources in your scene. If the Include controllers in evaluation graph option is set (see Windows &gt; Settings/Preferences &gt; Preferences, then Settings &gt; Animation), the objects marked as controllers will automatically be added to the evaluation graph even if they are not animated yet. This allows Parallel evaluation for manipulation even if they have not yet been keyed.</p>"},{"location":"parallel/#idle-actions","title":"Idle Actions","text":"<p>In this section, we discuss the different idle actions available in Maya that helps rebuild the EG without any intervention from the user. Prior to Maya 2019, only one idle action, the EG rebuild, was available, but it was not enabled by default. Since Maya 2019, we have added another idle action, the EG preparation for manipulation, and both of these are enabled by default.</p> <p>Here is a description of the idle actions:</p> Idle Action Description EG Rebuild Builds the graph topology. This idle action is executed after a file load operation, or after a graph topology invalidation. EG Preparation for manipulation Partitions and schedules the graph. This idle action is executed after a graph rebuild (either manually or through the idle action), or after a partitioning invalidation. <p>Tip</p> <p>You can use the evaluationManager command to change which idle actions are enabled. You can enable and disable both idle actions individually.</p>"},{"location":"parallel/#benefits","title":"Benefits","text":"<p>To make use of the Parallel Evaluation and GPU deformation during manipulation, the EG needs to be properly built, partitioned and scheduled, otherwise it will revert to DG. These idle actions allow the EG to automatically build and be ready to use when needed, since they are triggered at file load and after graph invalidation.</p> <p>If you use Cached Playback, your cache automatically refills, too. This way, you can start playing from cache as soon as the scene is loaded or after you modify to the scene.</p>"},{"location":"parallel/#caveats","title":"Caveats","text":"<p>In a typical frame evaluation, temporary values that are set on keyed attributes are restored to their original values, that is, the values on their associated curves. With the idle actions, this is an unwanted behavior, otherwise you would not be able to do any modifications to keyed attributes. To circumvent that issue, we had to add some special behaviougs One of these is the dirty propagation from stale plugs after an idle preparation for manipulation. When not in idle preparation for manipulation, this operation is done during the partitioning and scheduling phase. With idle preparation for manipulation, this operation is done at the next complete evaluation. Therefore, if you have many static curves, you might experience a slowdown on the first frame of playback.</p> <p>If you do frequent operations that invalidate the graph or partitioning, you may experience some slowdowns due to the graph always being rebuilt. In such cases, it is advised that you disable the offending idle action until you are done.</p>"},{"location":"parallel/#custom-evaluators","title":"Custom Evaluators","text":"<p>In this section, we describe mechanisms to perform targeted evaluation of node sub-graphs. This approach is used by Maya to accelerate deformations on the GPU and to catch evaluation errors for scenes with specific nodes. Maya 2017 also introduced new Open API extensions, allowing user-defined custom evaluators.</p> <p>Tip</p> <p>Use the evaluator command to query the available/active evaluators or modify currently active evaluators. Some evaluators support using the nodeType flag to filter out or include nodes of certain types. Query the info flag on the evaluator for more information on what it supports.</p> <pre><code># Returns a list of all currently available evaluators.\nimport maya.cmds as cmds\ncmds.evaluator( query=True )\n# Result: [u'invisibility',\nu'frozen',\n...\nu'transformFlattening',\nu'pruneRoots'] #\n\n# Returns a list of all currently enabled evaluators.\ncmds.evaluator( query=True, enable=True )\n# Result: [u'invisibility',\nu'timeEditorCurveEvaluator',\n...\nu'transformFlattening',\nu'pruneRoots'] #\n</code></pre> <p>Note: Enabling or disabling custom evaluators only applies to the current Maya session: the state is not saved in the scene nor in the user preferences. The same applies to configuration done using the <code>evaluator</code> command and the configuration flag.</p>"},{"location":"parallel/#gpu-override","title":"GPU Override","text":"<p>Maya contains a custom deformer evaluator that accelerates deformations in Viewport 2.0 by targeting deformation to the GPU. GPUs are ideally suited to tackle problems such as mesh deformations that require the same operations on streams of vertex and normal data. We have included GPU implementations for several of the most commonly-used deformers in animated scenes: skinCluster, blendShape, cluster, tweak, groupParts, softMod, deltaMush, lattice, nonLinear and tension.</p> <p>Unlike Maya\u2019s previous deformer stack that performed deformations on the CPU and subsequently sent deformed geometry to the graphics card for rendering, the GPU override sends undeformed geometry to the graphics card, performs deformations in OpenCL and then hands off the data to Viewport 2.0 for rendering without read-back overhead. We have observed substantial speed improvements from this approach in scenes with dense geometry.</p> <p>Even if your scene uses only supported deformers, GPU override may not be enabled due to the use of unsupported node features in your scene. For example, with the exception of softMod, there is no support for incomplete group components. Additional deformer-specific limitations are listed below:</p> <p>Deformer</p> <p>Limitation(s)</p> <p>skinCluster</p> <p>The following attribute values are ignored:</p> <p>- bindMethod</p> <p>- bindPose</p> <p>- bindVolume</p> <p>- dropOff</p> <p>- heatmapFalloff</p> <p>- influenceColor</p> <p>- lockWeights</p> <p>- maintainMaxInfluences</p> <p>- maxInfluences</p> <p>- nurbsSamples</p> <p>- paintTrans</p> <p>- smoothness</p> <p>- weightDistribution</p> <p>blendShape</p> <p>The following attribute values are ignored:</p> <p>- baseOrigin</p> <p>- icon</p> <p>- normalizationId</p> <p>- origin</p> <p>- parallelBlender</p> <p>- supportNegativeWeights</p> <p>- targetOrigin</p> <p>- topologyCheck</p> <p>cluster</p> <p>n/a</p> <p>tweak</p> <p>Only relative mode is supported. relativeTweak must be set to 1.</p> <p>groupParts</p> <p>n/a</p> <p>softMod</p> <p>Only volume falloff is supported when distance cache is disabled</p> <p>Falloff must occur on all axes</p> <p>Partial resolution must be disabled</p> <p>deltaMush</p> <p>n/a</p> <p>lattice</p> <p>n/a</p> <p>nonLinear</p> <p>n/a</p> <p>tension</p> <p>n/a</p> <p>A few other reasons that can prevent GPU override from accelerating your scene:</p> <ul> <li> <p>Meshes not sufficiently dense. Unless meshes have a large number of vertices, it is still faster to perform deformations on the CPU. This is due to the driver-specific overhead incurred when sending data to the GPU for processing. For deformations to happen on the GPU, your mesh needs over 500/2000 vertices, on AMD/NVIDIA hardware respectively. Use the <code>MAYA_OPENCL_DEFORMER_MIN_VERTS</code> environment variable to change the threshold. Setting the value to 0 sends all meshes connected to supported deformation chains to the GPU.</p> </li> <li> <p>Downstream graph nodes required deformed mesh results. Since GPU read-back is a known bottleneck in GPGPU, no node, script, or Viewport can read the mesh data computed by the GPU override. This means that GPU override is unable to accelerate portions of the EG upstream of deformation nodes, such as follicle or pointOnPolyConstraint, that require information about the deformed mesh. We will re-examine this limitation as software/hardware capabilities mature. When diagnosing GPU Override problems, this situation may appear as an unsupported fan-out pattern. See deformerEvaluator command, below, for details.</p> </li> <li> <p>Animated Topology. If your scene animates the number of mesh edges, vertices, and/or faces during playback, corresponding deformation chains are removed from the GPU deformation path.</p> </li> <li> <p>Maya Catmull-Clark Smooth Mesh Preview is used. We have included acceleration for OpenSubDiv (OSD)-based smooth mesh preview, however there is no support for Maya\u2019s legacy Catmull-Clark. To take advantage of OSD OpenCL acceleration, select OpenSubDiv Catmull-Clark as the subdivision method and make sure that OpenCL Acceleration is selected in the OpenSubDiv controls.</p> </li> <li> <p>Unsupported streams are found. Depending on which drawing mode you select for your geometry (for example, shrunken faces, hedge-hog normals, and so on) and the material assigned, Maya must allocate and send different streams of data to the graphics card. Since we have focused our efforts on common settings used in production, GPU override does not currently handle all stream combinations. If meshes fail to accelerate due to unsupported streams, change display modes and/or update the geometry material.</p> </li> <li> <p>Back face culling is enabled.</p> </li> <li> <p>Driver-related issues. We are aware of various hardware issues related to driver support/stability for OpenCL. To maximize Maya\u2019s stability, we have disabled GPU Override in the cases that will lead to problems. We expect to continue to eliminate restrictions in the future and are actively working with hardware vendors to address detected driver problems.</p> </li> </ul> <p>You can also increase support for new custom/proprietary deformers by using new API extensions (refer to Custom GPU Deformers for details).</p> <p>If you enable GPU Override and the HUD reports Enabled (0 k), this indicates that no deformations are happening on the GPU. There could be several reasons for this, such as those mentioned above.</p> <p>To troubleshoot factors that limit the use of GPU override for your particular scene, use the deformerEvaluator command. Supported options include:</p> <p>Command</p> <p>What does it do?</p> <p><code>deformerEvaluator</code></p> <p>Prints the chain or each selected node is not supported.</p> <p><code>deformerEvaluator -chains</code></p> <p>Prints all active deformation chains.</p> <p><code>deformerEvaluator -meshes</code></p> <p>Prints a chain for each mesh or a reason if it is not supported.</p>"},{"location":"parallel/#dynamics-evaluator","title":"Dynamics Evaluator","text":"<p>Starting in Maya 2017, the dynamics evaluator fully supports parallel evaluation of scenes with Nucleus (nCloth, nHair, nParticles), Bullet, and Bifrost dynamics. Legacy dynamics nodes (for example, particles, fluids) remain unsupported. If the dynamics evaluator finds unsupported node types in the EG, Maya will revert to DG-based evaluation. The dynamics evaluator also manages the tricky computation necessary for correct scene evaluation. This is one of the ways custom evaluators can be used to change Maya\u2019s default evaluation behavior.</p> <p>The dynamics evaluator supports several configuration flags to control its behavior.</p> <p>Flag</p> <p>What does it do?</p> <p><code>disablingNodes</code></p> <p>specifies the set of nodes that will force the dynamics evaluator to disable the EM. Valid values are: <code>legacy2016</code>, <code>unsupported</code>, and <code>none</code>.</p> <p><code>handledNodes</code></p> <p>specifies the set of nodes that are going to be captured by the dynamics evaluator and scheduled in clusters that it will manage. Valid values are: <code>dynamics</code> and <code>none</code>.</p> <p><code>action</code></p> <p>specifies how the dynamics evaluator will handle its nodes. Valid values are: <code>none</code>, <code>evaluate</code>, and <code>freeze</code>.</p> <p>In Maya 2017, the default configuration corresponds to:</p> <pre><code>cmds.evaluator(name=\"dynamics\", c=\"disablingNodes=unsupported\")\ncmds.evaluator(name=\"dynamics\", c=\"handledNodes=dynamics\")\ncmds.evaluator(name=\"dynamics\", c=\"action=evaluate\")\n</code></pre> <p>where unsupported (that is, blacklisted) nodes are:</p> <ul> <li>collisionModel</li> <li>dynController</li> <li>dynGlobals</li> <li>dynHolder</li> <li>fluidEmitter</li> <li>fluidShape</li> <li>membrane</li> <li>particle (unless also a nBase)</li> <li>rigidNode</li> <li>rigidSolver</li> <li>spring</li> <li>nodes derived from the above</li> </ul> <p>This configuration disables evaluation if any unsupported nodes are encountered, and performs evaluation for the other handled nodes in the scene.</p> <p>To revert to Maya 2016 / 2016 Extension 2 behavior, use the configuration:</p> <pre><code>cmds.evaluator(name=\"dynamics\", c=\"disablingNodes=legacy2016\")\ncmds.evaluator(name=\"dynamics\", c=\"handledNodes=none\")\ncmds.evaluator(name=\"dynamics\", c=\"action=none\")\n</code></pre> <p>where unsupported (that is, blacklisted) nodes are:</p> <ul> <li>field</li> <li>fluidShape</li> <li>geoConnector</li> <li>nucleus</li> <li>particle</li> <li>pointEmitter</li> <li>rigidSolver</li> <li>rigidBody</li> <li>nodes derived from the above</li> </ul> <p>Tip</p> <p>To get a list of nodes that cause the dynamics evaluator to disable the EM in its present configuration, use the following command:</p> <pre><code>cmds.evaluator(name=\"dynamics\", valueName=\"disabledNodes\", query=True)\n</code></pre> <p>You can configure the dynamics evaluator to ignore unsupported nodes. If you want to try Parallel evaluation on a scene where it is disabled because of unsupported node types, use the following commands:</p> <pre><code>cmds.evaluator(name=\"dynamics\", c=\"disablingNodes=none\")\ncmds.evaluator(name=\"dynamics\", c=\"handledNodes=dynamics\")\ncmds.evaluator(name=\"dynamics\", c=\"action=evaluate\")\n</code></pre> <p>Note: Using the dynamics evaluator on unsupported nodes may cause evaluation problems and/or application crashes; this is unsupported behavior. Proceed with caution.</p> <p>Tip</p> <p>If you want the dynamics evaluator to skip evaluation of all dynamics nodes in the scene, use the following commands:</p> <pre><code>cmds.evaluator(name=\"dynamics\", c=\"disablingNodes=unsupported\")\ncmds.evaluator(name=\"dynamics\", c=\"handledNodes=dynamics\")\ncmds.evaluator(name=\"dynamics\", c=\"action=freeze\")\n</code></pre> <p>This can be useful to quickly disable dynamics when the simulation impacts animation performance.</p> <p>Dynamics simulation results are very sensitive to evaluation order, which may differ between DG and EM-based evaluation. Even for DG-based evaluation, evaluation order may depend on multiple factors. For example, in DG-mode when rendering simulation results to the Viewport, the evaluation order may be different than when simulation is performed in \u2018headless mode\u2019. Though EM-based evaluation results are not guaranteed to be identical to DG-based, evaluation order is consistent; once the evaluation order is scheduled by the EM, it will remain consistent regardless of whether results are rendered or Maya is used in batch. This same principle applies to non-dynamics nodes that are order-dependent.</p>"},{"location":"parallel/#reference-evaluator","title":"Reference Evaluator","text":"<p>When a reference is unloaded it leaves several nodes in the scene representing reference edits to preserve. Though these nodes may inherit animation from upstream nodes, they do not contribute to what is rendered and can be safely ignored during evaluation. The reference evaluator ensures all such nodes are skipped during evaluation.</p>"},{"location":"parallel/#invisibility-evaluator","title":"Invisibility Evaluator","text":"<p>Toggling scene object visibility is a critical artist workflow used to reduce visual clutter and accelerate performance. To bring this workflow to parallel evaluation, Maya 2017 and above includes the invisibility evaluator, whose goal is to skip evaluation of any node that does not contribute to a visible object.</p> <p>The invisibility evaluator will skip evaluation of DAG nodes meeting any of the below criteria:</p> <ul> <li><code>visibility</code> attribute is false.</li> <li><code>intermediateObject</code> attribute is true.</li> <li><code>overrideEnabled</code> attribute is true and <code>overrideVisibility</code> attribute is false.</li> <li>node belongs to a display layer whose <code>enabled</code> attribute is true and <code>visibility</code> attribute is false.</li> <li>every instance path contains at least one node for which one of the above statements are true.</li> </ul> <p>As of Maya 2018, the invisibility evaluator supports the <code>isolate select</code> method of hiding objects. If there is only a single Viewport, and it has one or more objects isolated, then all of the other, unrelated objects are considered invisible by the evaluator.</p> <p>There is also support in Maya (2018 and up) for the <code>animated</code> attribute on expression nodes. When this attribute is set to 1, the expression node is not skipped by the invisibility evaluator, even if only invisible objects are connected to it.</p> <p>Note: The default value of the <code>animated</code> attribute is 1, so in an expression-heavy scene you may see a slowdown from Maya 2017 to Maya 2018. To restore performance, run the script below to disable this attribute on all expression nodes. (It is only required when the expression has some sort of side-effect external to the connections, such as printing a message or checking a cache file size.)</p> <pre><code>for node in cmds.ls( type='expression' ):\n    cmds.setAttr( '{}.animated'.format(node), 0 )\n</code></pre> <p>Tip: The invisibility evaluator is off by default in Maya 2017. Use the Evaluation Toolkit or this:</p> <pre><code>cmds.evaluator(enable=True, name='invisibility')\n</code></pre> <p>to enable the evaluator.</p> <p>The invisibility evaluator only considers static visibility; nodes with animated visibility are still evaluated, even if nodes meet the above criteria. If nodes are in a cycle, all cycle nodes must be considered invisible for evaluation to be skipped. Lastly, if a node is instanced and has at least one visible path upward, then all upward paths will be evaluated.</p> <p>Tip: The invisibility evaluator determines visibility solely from the node\u2019s visibility state; if your UI or plug-in code requires invisible nodes to evaluate, do not use the invisibility evaluator.</p>"},{"location":"parallel/#frozen-evaluator","title":"Frozen Evaluator","text":"<p>The frozen evaluator allows users to tag EG subsections as not needing evaluation. It enhances the <code>frozen</code> attribute by propagating the frozen state automatically to related nodes, according to the rules defined by the evaluator\u2019s configuration. It should only be used by those comfortable with the concepts of connection and propagation in the DAG and Evaluation Graph. Many users may prefer the invisibility evaluator; it is a simpler interface/workflow for most cases.</p>"},{"location":"parallel/#the-frozen-attribute","title":"The Frozen Attribute","text":"<p>The frozen attribute has existed on nodes since Maya 2016. It can be used to control whether node is evaluated in Serial or Parallel EM evaluation modes. In principle, when the frozen attribute is set, the EM skips evaluation of that node. However, there are additional nuances that impact whether or not this is the case:</p> <ul> <li>Everything downstream of frozen nodes is still evaluated, unless they also have the frozen attribute set, or they are affected by the frozen evaluator as described below.</li> <li>Some nodes may perform optimizations that leave their outputs invalid and susceptible to change once evaluated. Freezing these nodes may have unexpected results as nothing preserves the old values. See the documentation on the nodeState attribute for ways to specifically enable caching for nodes you want to freeze.</li> <li>You may have inconsistent per-frame results when the frozen attribute is animated. The node \u201cfreezes\u201d when the attribute is set, so if you jump from frame to frame, your object state reflects the last time you visited in an unfrozen state. Playback is only consistent if your object is not frozen from the first frame.</li> <li>When the frozen node is in the middle of a cycle, it is not respected. Cycles evaluate using the pull model, which does not respect the frozen attribute value.</li> <li>Custom evaluators may or may not respect the frozen attribute value. Take this into consideration as part of their implementation.</li> </ul> <p>Warning: All the frozen attribute does is skip evaluation, nothing is done to preserve the current node data during file store; if you load a file with frozen attributes set, the nodes may not have the same data as when you stored them.</p>"},{"location":"parallel/#operation","title":"Operation","text":"<p>The evaluation manager does not evaluate any node that has its <code>frozen</code> attribute set to True, referred to here as explicitly frozen nodes. An implicitly frozen node is one that is disabled because of the operation of the frozen evaluator, but whose <code>frozen</code> attribute is not set to True. When the frozen evaluator is enabled it will also prevent evaluation of related nodes according to the rules corresponding to the enabled options, in any combination.</p> <p>The frozen evaluator operates in three phases. In phase one, it gathers together all of the nodes flagged by the invisible and displayLayers options as being marked for freezing. In phase two, it propagates the freezing state outwards through the evaluation graph according to the values of the downstream and upstream options.</p>"},{"location":"parallel/#phase-1-gathering-the-nodes","title":"Phase 1: Gathering The Nodes","text":"<p>The list of nodes for propagation is gathered as follows:</p> <ul> <li>The nodes with their <code>frozen</code> attribute set to True are found. (Note: This does not include those whose frozen attribute is animated. They are handled via Phase 3.)</li> <li>If the invisible option is True then any node that is explicitly frozen and invisible (directly, or if its parents are all invisible) will have all of its DAG descendants added to the list of nodes for Phase 2.</li> <li>If the displayLayers option is True then any node that is a member of a display layer that is explicitly frozen, enabled, and invisible will have it, and all its DAG descendants added to the list of nodes for Phase 2.</li> </ul>"},{"location":"parallel/#phase-2-propagating-the-freezing","title":"Phase 2: Propagating The Freezing","text":"<p>The list gathered by Phase 1 will all be implicitly frozen. In addition, the downstream and upstream options may implicitly freeze nodes related to them. For each of the nodes gathered so far, the evaluation graph will be traversed in both directions, implicitly freezing nodes encountered according to the following options:</p> <ul> <li>downstream option value<ul> <li>\u201cnone\u201d : No further nodes downstream in the EG will be implicitly frozen</li> <li>\u201csafe\u201d : Nodes downstream in the EG will be implicitly frozen only if every one of their upstream nodes has already been implicitly or explicitly frozen</li> <li>\u201cforce\u201d : Nodes downstream in the EG will be implicitly frozen</li> </ul> </li> <li>upstream option value<ul> <li>\u201cnone\u201d : No further nodes upstream in the EG will be implicitly frozen</li> <li>\u201csafe\u201d : Nodes upstream in the EG will be implicitly frozen only if every one of their downstream nodes has already been implicitly or explicitly frozen</li> <li>\u201cforce\u201d : Nodes upstream in the EG will be implicitly frozen</li> </ul> </li> </ul>"},{"location":"parallel/#phase-3-runtime-freezing","title":"Phase 3: Runtime Freezing","text":"<p>If a node has its frozen or visibility states animated, the evaluator still has to schedule it. The runtime freezing can still assist at this point in preventing unnecessary evaluation. Normally any explicitly frozen node will have its evaluation skipped, with all other nodes evaluating normally. When the runtime option is enabled, after skipping the evaluation of an explicitly frozen node no further scheduling of downstream nodes will occur. As a result, if the downstream nodes have no other unfrozen inputs they will also be skipped.</p> <p>Note: The runtime option does not really modify the evaluator operation, it modifies the scheduling of nodes for evaluation. You will not see nodes affected by this option in the evaluator information (for example, the output from <code>cmds.evaluator( query=True, clusters=True, name='frozen' )</code>)</p>"},{"location":"parallel/#setting-options","title":"Setting Options","text":"<p>Options can be set for the frozen evaluator in one of two ways:</p> <ul> <li> <p>Accessing them through the Evaluation Toolkit</p> </li> <li> <p>Using the evaluator command\u2019s configuration option:</p> <pre><code>cmds.evaluator( name='frozen', configuration='KEY=VALUE' )\n</code></pre> </li> </ul> <p>Legal KEY and VALUE values are below, and correspond to the options as described above:</p> <p>KEY</p> <p>VALUES</p> <p>DEFAULT</p> <p>runtime</p> <p>True/False</p> <p>False</p> <p>invisible</p> <p>True/False</p> <p>False</p> <p>displayLayers</p> <p>True/False</p> <p>False</p> <p>downstream</p> <p>\u2018off\u2019/\u2018safe\u2019/\u2018force\u2019</p> <p>\u2018off\u2019</p> <p>upstream</p> <p>\u2018off\u2019/\u2018safe\u2019/\u2018force\u2019</p> <p>\u2018off\u2019</p> <p>Unlike most evaluators the frozen evaluator options are stored in user preferences and persists between sessions.</p>"},{"location":"parallel/#limitations","title":"Limitations","text":"<ul> <li>You must set at least one <code>frozen</code> attribute to True to instruct the frozen evaluator to shut off evaluation on affected nodes. The most practical use of this would be on a display layer so that nodes can be implicitly frozen as a group.</li> <li>If the <code>frozen</code> attribute, or any of the attributes used to define related implicit nodes for freezing (for example, <code>visibility</code>) are animated then the evaluator will not remove them from evaluation. They will still be scheduled and only the runtime option will help in avoiding unnecessary evaluation.</li> <li>Cycle members are not frozen by the evaluator unless every input to the cycle is frozen. This is a design choice to reflect that as cycles evaluate as a unit, it is impossible to freeze individual members of a cycle. It must be all or nothing.</li> </ul>"},{"location":"parallel/#curve-manager-evaluator","title":"Curve Manager Evaluator","text":"<p>The curve manager evaluator can be used to include additional nodes in the Evaluation Graph, which can have two main benefits:</p> <ul> <li>The additional nodes can be manipulated using parallel evaluation and GPU deformation, which can result in higher responsiveness during interactive manipulation.</li> <li>Fewer Evaluation Graph rebuilds can result, since static nodes can already be included in the Evaluation Graph.</li> </ul> <p>To achieve those benefits efficiently, the curve manager evaluator performs two main tasks:</p> <ul> <li>During Evaluation Graph construction, it triggers dirty propagation from extra nodes so they are included in the graph construction process and the resulting Evaluation Graph.</li> <li>During scene evaluation, it handles the evaluation of some of those extra nodes to maintain performance, since they do not really need to be evaluated.</li> </ul> <p>To illustrate this result, let\u2019s compare the three following situations.</p> <ol> <li>A scene where all controllers have a single key (that is, static animation curves). Since the resulting animation curves are constant, they are considered static and are not included in the Evaluation Graph. Playback will have nothing to evaluate.</li> <li>A scene where all controllers have keys of different values (that is, animated curves). Therefore, they will be included in the Evaluation Graph and playback will evaluate everything.</li> <li>A scene where all controllers have a single key (that is, static animation curves), but where the curve manager evaluator is used to prepopulate the Evaluation Graph with those static curves.</li> </ol> <p>The third situation is where we are trying to take advantage of the curve manager evaluator to have an Evaluation Graph that is already set up to allow parallel evaluation when the controllers will be manipulated.</p> <p>The following table summarizes the differences between the situations and the compromises provided by the curve manager evaluator.</p> <p>Situation</p> <p># of nodes in EG</p> <p>Playback</p> <p>EM Manip</p> <p>Rebuild when keying</p> <p>Static curves + curve manager off</p> <p>Lowest</p> <p>Fastest</p> <p>No</p> <p>Yes</p> <p>Animated curves</p> <p>Highest</p> <p>Slowest</p> <p>Yes</p> <p>No</p> <p>Static curves + curve manager on</p> <p>Highest</p> <p>Middle</p> <p>Yes</p> <p>No</p> <p>In summary, the curve manager evaluator benefits from having the Evaluation Graph already populated with nodes so it is ready to evaluate interactive manipulation, while paying as little of a cost as possible for those constant nodes during playback.</p> <p>It can be activated using:</p> <pre><code>cmds.evaluator(\n    name=\"curveManager\",\n    enable=True\n    )\ncmds.evaluator(\n    name=\"curveManager\",\n    configuration=\"forceAnimatedCurves=keyed\"\n    )\n</code></pre> <p>The available values for <code>forceAnimatedCurves</code> are:</p> <ul> <li>\u201cnone\u201d : No curve will be forced in the evaluation graph.</li> <li>\u201ccontroller\u201d : Curves connected to controller nodes will be forced in the evaluation graph. This is basically a generalization of the controller concept.</li> <li>\u201ckeyed\u201d : Keyed static curves, that is, curves with a single key or multiple keys with the same value, will be forced in the evaluation graph.</li> <li>\u201call\u201d : All curves are forced in the evaluation graph.</li> </ul> <p>Another option, <code>forceAnimatedNodes</code>, can be used:</p> <ul> <li>\u201cnone\u201d : No node will be forced in the evaluation graph.</li> <li>\u201cforcedAnimatedAttribute\u201d : Nodes with the forced-animated attribute set to true will be forced in the evaluation graph.</li> </ul> <p>This allows tagging nodes to be added with a boolean dynamic attribute. By default, the name of this attribute is <code>forcedAnimated</code>. If it is present on a node and set to true, the node is added to the graph. The name of the attribute can be controlled by using the \u201cforcedAnimatedAttributeName\u201d option.</p> <p>By default, the curve manager evaluator tries to skip the evaluation of the static parts of the graph. For debugging or performance measurement purposes, this optimization can be disabled:</p> <pre><code>cmds.evaluator(\n    name=\"curveManager\",\n    configuration=\"skipStaticEvaluation=disable\"\n    )\n</code></pre>"},{"location":"parallel/#other-evaluators","title":"Other Evaluators","text":"<p>In addition to evaluators described above, additional evaluators exist for specialized tasks:</p> <p>Evaluator</p> <p>What does it do?</p> <p>cache</p> <p>Constitutes the foundation of Cached Playback. See the Maya Cached Playback whitepaper for more information.</p> <p>timeEditorCurveEvaluator</p> <p>Finds all paramCurves connected to time editor nodes and puts them into a cluster that will prevent them from evaluating at the current time, since the time editor will manage their evaluation.</p> <p>ikSystem</p> <p>Automatically disables the EM when a multi-chain solver is present in the EG. For regular IK chains it will perform any lazy update prior to parallel execution.</p> <p>disabling</p> <p>Automatically disables the EM if user-specified nodes are present in the EG. This evaluator is used for troubleshooting purposes. It allows Maya to keep working stably until issues with problem nodes can be addressed.</p> <p>hik</p> <p>Handles the evaluation of HumanIK characters in an efficient way by recognizing HumanIK common connection patterns.</p> <p>cycle</p> <p>Unrolls cycle clusters to augment the opportunity for parallelism and improve performance. Likely gives the best performance improvements when large cycle clusters are present in the scene. Prototype, work in progress.</p> <p>transformFlattening</p> <p>Consolidates deep transform hierarchies containing animated parents and static children, leading to faster evaluation. Consolidation takes a snapshot of the relative parent/child transformations, allowing concurrent evaluation of downstream nodes.</p> <p>pruneRoots</p> <p>We found that scenes with several thousand paramCurves become bogged down because of scheduling overhead from resulting EG nodes and lose any potential gain from increased parallelism. To handle this situation, special clusters are created to group paramCurves into a small number of evaluation tasks, thus reducing overhead.</p> <p>Custom evaluator names are subject to change as we introduce new evaluators and expand these functionalities.</p>"},{"location":"parallel/#evaluator-conflicts","title":"Evaluator Conflicts","text":"<p>Sometimes, multiple evaluators will want to \u201cclaim responsibility\u201d for the same node(s). This can result in conflict, and negatively impact performance. To avoid these conflicts, upon registration each evaluator is associated with a priority; nodes are assigned to the evaluator with the highest priority. Internal evaluators have been ordered to prioritize correctness and stability over speed.</p>"},{"location":"parallel/#api-extensions","title":"API Extensions","text":"<p>Several API extensions and tools have been added to help you make the most of the EM in your pipeline. This section reviews API extensions for Parallel Evaluation, Custom GPU Deformers, Custom Evaluator API, VP2 Integration and Profiling Plug-ins.</p>"},{"location":"parallel/#parallel-evaluation","title":"Parallel Evaluation","text":"<p>If your plug-in plays by the DG rules, you will not need many changes to make the plug-in work in Parallel mode. Porting your plug-in so that it works in Parallel may be as simple as recompiling it against the latest version of OpenMaya!</p> <p>If the EM generates different results than DG-based evaluation, make sure that your plug-in:</p> <ul> <li> <p>Overrides <code>MPxNode::compute()</code>. This is especially true of classes extending <code>MPxTransform</code> which previously relied on <code>asMatrix()</code>. See the rockingTransform SDK sample. For classes deriving from <code>MPxDeformerNode</code> and <code>MPxGeometryFilter</code>, override the <code>deform()</code> method.</p> </li> <li> <p>Handles requests for evaluation at all levels of the plug tree. While the DG can request plug values at any level, the EM always requests the root plug. For example, for plug N.gp[0].p[1] your compute() method must handle requests for evaluation of N.gp, N.gp[0], N.gp[0].p, and N.gp[0].p[1].</p> </li> </ul> <p>If your plug-in relies on custom dependency management, you need to use new API extensions to ensure correct results. As described earlier, the EG is built using the legacy dirty-propagation mechanism. Therefore, optimizations used to limit dirty propagation during DG evaluation, such as those found in <code>MPxNode::setDependentsDirty</code>, may introduce errors in the EG. Use MEvaluationManager::graphConstructionActive() to detect if this is occurring.</p> <p>There are new virtual methods you will want to consider implementing:</p> <ul> <li> <p><code>MPxNode::preEvaluation</code>. To avoid performing expensive calculations each time the evaluation method <code>MPxNode::compute()</code> is called, one strategy plug-in authors use is to store results from previous evaluations and then rely on <code>MPxNode::setDependentsDirty</code> to trigger re-computation. As discussed previously, once the EG has been built, dirty propagation is disabled and the EG is re-used. Threrefore, any custom logic in your plug-in that depends on setDependentsDirty no longer applies.  </p> <p><code>MPxNode::preEvaluation</code> allows your plug-in to determine which plugs/attributes are dirty and if any action is needed. Use the new MEvaluationNode class to determine what has been dirtied.  </p> <p>Refer to the simpleEvaluationNode devkit example for an illustration of how to use <code>MPxNode::preEvaluation</code>.</p> </li> <li> <p><code>MPxNode::postEvaluation</code>. Until now, it was difficult to determine at which point all processing for a node instance was complete. Users sometimes resorted to complex bookkeeping/callback schemes to detect this situation and perform additional work, such as custom rendering. This mechanism was cumbersome and error-prone.  </p> <p>Once all computations have been performed on a specific node instance, a new method, <code>MPxNode::postEvaluation</code>, is called. Since this method is called from a worker thread, it performs calculations for downstream graph operations without blocking other Maya processing tasks of non-dependent nodes.  </p> <p>See the simpleEvaluationDraw devkit example to understand how to use this method. If you run this example in regular evaluation, Maya slows down, since evaluation is blocked whenever expensive calculations are performed. When you run in Parallel Evaluation Mode, a worker thread calls the postEvaluation method and prepares data for subsequent drawing operations. When testing, you will see higher frame rates in Parallel evaluation versus regular or Serial evaluation. Please note that code in postEvaluation should be thread-safe.</p> </li> </ul> <p>Other recommended best practices include:</p> <ul> <li> <p>Avoid storing state in static variables. Store node state/settings in attributes. This has the additional benefit of automatically saving/restoring the plug-in state when Maya files are written/read.</p> </li> <li> <p>Node computation should not have any dependencies beyond input values. Maya nodes should be like functions. Output values should be computed from input state and node-specific internal logic. Your node should never walk the graph or try to circumvent the DG.</p> </li> </ul>"},{"location":"parallel/#custom-gpu-deformers","title":"Custom GPU Deformers","text":"<p>To make GPU Override work on scenes containing custom deformers, Maya provides new API classes that allow the creation of fast OpenCL deformer back-ends.</p> <p>Though you still need to have a CPU implementation for the times when it is not possible to target deformations on the GPU (see GPU Override), you can augment this with an alternate deformer implementation inheriting from MPxGPUDeformer. This applies to your own nodes as well as to standard Maya nodes.</p> <p>The GPU implementation will need to:</p> <ul> <li>Declare when it is valid to use the GPU-based backend (for example, you may want to limit you GPU version to cases where various attributes are fixed, omit usage for specific attribute values, and so on)</li> <li>Extract MDataBlock input values and upload values to the GPU</li> <li>Define and call the OpenCL kernel to perform needed computation</li> <li>Register itself with the MGPUDeformerRegistry system. This will tell the system which deformers you are claiming responsibility for.</li> </ul> <p>When you have done this, do not forget to load your plug-in at startup. Two working devkit examples (offsetNode and identityNode) have been provided to get you started.</p> <p>Tip</p> <p>To get a sense for the maximum speed increase you can expect by providing a GPU backend for a specific deformer, tell Maya to treat specific nodes as passthrough. Here\u2019s an example applied to polySoftEdge:</p> <pre><code>   cmds.GPUBuiltInDeformerControl(\n       name=\"polySoftEdge\",\n       inputAttribute=\"inputPolymesh\",\n       outputAttribute=\"output\",\n       passthrough=True\n       )\n</code></pre> <p>Although results will be incorrect, this test will confirm if it is worth investing time implementing an OpenCL version of your node.</p>"},{"location":"parallel/#custom-evaluator-api","title":"Custom Evaluator API","text":"<p>API classes and methods introduced in Maya 2017 let you define custom evaluators that allow control over how the Maya scene is computed.</p> <p>To create a custom evaluator, you must define a plug-in that extends the <code>MPxCustomEvaluator</code> class. The key class methods to override are described below.</p>"},{"location":"parallel/#the-basics","title":"The Basics","text":"<p>Before you can use the new evaluators, they must be registered:</p> <pre><code>MStatus registerEvaluator(\n    // name of the evaluator\n    const char *     evaluatorName,\n\n    // evaluator priority. Higher priority evaluators get 'first-dibs'\n    unsigned int     uniquePriority,\n\n    // function pointer to method returning a new evaluator instance\n    MCreatorFunction creatorFunction\n)\n</code></pre> <p>and deregistered:</p> <pre><code>MStatus deregisterEvaluator(\n    // name of the evaluator\n    const char* evaluatorName\n)\n</code></pre> <p>using <code>MFnPlugin</code> methods. These functions should be used during plug-in initialization:</p> <pre><code>MStatus initializePlugin( MObject obj )\n{\n    MFnPlugin plugin( obj, PLUGIN_COMPANY, \"3.0\", \"Any\");\n    MStatus status = plugin.registerEvaluator(\n        \"SimpleEvaluator\",\n        40,\n        simpleEvaluator::creator);\n    if (!status)\n        status.perror(\"registerEvaluator\");\n    return status;\n}\n</code></pre> <p>and uninitialization:</p> <pre><code>MStatus uninitializePlugin( MObject obj )\n{\n    MFnPlugin plugin( obj );\n    MStatus status = plugin.deregisterEvaluator( \"SimpleEvaluator\" );\n    if (!status)\n        status.perror(\"deregisterEvaluator\");\n    return status;\n}\n</code></pre> <p>as illustrated above.</p> <p>Once the plug-in has been loaded, use Python or MEL commands to enable:</p> <pre><code>import maya.cmds as cmds\ncmds.evaluator(enable=True, name='SimpleEvaluator')\n\n# Result: False #\n</code></pre> <p>disable:</p> <pre><code>cmds.evaluator(enable=False, name='SimpleEvaluator')\n\n# Result: True #\n</code></pre> <p>and query information about evaluators:</p> <pre><code>print cmds.evaluator(query=True)\n\n[u'invisibility', ... u'SimpleEvaluator']\n</code></pre> <p>NOTE: The evaluator command returns the previous state of the evaluator (as described in the documentation). This command fails if the evaluator cannot be enabled.</p> <p>To view the priorities of all loaded evaluators, use the priority flag on the evaluator command:</p> <pre><code>for evaluatorName in cmds.evaluator():\n    print \"%-25s : %d\" % (\n        evaluatorName,\n        cmds.evaluator(name=evaluatorName, query=True, priority=True))\n\ninvisibility              : 1003000\nfrozen                    : 1002000\ncurveManager              : 1001000\ncache                     : 1000000\ntimeEditorCurveEvaluator  : 104000\ndynamics                  : 103000\nikSystem                  : 102000\ndisabling                 : 100000\nhik                       : 7000\nreference                 : 6000\ndeformer                  : 5000\ncycle                     : 4000\ntransformFlattening       : 3000\npruneRoots                : 1000\nSimpleEvaluator           : 40\n</code></pre>"},{"location":"parallel/#api-reference","title":"API Reference","text":"<p>This section provides more detail on different <code>MPxCustomEvaluator</code> API methods.</p>"},{"location":"parallel/#claiming-clusters","title":"Claiming clusters","text":"<p>During EG partitioning, each evaluator gets to claim evaluation nodes, using the:</p> <pre><code>bool MPxCustomEvaluator::markIfSupported(const MEvaluationNode* node)\n</code></pre> <p>method. You can safely cause evaluation in this call but doing so increases partitioning and evaluation time. The developer can decide whether evaluation is required (call <code>.inputValue</code> / <code>.inputArrayValue</code>), or the previously-evaluated datablock values can be re-used (call <code>.outputValue</code> / <code>.outputArrayValue</code>). If multiple evaluators mark a specific node, which evaluator is assigned a node at run-time is determined by priority. For example, if you have two evaluators, A and B, mark node C of interest, if evaluator A has priority 100, and evaluator B has priority 10, during graph partitioning, evaluator A will get the opportunity to grab node C before evaluator B. Evaluators should not try to grab a node already grabbed by a higher-priority evaluator.</p>"},{"location":"parallel/#scheduling","title":"Scheduling","text":"<p>To determine if an evaluator can evaluate clusters in Parallel, use:</p> <pre><code>MCustomEvaluatorClusterNode::SchedulingType schedulingType(\n    // a disjoint set of nodes on a custom evaluator layer\n    const MCustomEvaluatorClusterNode * cluster\n)\n</code></pre> <p>where:</p> <p>SchedulingType</p> <p>Details</p> <p>kParallel</p> <p>any number of nodes of the same type can run in parallel</p> <p>kSerial</p> <p>all nodes of this type should be chained and executed sequentially</p> <p>kGloballySerial</p> <p>only one node of this type can be run at a time</p> <p>kUntrusted</p> <p>nothing else can execute with this node since we cannot predict what will happen</p> <p>During EG scheduling:</p> <pre><code>bool MPxCustomEvaluator::clusterInitialize(\n    // evaluation cluster node\n    const MCustomEvaluatorClusterNode* cluster\n)\n</code></pre> <p>can be used to perform the required cluster preparation. The pointer to the cluster remains valid until graph invalidation, such as when the scene topology changes.</p> <p>Before the cluster is deleted,</p> <pre><code>void MPxCustomEvaluator::clusterTerminate(\n    // the cluster to terminate\n    const MCustomEvaluatorClusterNode* cluster\n)\n</code></pre> <p>is called to allow needed cleanup, for example, releasing evaluator-specific resources. It is up to the custom evaluator to decide if it wants to clear its internal representation.</p>"},{"location":"parallel/#execution","title":"Execution","text":"<p>There are 3 main methods used during execution.</p> <p>Prior to graph execution, the EM calls:</p> <pre><code>void MPxCustomEvaluator::preEvaluate(\n    // the graph about to be evaluated\n    const MEvaluationGraph* graph\n)\n</code></pre> <p>during execution, the EM calls:</p> <pre><code>void MPxCustomEvaluator::clusterEvaluate(\n    // the cluster to be evaluated\n    const MCustomEvaluatorClusterNode* cluster\n)\n</code></pre> <p>You will only receive clusters that belong to this evaluator. This call always happens after <code>clusterInitialize</code> and never after <code>clusterTerminate</code>. Finally,</p> <pre><code>void MPxCustomEvaluator::postEvaluate(\n    // the graph that was evaluated\n    const MEvaluationGraph* graph\n)\n</code></pre> <p>is called just after a graph evaluation is finished.</p>"},{"location":"parallel/#simpleevaluator-api-example","title":"SimpleEvaluator API Example","text":"<p>Now that we have reviewed relevant API methods, the following example limits evaluation by caching previous results. <code>simpleEvaluator</code> assumes the existence of scene nodes that tag controller nodes with animation and works as follows:</p> <p>In <code>clusterInitialize</code>, we-2\"&gt;ld a list of translation and rotation attribute plugs.</p> <pre><code>// Build a list of plugs by scanning the scene for controller nodes.\n// This gets called during scheduling.\nbool simpleEvaluator::clusterInitialize(\n    const MCustomEvaluatorClusterNode* cluster\n    )\n{\n    if (fControllerPlugs.length() == 0)\n        buildPlugListWithControllerTag();\n    return true;\n}\n\n// Scan the scene for any controller nodes, populating the plug list.\n// Called during the scheduling phase\nvoid simpleEvaluator::buildPlugListWithControllerTag()\n{\n    MStatus stat;\n    MItDependencyNodes dgIter(MFn::kControllerTag, &amp;stat);\n    if (stat != MS::kSuccess)\n        return;\n\n    const char* values[] = {\n        \"translateX\",\n        \"translateY\",\n        \"translateZ\",\n        \"rotateX\",\n        \"rotateY\",\n        \"rotateZ\"\n    };\n\n    for (; !dgIter.isDone(); dgIter.next())\n    {\n        MFnDependencyNode controllerTagNode(dgIter.thisNode(), &amp;stat);\n        if (stat != MS::kSuccess)\n            continue;\n\n        MPlug currControllerTagPlug =\n            controllerTagNode.findPlug(\"controllerObject\", &amp;stat);\n        if (stat != MS::kSuccess)\n            continue;\n\n        // found controller tag node, now get its source controller\n        MPlugArray source;\n        bool retval = currControllerTagPlug.connectedTo(\n            source,\n            true /* asDst */,\n            false /* asSrc */,\n            &amp;stat)\n        if ((retval == false) || (stat != MS::kSuccess))\n            continue;\n\n        // there should only be one source with the controller tag node\n        // as destination\n        MObject controllerNode = source[0].node(&amp;stat);\n        if (stat != MS::kSuccess)\n            continue;\n\n        MFnDependencyNode currControllerNode(controllerNode, &amp;stat);\n        if (stat != MS::kSuccess)\n            continue;\n\n        for (unsigned int j = 0; j &lt; 6; j++)\n        {\n            MPlug currPlug = currControllerNode.findPlug(values[j], &amp;stat);\n            if (stat == MS::kSuccess)\n                fControllerPlugs.append(currPlug);\n            else\n                std::cerr\n                    &lt;&lt; \"NO PLUG: \"\n                    &lt;&lt; currControllerNode.name().asChar()\n                    &lt;&lt; \".\"\n                    &lt;&lt; values[j]\n                    &lt;&lt; std::endl;\n        }\n    }\n}\n</code></pre> <p>Later, during <code>preEvaluate</code>, which is called per-frame, a hash value is calculated based on the plug values of the current frame.</p> <pre><code>void simpleEvaluator::preEvaluate(const MEvaluationGraph* graph)\n{\n    buildHashValue();\n}\n\nvoid simpleEvaluator::buildHashValue()\n{\n    unsigned int length = fControllerPlugs.length();\n    MStatus stat = MS::kSuccess;\n\n    for (unsigned int i = 0; i &lt; length; i++)\n    {\n        float value = 0;\n        stat = fControllerPlugs[i].getValue(value);\n\n        if (stat == MS::kSuccess)\n        {\n            boost::hash_combine(fCurrentHashValue, value);\n        }\n        else\n        {\n            std::cerr\n                &lt;&lt; \"NO VALUE: \"\n                &lt;&lt; fControllerPlugs[i].name().asChar()\n                &lt;&lt; std::endl;\n        }\n    }\n}\n</code></pre> <p>This value is compared with the previous frame\u2019s hash in <code>clusterEvaluate</code>. If the hash is different, the evaluation proceeds, otherwise we do nothing.</p> <pre><code>void simpleEvaluator::clusterEvaluate(\n    const MCustomEvaluatorClusterNode* cluster\n    )\n{\n    if (fOldHashValue != fCurrentHashValue)\n        cluster-&gt;evaluate();\n}\n</code></pre> <p>To make sure the hash value is up-to-date, the hash value is stored in <code>postEvaluate</code>.</p> <pre><code>void simpleEvaluator::postEvaluate(const MEvaluationGraph* graph)\n{\n    fOldHashValue = fCurrentHashValue;\n    fCurrentHashValue = 0;\n}\n</code></pre> <p>Finally, when the graph topology becomes invalid, we call <code>clusterTerminate</code> to clear the cached list of plugs.</p> <pre><code>void simpleEvaluator::clusterTerminate(\n    const MCustomEvaluatorClusterNode* cluster\n    )\n{\n    if (fControllerPlugs.length() &gt; 0)\n        fControllerPlugs.clear();\n}\n</code></pre> <p>Since <code>simpleEvaluator</code> claims control over the entire graph, <code>markIfSupported</code> returns true for all nodes. Additionally, nothing special is done to alter the cluster\u2019s scheduling behavior.</p> <pre><code>bool simpleEvaluator::markIfSupported(const MEvaluationNode* node)\n{\n    return true;\n}\n\nMCustomEvaluatorClusterNode::SchedulingType\nsimpleEvaluator::schedulingType(const MCustomEvaluatorClusterNode* cluster)\n{\n    return cluster-&gt;schedulingType();\n}\n</code></pre> <p>See the provided simpleEvaluator devkit example for more details and complete source code.</p>"},{"location":"parallel/#vp2-integration","title":"VP2 Integration","text":"<p>Evaluation Manager Parallel Evaluation executes the Dependency Graph in parallel. Internally, Maya nodes begin preparing render data for VP2 immediately after a node is evaluated, and before the rest of the graph has finished evaluation. This is exposed to users as Evaluation Manager Parallel Update in the MPxGeometryOverride API (this feature may also be referred to as \u201cDirect Update\u201d). Supporting Evaluation Manager Parallel Update can significantly reduce time spent in Vp2BuildRenderLists and improve overall scene performance.</p> <p>The following profiler images were created from the same scene (100 footPrintNode_GeometryOverride nodes with animated \u201csize\u201d attributes). In the first image Evaluation Manager Parallel Update is not enabled, and a large amount of time is spent serially preparing draw data for each footPrint node in Vp2BuildRenderLists.</p> <p></p> <p>In the second image the footPrintNode_GeometryOverride has been modified to support Evaluation Manager Parallel Update. You can see that the long serial execution time in Vp2BuildRenderLists has been eliminated. All the data marshalling for VP2 is occurring in parallel while the Evaluation Manager is evaluating the Dependency Graph.</p> <p></p> <p>The footPrintNode_GeometryOverride example plug-in provides a detailed example for you to create an efficient MPxGeometryOverride plugin which supports Evaluation Manager Parallel Update and gives excellent performance in VP2.</p> <p>Supporting Evaluation Manager Direct Update adds some restrictions to which operations can safely be performed from MPxGeometryOverride function calls. All MPxGeometryOverride functions (except cleanUp() and the destructor) may be called from a worker thread in parallel with other Maya execution. These methods must all be thread safe. An MPxGeometryOverride object is guaranteed to have at most one of its member functions called at a time. If two different MPxGeometryOverride objects \u201cA\u201d and \u201cB\u201d both require updating, then any member function on \u201cA\u201d could be called at the same time as any member function on \u201cB\u201d.</p> <p>Furthermore, because these methods may be called from a worker thread, direct access to the rendering context is prohibited. MVertexBuffer and MIndexBuffer can still be used, but some of their features are prohibited from use when in Evaluation Manager Parallel Update. Details about which features are safe to use are provided in the documentation for MVertexBuffer and MIndexBuffer.</p>"},{"location":"parallel/#tracking-topology","title":"Tracking Topology","text":"<p>Evaluation Manager Parallel Update currently has the limitation that it can only be used on geometries that do not have animated topology. The status of whether topology is animated or not needs to be tracked from the geometry\u2019s origin to its display shape.</p> <p>If the nodes in the graph are built-in nodes, Maya can know if an animated input will affect the output geometry topology. Similarly, deformers (even custom ones derived from MPxDeformerNode), are assumed to simply deform their input in their output, keeping the same topology.</p> <p>However, more generic nodes can also generate geometries. When a custom node is a MPxNode, Maya cannot know whether an output geometry has animated topology. It therefore assumes the worst and treats the topology as animated. While this approach is the safest, it can prevent optimizations such as Evaluation Manager Parallel Update.</p> <p>As of Maya 2019, a new API has been added to inform Maya about attributes that might not affect the topology of an output geometry.</p> <ul> <li>The first step is to override the MPxNode::isTrackingTopology() method so that Maya can track topology information for this node.</li> <li>The second step is the use the new version of the MPxNode::attributeAffects() method to inform Maya that while the source attribute affects the output attribute, it does not affect its topology.</li> </ul> <p>Using this new API helps Maya to know that it is safe to use Evaluation Manager Parallel Update and benefit from its performance boost in more situations.</p>"},{"location":"parallel/#profiling-plug-ins","title":"Profiling Plug-ins","text":"<p>To visualize how long custom plug-ins take in the new profiling tools (see Profiling Your Scene) you will need to instrument your code. Maya provides C++, Python, and MEL interfaces for you to do this. Refer to the Profiling using MEL or Python or the API technical docs for more details.</p>"},{"location":"parallel/#profiling-your-scene","title":"Profiling Your Scene","text":"<p>In the past, it could be challenging to understand where Maya was spending time. To remove the guess-work out of performance diagnosis, Maya includes a new integrated profiler that lets you see exactly how long different tasks are taking.</p> <p>Open the Profiler by selecting:</p> <ul> <li>Windows &gt; General Editors &gt; Profiler from the Maya menu</li> <li>Persp/Graph Layout from the Quick Layout buttons and choosing Panel Layout &gt; Profiler.</li> </ul> <p>Once the Profiler window is visible:</p> <ol> <li>Load your scene and start playback</li> <li>Click Start in the Profiler to record information in the pre-allocated record buffer.</li> <li>Wait until the record buffer becomes full or click Stop in the Profiler to stop recording. The Profiler shows a graph demonstrating the processing time for your animation.</li> <li>Try recording the scene in DG, Serial, Parallel, and GPU Override modes.</li> </ol> <p>Tip</p> <p>By default, the Profiler allocates a 20MB buffer to store results. The record buffer can be expanded in the UI or by using the <code>profiler -b value;</code> command, where value is the desired size in MB. You may need this for more complex scenes.</p> <p>The Profiler includes information for all instrumented code, including playback, manipulation, authoring tasks, and UI/Qt events. When profiling your scene, make sure to capture several frames of data to ensure gathered results are representative of scene bottlenecks.</p> <p>The Profiler supports several views depending on the task you wish to perform. The default Category View, shown below, classifies events by type (e.g., dirty, VP1, VP2, Evaluation, etc). The Thread and CPU views show how function chains are subdivided amongst available compute resources. Currently the Profiler does not support visualization of GPU-based activity.</p> <p>![][image1.jpg]</p>"},{"location":"parallel/#understanding-your-profile","title":"Understanding Your Profile","text":"<p>Now that you have a general sense of what the Profiler tool does, let\u2019s discuss key phases involved in computing results for your scene and how these are displayed. By understanding why scenes are slow, you can target scene optimizations.</p> <p>Every time Maya updates a frame, it must compute and draw the elements in your scene. Hence, computation can be split into one of two main categories:</p> <ol> <li>Evaluation (i.e., doing the math that determines the most up-to-date values for scene elements)</li> <li>Rendering (i.e., doing the work that draws your scene in the viewport).</li> </ol> <p>When the main bottleneck in your scene is evaluation, we say the scene is evaluation-bound. When the main bottleneck in your scene is rendering, we say the scene is render-bound.</p>"},{"location":"parallel/#profiler-colors","title":"Profiler Colors","text":"<p>Each event recorded by the profiler has an associated color. Each color represents a different type of event. By understanding event colors you can quickly interpret profiler results. Some colors are re-used and so have different meanings in different categories.</p> <ul> <li>Dirty Propagation (Pink and Purple)</li> <li>Pull Evaluation (Dark Green)</li> <li>Forward or Evaluation Manager Evaluation (Peach, Tan and Brown)</li> <li>Set Time (Light Green)</li> <li>Qt Events (Light Blue)</li> <li>VP2 Rendering (Light Blue)</li> <li>VP2 Pull Updates (Light and Dark Yellow and Blue)</li> <li>VP2 Push or Direct Updates (Light and Dark Blue)</li> <li>GPU Override CPU usage (Light and Dark Yellow)</li> <li>Cache Restore (Yellow)</li> <li>Cache Skipped (Gray)</li> </ul> <p>We can\u2019t see every different type of event in a single profile, because some events like Dirty Propagation only occur with Evaluation Manager off, and other events like GPU Override CPU usage only occur with Evaluation Manager on. In the following example profiles we will show DG Evaluation, Evaluation Manager Parallel Evaluation, GPU Override Evaluation, Evaluation Cached Evaluation and VP2 Cached Evaluation. Through these examples we\u2019ll see how to interpret a profile based on graph colors and categories, and we\u2019ll learn how each performance optimization in Maya can impact a scene\u2019s performance. The following example profiles are all generated from the same simple FK character playing back.</p>"},{"location":"parallel/#dg-evaluation","title":"DG Evaluation","text":"<p>In this profile of DG Evaluation we can see several types of event.</p> <ol> <li>Pink and purple Dirty Propagation events in the Dirty Propagation category.</li> <li>Dark green Pull Evaluation events in the Evaluation category.</li> <li>Blue VP2 Pull Translation and light blue VP2 Rendering in the VP2 Evaluation category.</li> <li>Yellow events in the VP2 Evaluation category show time VP2 spent waiting for data from Dependency Graph nodes.</li> </ol> <p>A significant fraction of each frame is spent on Dirty Propagation, a problem which is alleviated by Evaluation Manager.</p>"},{"location":"parallel/#em-parallel-evaluation","title":"EM Parallel Evaluation","text":"<p>In this profile of EM Parallel Evaluation we can see all the purple and pink dirty propagation is gone.</p> <ol> <li>Peach, tan and brown EM Parallel Evaluation events of the FK rig colored. The high stack of events represents some evaluation occurring in parallel (use thread view to better understand parallelism).</li> <li>Tan and brown EM Parallel Evaluation events while Maya evaluates the skin cluster to compute the deformed mesh. These events occur serially because the Dependency Graph has no parallelism.</li> <li>Dark blue and blue VP2 Direct Update events translate data into a VP2 render-able format.</li> <li>Yellow in the Main category and light blue in the VP2 Evaluation category are VP2 Rendering events.</li> </ol> <p>In this profile we see much less time spent on Vp2SceneRender (4). This occurs because time spent reading data from dependency nodes has been moved from rendering to EM Parallel Evaluation (1). DG evaluation uses a data pull model, while EM Evaluation uses a data push model. Additionally, some geometry translation (2), is also moved from rendering to evaluation. We call geometry translation during evaluation \u201cVP2 Direct Update\u201d. A significant portion of each frame is spent deforming and translating the geometry data, a problem which is alleviated by GPU Override.</p>"},{"location":"parallel/#em-parallel-evaluation-with-gpu-override","title":"EM Parallel Evaluation with GPU Override","text":"<p>In this profile of EM Parallel Evaluation we can see one major new difference from the previous profile of EM Parallel Evaluation.</p> <ol> <li>Light and dark yellow GPU Override events have replaced the long serial central part of the EM Parallel Evaluation profile (2 &amp; 3 from EM Parallel Evaluation). The GPU Override events represent the time taken on the CPU to marshal data and launch the GPU computation.</li> <li>Peach, tan and brown EM Parallel Evaluation events here have roughly the same duration as EM Parallel Evaluation even though the relative size of the rig evaluation events with GPU Override is larger. This is because the scale of this profile is different from the scale of the previous profile. In the profile of EM Parallel Evaluation with GPU Override the total time displayed is about 5ms. In the previous profile of EM Parallel Evaluation the total time displayed is about 12ms.</li> <li>Light blue VP2 Render events have experienced a similar relative stretching (2).</li> </ol>"},{"location":"parallel/#em-evaluation-cached-playback","title":"EM Evaluation Cached Playback","text":"<p>In this profile of EM Evaluation Cached Playback we can see several new types of event.</p> <ol> <li>Yellow Restore Cache events recording the time taken to update each FK rig node which has cached data. There are also brown VP2 Direct Update events used to track update of the VP2 representation of the data.</li> <li>Yellow Restore Cache event for the deformed mesh. This represents the time taken to restore the data into the Maya node, and to translate the data into VP2 for drawing using VP2 Direct Update.</li> </ol>"},{"location":"parallel/#em-vp2-hardware-cached-playback","title":"EM VP2 Hardware Cached Playback","text":"<ol> <li>Dark blue VP2 Hardware Cache Restore events have replaced the long serial Cache Restore event (2 from EM Evaluation Cached Playback). Restoring the VP2 Hardware Cache is much faster because the data is already in in the render-able format and stored on the GPU.</li> <li>Gray Cache Skipped event signaling data in the dependency node is not updated.</li> </ol>"},{"location":"parallel/#evaluation-bound-performance","title":"Evaluation-Bound Performance","text":"<p>When the main bottleneck in your scene is evaluation, we say the scene is evaluation-bound. There are several different problems that may lead to evaluation-bound performance.</p> <p>Lock Contention. When many threads try to access a shared resource you may experience Lock Contention, due to lock management overhead. One clue that this may be happening is that evaluation takes roughly the same duration regardless of which evaluation mode you use. This occurs since threads cannot proceed until other threads are finished using the shared resource.</p> <p></p> <p>Here the Profiler shows many separate identical tasks that start at nearly the same time on different threads, each finishing at different times. This type of profile offers a clue that there might be some shared resource that many threads need to access simultaneously.</p> <p>Below is another image showing a similar problem.</p> <p></p> <p>In this case, since several threads were executing Python code, they all had to wait for the Global Interpreter Lock (GIL) to become available. Bottlenecks and performance loses caused by contention issues may be more noticeable when there is a high concurrency level, such as when your computer has many cores.</p> <p>If you encounter contention issues, try to fix the code in question. For the above example, changing node scheduling converted the above profile to the following one, providing a nice performance gain. For this reason, Python plug-ins are scheduled as Globally Serial by default. As a result, they will be scheduled one after the other and will not block multiple threads waiting for the GIL to become available.</p> <p></p> <p>Clusters. As mentioned earlier, if the EG contains node-level circular dependencies, those nodes will be grouped into a cluster which represents a single unit of work to be scheduled serially. Although multiple clusters may be evaluated at the same time, large clusters limit the amount of work that can be performed simultaneously. Clusters can be identified in the Profiler as bars wiip.opaqueTaskEvaluation label, shown below.</p> <p></p> <p>If your scene contains clusters, analyze your rig\u2019s structure to understand why circularities exist. Ideally, you should strive to remove coupling between parts of your rig, so rig sections (e.g., head, body, etc.) can be evaluated independently.</p> <p>Tip</p> <p>When troubleshooting scene performance issues, you can temporarily disable costly nodes using the per-node <code>frozen</code> attribute. This removes specific nodes from the EG. Although the result you see will change, it is a simple way to check that you have found the bottleneck for your scene.</p>"},{"location":"parallel/#render-bound-performance","title":"Render-Bound Performance","text":"<p>When the main bottleneck in your scene is rendering, we say the scene is render-bound. The following is an illustration of a sample result from the Maya Profiler, zoomed to a single frame measured from a large scene with many animated meshes. Because of the number of objects, different materials, and the amount of geometry, this scene is very costly to render.</p> <p>![][image6.jpeg]</p> <p>The attached profile has four main areas:</p> <ul> <li>Evaluation (A)</li> <li>GPUOverridePostEval (B)</li> <li>Vp2BuildRenderLists (C)</li> <li>Vp2Draw3dBeautyPass (D)</li> </ul> <p>In this scene, a substantial number of meshes are being evaluated with GPU Override and some profiler blocks appear differently from what they would otherwise.</p> <p>Evaluation. Area A depicts the time spent computing the state of the Maya scene. In this case, the scene is moderately well-parallelized. The blocks in shades of orange and green represent the software evaluation of DG nodes. The blocks in yellow are the tasks that initiate mesh evaluation via GPU Override. Mesh evaluation on the GPU starts with these yellow blocks and continues concurrently with the other work on the CPU.</p> <p>An example of a parallel bottleneck in the scene evaluation appears in the gap in the center of the evaluation section. The large group of GPU Override blocks on the right depend on a single portion of the scene and must wait until that is complete.</p> <p>Area A2 (above area A), depicts blue task blocks that show the work that VP2 does in parallel to the scene evaluation. In this scene, most of the mesh work is handled by GPU Override so it is mostly empty. When evaluating software meshes, this section shows the preparation of geometry buffers for rendering.</p> <p>GPUOverridePostEval. Area B is where GPU Override finalizes some of its work. The amount of time spent in this block varies with different GPU and driver combinations. At some point there will be a wait for the GPU to complete its evaluation if it is heavily loaded. This time may appear here or it may show as additional time spent in the Vp2BuildRenderLists section.</p> <p>Vp2BuildRenderLists. Area C. Once the scene has been evaluated, VP2 builds the list of objects to render. Time in this section is typically proportional to the number of objects in the scene.</p> <p>Vp2PrepareToUpdate. Area C2, very small in this profile. VP2 maintains an internal copy of the world and uses it to determine what to draw in the viewport. When it is time to render the scene, we must ensure that the objects in the VP2 database have been modified to reflect changes in the Maya scene. For example, objects may have become visible or hidden, their position or their topology may have changed, and so on. This is done by VP2 Vp2PrepareToUpdate.</p> <p>Vp2PrepareToUpdate is slow when there are shape topology, material, or object visibility changes. In this example, Vp2PrepareToUpdate is almost invisible since the scene objects require little extra processing.</p> <p>Vp2ParallelEvaluationTask is another profiler block that can appear in this area. If time is spent here, then some object evaluation has been deferred from the main evaluation section of the Evaluation Manager (area A) to be evaluated later. Evaluation in this section uses traditional DG evaluation.</p> <p>Common cases for which Vp2BuildRenderLists or Vp2PrepareToUpdate can be slow during Parallel Evaluation are:</p> <ul> <li>Large numbers of rendered objects (as in this example)</li> <li>Mesh topology changes</li> <li>Object types, such as image planes, requiring legacy evaluation before rendering</li> <li>3<sup>rd</sup> party plug-ins that trigger API callbacks</li> </ul> <p>Vp2Draw3dBeautyPass. Area D. Once all data has been prepared, it is time to render the scene. This is where the actual OpenGL or DirectX rendering occurs. This area is broken into subsections depending on viewport effects such as depth peeling, transparency mode, and screen space anti-aliasing.</p> <p>Vp2Draw3dBeautyPass can be slow if your scene:</p> <ul> <li>Has Many Objects to Render (as in this example).</li> <li>Uses Transparency. Large numbers of transparent objects can be costly since the default transparency algorithm makes scene consolidation less effective. For very large numbers of transparent objects, setting Transparency Algorithm (in the vp2 settings) to Depth Peeling instead of Object Sorting may be faster. Switching to untextured mode can also bypass this cost</li> <li>Uses Many Materials. In VP2, objects are sorted by material prior to rendering, so having many distinct materials makes this time-consuming.</li> <li>Uses Viewport Effects. Many effects such as SSAO (Screen Space Ambient Occlusion), Depth of Field, Motion Blur, Shadow Maps, or Depth Peeling require additional processing.</li> </ul> <p>Other Considerations. Although the key phases described above apply to all scenes, your scene may have different performance characteristics.</p> <p>For static scenes with limited animation, or for non-deforming animated objects, consolidation is used to improve performance. Consolidation groups objects that share the same material. This reduces time spent in both Vp2BuildRenderLists and Vp2Draw3dBeatyPass, since there are fewer objects to render.</p>"},{"location":"parallel/#saving-and-restoring-profiles","title":"Saving and Restoring Profiles","text":"<p>Profile data can be saved at any time for later analysis using the <code>Edit -&gt; Save Recording...</code> or <code>Edit -&gt; Save Recording of Selected Events...</code> menu items in the Profiler window. Everything is saved as plain string data (see the appendix describing the profiler file format for a description of how it is stored) so that you can load profile data from any scene using the <code>Edit -&gt; Load Recording...</code> menu item without loading the scene that was profiled.</p>"},{"location":"parallel/#troubleshooting-your-scene","title":"Troubleshooting Your Scene","text":""},{"location":"parallel/#analysis-mode","title":"Analysis Mode","text":"<p>The purpose of Analysis Mode is to perform more rigorous inspection of your scene to catch evaluation errors. Since Analysis Mode introduces overhead to your scene, only use this during debugging activities; animators should not enable Analysis Mode during their day-to-day work. Note that Analysis Mode is not thread-safe, so it is limited to Serial; you cannot use analysis mode while in Parallel evaluation.</p> <p>The key function of Analysis Mode is to:</p> <ul> <li>Search for errors at each playback frame. This is different than Safe Mode, which only tries to identify problems at the start of parallel execution.</li> <li>Monitor read-access to node attributes. This ensures that nodes have a correct dependency structure in the EG.</li> <li>Return diagnostics to better understand which nodes influence evaluation. This is currently limited to reporting one destination node at a time.</li> </ul> <p>Tip</p> <p>To activate Analysis Mode, use the <code>dbtrace -k evalMgrGraphValid;</code> MEL command.</p> <p>Once active, error detection occurs after each evaluation. Missing dependencies are saved to a file in your machine\u2019s temporary folder (e.g., <code>%TEMP%\\_MayaEvaluationGraphValidation.txt</code> on Windows). The temporary directory on your platform can be determined using the <code>internalVar -utd;</code> MEL command.</p> <p>To disable Analysis Mode, type: <code>dbtrace -k evalMgrGraphValid -off;</code></p> <p>Let\u2019s assume that your scene contains the following three nodes. Because of the dependencies, the evaluation manager must compute the state of nodes B and C prior to calculating the state of A.</p> <p></p> <p>Now let\u2019s assume Analysis Mode returns the following report:</p> <pre><code>Detected missing dependencies on frame 56\n{\n     A.output &lt;-x- B\n     A.output &lt;-x- C [cluster]\n}\nDetected missing dependencies on frame 57\n{\n    A.output &lt;-x- B\n    A.output &lt;-x- C [cluster]\n}\n</code></pre> <p>The <code>&lt;-x-</code> symbol indicates the direction of the missing dependency. The <code>[cluster]</code> term indicates that the node is inside of a cycle cluster, which means that any nodes from the cycles could be responsible for attribute access outside of evaluation order</p> <p>In the above example, B accesses the <code>output</code> attribute of A, which is incorrect. These types of dependency do not appear in the Evaluation Graph and could cause a crash when running an evaluation in Parallel mode.</p> <p>There are multiple reasons that missing dependencies occur, and how you handle them depends on the cause of the problem. If Analysis Mode discovers errors in your scene from bad dependencies due to:</p> <ul> <li>A user plug-in. Revisit your strategy for managing dirty propagation in your node. Make sure that any attempts to use \u201cclever\u201d dirty propagation dirty the same attributes every time. Avoid using different notification messages to trigger pulling on attributes for computation.</li> <li>A built-in node. You should communicate this information to us. This may highlight an error that we are unaware of. To help us best diagnose the causes of this bug, we would appreciate if you can provide us with the scene that caused the problem.</li> </ul>"},{"location":"parallel/#graph-execution-order","title":"Graph Execution Order","text":"<p>There are two primary methods of displaying the graph execution order.</p> <p>The simplest is to use the \u2018compute\u2019 trace object to acquire a recording of the computation order. This can only be used in Serial mode, as explained earlier. The goal of compute trace is to compare DG and EM evaluation results and discover any evaluation differences related to a different ordering or missing execution between these two modes.</p> <p>Keep in mind that there will be many differences between runs since the EM executes the graph from the roots forward, whereas the DG uses values from the leaves. For example in the simple graph shown earlier, the EM guarantees that B and C will be evaluated before A, but provides no information about the relative ordering of B and C. However in the DG, A pulls on the inputs from B and C in a consistent order dictated by the implementation of node A. The EM could show either \"B, C, A\" or \"C, B, A\" as their evaluation order and although both might be valid, the user must decide if they are equivalent or not. This ordering of information can be even more useful when debugging issues in cycle computation since in both modes a pull evaluation occurs, which will make the ordering more consistent.</p>"},{"location":"parallel/#the-evaluation-toolkit","title":"The Evaluation Toolkit","text":"<p>A set of debugging tools used to be shipped as a special shelf in Maya Bonus Tools, but they are now built-in within Maya. The Evaluation Toolkit provides features to query and analyze your scene and to activate / deactivate various modes. See the accompanying Evaluation Toolkit documentation for a complete list of all helper features.</p>"},{"location":"parallel/#known-limitations","title":"Known Limitations","text":"<p>This section lists known limitations for the new evaluation system.</p> <ul> <li>VP2 Motion Blur will disable Parallel evaluation. For Motion Blur to work, the scene must be evaluated at different points in time. Currently the EM does not support this.</li> <li>Scenes using FBIK will revert to Serial. For several years now, Autodesk has been deprecating FBIK. We recommend using HIK for full-body retargeting/solving.</li> <li>dbtrace will not work in Parallel mode. As stated in the Analysis Mode section, the dbtrace command only works in Serial evaluation. Having traces enabled in Parallel mode will likely cause Maya to crash.</li> <li>The DG Profiler crashes in Parallel Mode. Unless you are in DG evaluation mode, you will be unable to use the legacy DG profiler. Time permitting, we expect to move features of the DG profiler into the new thread-safe integrated profiler.</li> <li>Batch rendering scenes with XGen may produce incorrect results.</li> <li>Evaluation manager in both Serial and Parallel mode changes the way attributes are cached. This is done to allow safe parallel evaluation and prevent re-computation of the same data by multiple threads. This means that some scenes may evaluate differently if multiple computations of the same attribute occur in one evaluation cycle. With the Evaluation Manager, the first value will be cached.</li> <li>VP2 Direct update does not work with polySoftEdge nodes.</li> </ul>"},{"location":"parallel/#appendices","title":"Appendices","text":""},{"location":"parallel/#profiler-file-format","title":"Profiler File Format","text":"<p>The profiler stores its recording data in human-readable strings. The format is versioned so that older format files can still be read into newer versions of Maya (though not necessarily vice-versa).</p> <p>This is a description of the version 1 format.</p> <p>First, a content example:</p> <pre><code>1     #File Version, # of events, # of CPUs\n2     2\\t12345\\t8\n3     Main\\tDirty\n4     #Comment mapping---------\n5*    @27 = MainMayaEvaluation\n6     #End comment mapping---------\n7     #Event time, Comment, Extra comment, Category id, Duration, \\\n          Thread Duration, Thread id, Cpu id, Color id\n8*    1234567\\t@12\\t@0\\t2\\t12345\\t11123\\t36\\t1\\t14\n9     #Begin Event Tag Mapping---------\n10    #Event ID, Event Tag\n11*   123\\tTaggy McTagface\n12    #End Event Tag Mapping---------\n13    #Begin Event Tag Color Mapping---------\n14    #Tag Label, Tag Color\n15*   Taggy\\tMcTagface\\t200\\t200\\t13\n16    #End Event Tag Color Mapping---------\nEOF\n</code></pre> <p>The following table describes the file format structure by referring to the previous content:</p> <p>Line(s)</p> <p>Description</p> <p>1</p> <p>A header line with general file information names</p> <p>2</p> <p>A tab-separated line containing the header information</p> <p>3</p> <p>A tab-separated line containing the list of categories used by the events (category ID is the index of the category in the list)</p> <p>4</p> <p>A header indicating the start of comment mapping (a mapping from an ID to the string it represents)</p> <p>5*</p> <p>Zero or more lines lines mapping a number onto a string in the form <code>@LINE = STRING</code>. The IDs do not correspond to anything outside of the file.</p> <p>6</p> <p>A footer indicating the end of comment mapping</p> <p>7</p> <p>A header indicating the start of event information. The names are the titles of the event columns.</p> <ul> <li>Event time is the absolute time, in ticks, the event started</li> <li>Duration is the total amount of time, in ticks, for the entire event</li> <li>Thread duration is the total amount of time, in ticks, the event took inside the thread</li> <li>Comment and Extra comment use an ID from the comment mapping above</li> <li>Category id is the index of the event\u2019s category from the list at line 3</li> <li>Cpu id and Thread id are the ones in which the event took place. Actual values are arbitrary; only meant to distinguish unique CPUs and Threads</li> <li>Color id is an index into the color mapping internal to the app (colors at the time of creation are not stored in the file).</li> </ul> <p>8*</p> <p>Zero or more tab-separated lines mapping to all of the events that were stored in the file</p> <p>9</p> <p>A header indicating the start of the event tag maps</p> <p>10</p> <p>A title line showing what values are in the event tag map columns</p> <p>11*</p> <p>Zero or more tab-separated lines attaching an event tag, defined through the profiler tool, to a specific event ID. The event ID will correspond to the ID given to it in the comment mapping section.</p> <p>12</p> <p>A footer indicating the end of the event tag maps</p> <p>13</p> <p>A header indicating the start of the event tag color maps</p> <p>14</p> <p>A title line showing what values are in the event tag color map columns</p> <p>15*</p> <p>Zero or more tab-separated lines mapping a tag label defined above to an R,G,B color</p> <p>16</p> <p>A header indicating the end of the event tag color maps</p> <p>EOF</p> <p>Sample version 2 file on 4 CPUs containing a single event of type \u201cETName\u201d, description \u201cETDescription\u201d, in category \u201cETCategory\u201d with description \u201cCategory description\u201d, using color 7, of duration 100 ticks, starting at tick 999, on a single thread with ID 22, tagged with \u201cTagMe\u201d which has color red (255 0 0)</p> <pre><code>#File Version, # of events, # of CPUs\n2   1   4\nETCategory\nCategory description\n#Comment mapping---------\n@0 = ETName\n#End comment mapping---------\n999 @0  @0  1   100 100 22  1   7\n#Begin comment description mapping---------\n@1 = ETDescription\n#End comment description mapping---------\n#Begin Event Tag Mapping---------\n#Event ID, Event Tag\n1   TagMe\n#End Event Tag Mapping---------\n#Begin Event Tag Color Mapping---------\n#Tag Label, Tag Color\nTagMe   255 0 0\n#End Event Tag Color Mapping---------\n</code></pre>"},{"location":"parallel/#debugging-commands","title":"Debugging Commands","text":"<p>Several commands can be used to help display information about your scene to help in debugging or optimizations. This is a summary of some of the more common ones, and represents only the available runtime information. Consult the command documentation in Maya\u2019s online technical documentation for more information about each command.</p>"},{"location":"parallel/#dbcount","title":"dbcount","text":"<p>Maintains embedded code location counters for higher-level debugging of scene operation. Generally, this uses specialized code that is only available in custom builds.</p> <pre><code>Synopsis: dbcount [flags]\nFlags:\n   -e -enabled      on|off\n   -f -file         String\n   -k -keyword      String\n   -l -list        \n  -md -maxdepth     UnsignedInt\n   -q -quick       \n   -r -reset       \n   -s -spreadsheet\n\nCommand Type: Command\n</code></pre>"},{"location":"parallel/#dbmessage","title":"dbmessage","text":"<p>Monitors messaging that adds and removes DAG and DG nodes.</p> <pre><code>Synopsis: dbmessage [flags]\nFlags:\n   -f -file     String\n   -l -list    \n   -m -monitor  on|off\n   -t -type     String\n\nCommand Type: Command\n</code></pre>"},{"location":"parallel/#dbtrace","title":"dbtrace","text":"<p>Turns on conditional code, typically to print out status information or to take different code paths when enabled.</p> <p>To find available trace objects use dbtrace \u2013q to list currently-enabled traces, and dbtrace \u2013q \u2013off to list currently-disabled traces.</p> <p>To find the current trace output target, use dbtrace -q -k keyword -o.</p> <p>See below for information on specific keywords.</p> <p>Note: Work is currently in progress to make these trace objects more flexible. It is a current design constraint that sometimes they are visible in a release, even though they only function internally, and some cannot be used when using Parallel evaluation.</p> <pre><code>Synopsis: dbtrace [flags]\nFlags:\n   -q -query\n   -f -filter   String\n   -i \u2013info\n   -k -keyword  String (multi-use)\n              (Query Arg Optional)\n   -m -mark    \n   -o -output   String\n -off -        \n   -t -title    String\n  -tm -timed    on|off\n   -v -verbose\n\nCommand Type: Command\n</code></pre> <p>Keyword</p> <p>Description</p> <p>Contents (Default Output File)</p> <p>OGSPolyGhosts</p> <p>Shows progress of data extraction from the evaluation of poly ghosts through OGS</p> <p>(stdout)</p> <p>cacheConfig</p> <p>Shows cache configuration rules evaluation</p> <p>Result of cache configuration rules for each evaluation node (_Trace_CacheConfig.txt)</p> <p>cipEM</p> <p>Shows what Customer Improvement Program data is being collected.</p> <p>Generic usage information. No longer being used (stdout)</p> <p>cmdTracking</p> <p>Enables the tracking of counts of commands. Use the dbpeek \u2018cmdTracking\u2019 operation to view the results.</p> <p>No output, but enables tracking of the counts for all commands being executed. (For example, you can turn it on during file load to get a count of the number of createNode calls, including those in referenced files, a task that is difficult to do manually) (stdout)</p> <p>compute</p> <p>High level trace of the compute path</p> <p>Nested output showing compute methods being called. Typically in EM mode you should see nesting only in cycles. DG mode will show the full set of nodes triggered by a single evaluation request (_Trace_Compute.txt)</p> <p>dbCache</p> <p>Data block manipulation</p> <p>Details of the creation and manipulation of datablock information (_Trace_DataBlockCache.txt)</p> <p>deformerEvaluator</p> <p>Statistics for the deformer evaluator setup</p> <p>Shows statistics on what the deformer evaluator was able to ingest, once enabled (stderr)</p> <p>evalMgr</p> <p>Evaluation manager interactions</p> <p>(_Trace_EvalManager.txt)</p> <p>evalMgrGraphInvalid</p> <p>Evaluation manager graph invalidation</p> <p>(stdout)</p> <p>evalMgrGraphValid</p> <p>Evaluation manager execution graph validation errors and warnings</p> <p>Nodes that were evaluated while in EMS mode using the pull (DG) model. This indicates missing dependencies in the evaluation graph, possibly caused by custom dirty propagation (_MayaEvaluationGraphValidation.txt)</p> <p>evalMgrSched</p> <p>Internal use only</p> <p>(_MayaScheduling.txt)</p> <p>idleBuild</p> <p>Operation of the idle build mechanism for the evaluation graph</p> <p>When the idle build is active, this appears when the idle build is triggered and executed (_Trace_EGBuild.txt)</p> <p>nodeTracking</p> <p>Enables tracking of counts of created nodes. Use the dbpeek \u2018nodeTracking\u2019 operation to view results.</p> <p>(stdout)</p> <p>peekCache</p> <p>Shows progress of the dbpeek -op cache operation</p> <p>Dumps data collected by the dbpeek operation, and how (_Trace_DbPeekCache.txt)</p> <p>peekContext</p> <p>Shows progress of the dbpeek -op context operation</p> <p>Dumps data collected by the dbpeek operation, and how (stdout)</p> <p>peekData</p> <p>Shows progress of the dbpeek -op data operation</p> <p>Dumps data collected by the dbpeek operation, and how (_Trace_DbPeekData.txt)</p> <p>peekMesh</p> <p>Shows progress of the dbpeek -op mesh operation</p> <p>Dumps data collected by the dbpeek operation, and with what flags (_Trace_DbPeekMesh.txt)</p>"},{"location":"parallel/#dgdebug","title":"dgdebug","text":"<p>Historical debugging command; not robust or documented. Deprecated: Use the newer dbpeek command.</p> <pre><code>No help is provided for this command.\n</code></pre>"},{"location":"parallel/#dgdirty","title":"dgdirty","text":"<p>Forces dirty/clean states onto specified plugs and everything downstream from them. Meant to be a safety net for restoring proper states to your scene when something has gone wrong.</p> <p>You should not need to use this command, but it will continue to exist as a \u201creset button\u201d, just in case.</p> <pre><code>Synopsis: dgdirty [flags] [String...]\nFlags:\n   -q -query\n   -a -allPlugs    \n   -c -clean       \n   -i -implicit    \n   -l -list         String\n   -p -propagation\n  -st -showTiming  \n   -v -verbose\n\nCommand Type: Command\n</code></pre>"},{"location":"parallel/#dgeval","title":"dgeval","text":"<p>Forces the node to compute certain plugs. Like dgdirty, this command is meant to be a safety net if computation has not occurred in the proper order. Similar in function to the getAttr command, but since it returns no results, it can handle all attribute types, not only those supported by getAttr.</p> <pre><code>Synopsis: dgeval [flags] String...\nFlags:\n -src -        \n   -v -verbose\n\nCommand Type: Command\n</code></pre>"},{"location":"parallel/#dginfo","title":"dgInfo","text":"<p>Dumps information about the current state of the graph. Be aware that when plug dirty states are reported, they represent the connection associated with the plug. In fan-out or in-out connections there will be more than one dirty state associated with the connection attached to the plug. This means it is legal to see A-&gt;B as dirty but B-&gt;A as clean if A has multiple connections. Being Deprecated: Use the newer dbpeek command.</p> <pre><code>Synopsis: dgInfo [flags] [String...]\nFlags:\n -all -allNodes     \n   -c -connections  \n   -d -dirty         on|off\n   -n -nodes        \n  -nd -nonDeletable\n  -nt -type          String\n  -of -outputFile    String\n   -p -propagation   on|off\n   -s -short        \n -sub -subgraph     \n  -sz -size\n\nCommand Type: Command\n</code></pre>"},{"location":"parallel/#dgmodified","title":"dgmodified","text":"<p>Checks on the reason a file requests saving when no changes have been made.</p> <pre><code>Synopsis: dgmodified\n\nNo Flags.\n</code></pre>"},{"location":"parallel/#dbpeek","title":"dbpeek","text":"<p>This command is called out intentionally, as it combines multiple operations into a single command by use of various operations.</p> <p>It runs one of several operations that provide a view into the data internals in the scene. This is the most useful and flexible of the debugging commands, and new variations of it are often being introduced. Use dbpeek -q -op to show a list of currently available operations and dbpeek -op X -q to show detailed help for operation X.</p> <p>See below for information on specific keywords.</p> <p>Note: The syntax of the argument flag allows for both keyword argument=\u2019key\u2019 and keyword/value argument=\u2019key=value\u2019 forms.</p> <pre><code>Synopsis: dbpeek [flags] [String...]\nFlags:\n   -q -query\n   -a -argument         String (multi-use) (Query Arg Mandatory)\n -all -allObjects      \n   -c -count            UnsignedInt\n  -eg -evaluationGraph\n  -of -outputFile       String\n  -op -operation        String (Query Arg Optional)\n\nCommand Type: Command\n</code></pre>"},{"location":"parallel/#dbpeek-op-attributes","title":"dbpeek -op attributes","text":"<p>Analyzes node or node-type attributes and dumps information about them based on what the selected operation type.</p> <p>Various arguments to the operation change the content of the output. The essence remains the same; the attributes belong to the node or node type.</p> <p>Argument</p> <p>Meaning</p> <p>detail</p> <p>Adds all internal details from attributes being dumped, otherwise dumps only the names and structure. The details are output as object members of the attribute, including the children.</p> <p>nodeType</p> <p>Dumps all attributes belonging to the selected node(s) types. If nothing is selected, it dumps the attributes for all available node types. This includes all node types up the hierarchy to the base node class.</p> <p>noDynamic</p> <p>Skips dynamic attributes in all output.</p> <p>noExtension</p> <p>Skips extension attributes in all output.</p> <p>noStatic</p> <p>Skips static attributes in all output.</p> <p>onlyPlugins</p> <p>Restricts any output to nodes and node types that originate from a plug-in.</p> <p>type=affects</p> <p>Dumps attribute structure and affects relationships in the graphical .dot format.</p> <p>type=detail</p> <p>Dumps attribute information in .json format. This is the default if no type is specified.</p> <p>type=validate</p> <p>Validates flags and structure for consistency and validity.</p> <p>If no nodes are selected, then this command prints the list of all attributes on all nodes. For example, if you had a node type called reversePoint with a vector input and a vector output.</p> <p>type=detail would output this JSON data:</p> <pre><code>{\n    \"nodes\" :\n    {\n      \"reversePoint\" :\n      {\n        \"staticAttributes\" : [\n          { \"pointInput\" : [\n              \"pointInputX\",\n              \"pointInputY\",\n              \"pointInputZ\",\n            ]\n          },\n          { \"pointOutput\" :\n            [\n15\"&gt;              \"pointOutputX\",\n              \"pointOutputY\",\n              \"pointOutputZ\",\n            ]\n          }\n        ],\n        \"extensionAttributes\" : []\n      }\n    }\n  }\n</code></pre> <p>type=affects would output this DOT data:</p> <pre><code>digraph G\n{\n    compound=true;\n    subgraph cluster_NODENAME\n    {\n        label=\"Node NODENAME, Type NODETYPE\";\n        color=\".7 .0 .0\";\n        ia [label=\"ia/inputAttribute\",style=\"rounded\",shape=ellipse];\n        oa [label=\"oa/outputAttribute\",style=\"rounded\",shape=rectangle];\n        ia -&gt; oa;\n    }\n}\n</code></pre> <p>and type=validate would output this JSON validation summary:</p> <pre><code>{\n  \"Attribute Validation\" :\n  {\n    \"NODENAME\" :\n    {\n      \"staticAttributes\" :\n      [\n        {\n          \"Both input and output attributes in compound\" :\n          [\n            { \"root\" : \"rootAttribute\",\n              \"inputs\" : [\"inputChild\"],\n              \"outputs\" : [\"outputChild\"],\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"parallel/#dbpeek-op-cache","title":"dbpeek -op cache","text":"<p>This operation is explained in detail in the Debugging section of the Maya Cached Playback whitepaper.</p>"},{"location":"parallel/#dbpeek-op-cmdtracking","title":"dbpeek -op cmdTracking","text":"<p>By default, when no detail argument is present it shows a list of all commands run since the last reset as well as a count of how many of each type were executed.</p> <p>Outputs in command/count pair form, one per line, with a tab character separating them.</p> <p>Argument</p> <p>Meaning</p> <p>reset</p> <p>Set all of the command tracking statistics to zero</p>"},{"location":"parallel/#dbpeek-op-connections","title":"dbpeek -op connections","text":"<p>By default, when no type argument is present, shows a list of all connections in the DG.</p> <p>Argument</p> <p>Meaning</p> <p>summary</p> <p>Reduces the output to show only the connection counts on the nodes. It separates by single and multi but no further information is added. Useful for getting basic usage information.</p> <p>verbose</p> <p>Shows extra information about every connection, including dirty/propagation states, plug ownership, and type connectivity of the connection. Connections can be single or multi, and be connected either to each other or to plugs.</p>"},{"location":"parallel/#dbpeek-op-data","title":"dbpeek -op data","text":"<p>Dumps the current contents of a node\u2019s plug data in a standard format. By default the output is in CSV format consisting of 5 columns: <code>NODE PLUG DATA_TYPE CLEAN_STATE DATA_AS_TEXT</code></p> <p>Example for a simple integer attribute with a dirty value of 5: <code>MyNode MyPlug Int32 0 5</code></p> <p>Argument</p> <p>Meaning</p> <p>eval</p> <p>Evaluates plugs first to guarantee that they are clean. Note: Some plugs are always dirty so there may still be plugs that show a dirty value.</p> <p>full</p> <p>Includes plugs with default values in the output.</p> <p>json</p> <p>Uses JSON format for the output. The general form is <code>{ \"NODE\" : { \"PLUG\" : { \"TYPE\", \"CLEAN\", \"VALUE\" } } }</code>. For example, a simple numeric attribute with a dirty value of 5 <code>{ \"MyNode\" : { \"MyPlug\", \"0\", \"5\" } }</code></p> <p>matrix</p> <p>Includes all plugs with a \u201cmatrix\u201d data type in the output. This does not include generic data that may have a matrix value at runtime, only attributes that are exclusively matrix types.</p> <p>number</p> <p>Includes all plugs with any numerical data type in the output. This does not include any generic data that may have numerical value at runtime, only attributes that are exclusively numeric types. It includes all types of numeric values, including linear, angular, time, and unitless values.</p> <p>state</p> <p>Includes the current dirty state of the data in the output.</p> <p>time=TIME</p> <p>Rather than evaluating at the normal context, evaluates at a context using the given time. This is somewhat equivalent to getAttr -t TIME.</p> <p>vector</p> <p>Includes all plugs with a \u201cvector\u201d data type in the output. Does not include generic data that may have a vector value at runtime, only attributes that are exclusively double[3] types.</p>"},{"location":"parallel/#dbpeek-op-context","title":"dbpeek -op context","text":"<p>Analyzes context evaluation to detect various errors violating the design.</p> <p>Argument</p> <p>Meaning</p> <p>isolationType=animatedAttributes</p> <p>Filters errors, reporting only those involving animated attributes</p> <p>isolationType=animatedNodes</p> <p>Filters errors, reporting only those involving animated nodes</p> <p>isolationType=staticAndAnimated</p> <p>Reports all errors</p> <p>test=isolation</p> <p>During evaluation, detects when evaluation context is violated causing data to be read or written into a state that belongs to some other evaluation context</p> <p>test=correctness</p> <p>Evaluates the scene in the background, comparing evaluation data stored for background and main context; compares traversing evaluation graph visiting nodes only if all upstream nodes generate equivalent data in both the background and the main context</p> <p>time=TIME</p> <p>Takes a string value indicating the frame time at which evaluation should be performed.</p> <p>verbose</p> <p>Adds extra information to output report. Each test will have its own verbose data. Isolation: Adds callstack information to the report for each detected error. Correctness: Adds attributes which compare failed to compare (due to missing logic)</p> <p>Sample output for isolation tests:</p> <pre><code>{\n    \"context isolation\": {\n        \"frame\": 5.0,\n        \"type\": \"animatedNodes\",\n        \"verbose\": true,\n        \"errors\": [\n            {\n                \"node\": \"ikHandle1\",\n                \"type\": \"ikHandle\",\n                \"attribute\": \"ikFkManipulation\",\n                \"call stack\": [\n                    \"METHOD Line NUMBER\",\n                    \"METHOD Line NUMBER\",\n                    \"METHOD Line NUMBER\"\n                ]\n            },\n            {\n                \"node\": \"shape\",\n                \"type\": \"mesh\",\n                \"attribute\": \"displaySmoothMesh\",\n                \"call stack\": [\n                    \"METHOD Line NUMBER\",\n                    \"METHOD Line NUMBER\",\n                    \"METHOD Line NUMBER\"\n                ]\n            }\n        ],\n        \"time out\": true\n    }\n}\n</code></pre> <p>Sample output for correctness tests:</p> <pre><code>{\n    \"context correctness\": {\n        \"frame\": 14.0,\n        \"verbose\": true,\n        \"errors\": [\n            {\n                \"node\": \"IKSpineCurveShape\",\n                \"type\": \"nurbsCurve\",\n                \"attributes\": [\n                    \"worldSpace\"\n                ]\n            }\n        ],\n        \"failed to compare\": [\n            \"input\",\n            \"clusterXforms\",\n            \"clusterTransforms\",\n            \"target\",\n            \"mySpecialAttribute\"\n        ],\n        \"time out\": true\n    }\n}\n</code></pre>"},{"location":"parallel/#dbpeek-op-edits","title":"dbpeek -op edits","text":"<p>Shows a list of all nodes for which tracking is currently enabled. The \u201ctrack\u201d flag is mandatory.</p> <p>Argument</p> <p>Meaning</p> <p>track</p> <p>Shows a list of all nodes for which tracking is currently enabled.</p>"},{"location":"parallel/#dbpeek-op-evalmgr","title":"dbpeek -op evalMgr","text":"<p>Outputs the current state of all of the custom evaluators used by the Evaluation Manager.</p> <p>Argument</p> <p>Meaning</p> <p>custom</p> <p>Outputs the custom evaluators registered with the evaluation manager.</p> <p>global</p> <p>Adds output that is independent of scene contents, for example, node types enabled for the custom evaluators.</p> <p>local</p> <p>Adds output that is specific to the scene contents, for example, nodes supported by a custom evaluator.</p>"},{"location":"parallel/#dbpeek-op-graph","title":"dbpeek -op graph","text":"<p>Gets a list of nodes or connections from either the dependency graph or the underlying evaluation graph.</p> <p>Argument</p> <p>Meaning</p> <p>connections</p> <p>Dumps the list of all connections in the chosen graph. The sorting order is alphabetical by destination plug name.</p> <p>dot</p> <p>Dumps the graph information in .dot format for parsing and display by an external application such as graphViz.</p> <p>evaluationGraph</p> <p>Gets the structure information from the evaluation graph, otherwise uses the raw dependency graph. The dbpeek command flag \u201cevaluationGraph\u201d does the same thing.</p> <p>graph</p> <p>Dumps the graph state and contents, not including what is dumped by any of the other flags.</p> <p>nodes</p> <p>Dumps the list of all nodes in the chosen type of graph, in alphabetical order by full node name.</p> <p>plugs</p> <p>For the evaluation graph option, dumps the list of all plugs in its dirty plug list in the evaluation nodes. For the DG option, dumps the list of plugs currently in the plug trees.</p> <p>scheduling</p> <p>Dumps the scheduling type used for all nodes in the type of graph in the form NODE = SCHEDULING_TYPE. If a node type is specified, the default scheduling type for nodes of that specific node type is returned in the same format.</p> <p>verbose</p> <p>When dumping the scheduling graph in .dot format, adds all of the names of the nodes to the clusters. Otherwise, it is only a count of nodes in each cluster</p>"},{"location":"parallel/#dbpeek-op-mesh","title":"dbpeek -op mesh","text":"<p>Dumps the current contents of the mesh to a standard format. There are two types of formatting and two levels of detail to present.</p> <p>Argument</p> <p>Meaning</p> <p>eval</p> <p>Evaluates mesh plugs first to guarantee they are clean. Otherwise the values currently present in the mesh shape are used as-is.</p> <p>json</p> <p>Dumps data in JSON format instead of CSV.</p> <p>verbose</p> <p>Puts full values for all of the data in the output. Otherwise, only a number count of each type is returned. See the flag descriptions for more information on which data can be requested and what is returned for each type.</p> <p>vertex</p> <p>Includes vertex position or vertex count in the output. The short return is a count of vertices in the mesh. The verbose values are a list of vertex number and the {X,Y,Z} positions of the vertex, with W factored in, if appropriate.</p> <p>For the default level of detail, the default CSV format output will look like this:</p> <pre><code>NODE_NAME,DATA_TYPE,DATA_COUNT\n</code></pre> <p>For example, a cube containing 32 vertices would have these lines:</p> <pre><code>Node,DataType,Count\npCubeShape1,outMesh,32\n</code></pre> <p>The JSON equivalent format would look like this:</p> <pre><code>{\n    \"pCubeShape1\" : {\n        \"outMesh\" : \"32\"\n    }\n}\n</code></pre> <p>If the full detail is requested, then the (abbreviated) output for CSV format will look like this:</p> <pre><code>Node,Plug,Clean,Value\npCubeShape1,outMesh[0],1,0.0 0.0 0.0\npCubeShape1,outMesh[1],1,0.0 0.5 0.0\n...\npCubeShape1,outMesh[32],1,1.0 1.0 1.0\n</code></pre> <p>and like this for JSON format:</p> <pre><code>{\n    \"pCubeShape1\" : {\n        \"outMesh\" : {\n            \"clean\" : 1,\n            \"0\" : [0.0, 0.0, 0.0],\n            \"1\" : [0.0, 0.5, 0.0],\n            \"...\" : \"...\",\n            \"32\": [1.0, 1.0, 1.0]\n        }\n    }\n}\n</code></pre>"},{"location":"parallel/#dbpeek-op-metadata","title":"dbpeek -op metadata","text":"<p>Shows node metadata. The default operation shows a list of all nodes containing metadata.</p> <p>Argument</p> <p>Meaning</p> <p>summary</p> <p>Shows a single line per node, with metadata indicating how many channels, streams, and values are present in the metadata.</p> <p>verbose</p> <p>Shows a detailed list of all metadata on nodes, including a dump in the debug serialization format for each of the metadata streams.</p>"},{"location":"parallel/#dbpeek-op-node","title":"dbpeek -op node","text":"<p>Show select debugging information on DG nodes. See also the \u201cplug\u201d and \u201cconnection\u201d operations for display of information specific to those facets of a node. If no arguments are used then the ones marked as [default] will all be enabled, for convenience.</p> <p>Argument</p> <p>Meaning</p> <p>datablock</p> <p>[default] Shows the values in the datablock(s)</p> <p>datablockMemory</p> <p>Shows raw datablock memory. This is independent of the other other datablock flags.</p> <p>dynamicAttr</p> <p>Shows dynamic attributes.</p> <p>evaluationGraph</p> <p>[default] Includes evaluation graph information on the node</p> <p>extensionAttr</p> <p>Shows the extension attributes</p> <p>node</p> <p>[default] Shows information specific to individual node types, such internal caches, flags, or special relationships it maintains. All other data shown is common to all node types</p> <p>plug</p> <p>[default] Shows the nodes plug information</p> <p>skipClean</p> <p>Does not include datablock values that are clean</p> <p>skipDirty</p> <p>[default] Does not include the datablock values that are dirty</p> <p>skipMulti</p> <p>Does not include the datablock values that are multi (array) attributes</p> <p>staticAttr</p> <p>Shows the static attributes</p> <p>verbose</p> <p>Shows much more detail where available. This will include things such as flags set on objects, full detail on heavy data, and any extra detail specific to a node type, such as caches.</p>"},{"location":"parallel/#dbpeek-op-nodes","title":"dbpeek -op nodes","text":"<p>By default, when no detail argument is present, shows a list of all currently registered node types.</p> <p>Argument</p> <p>Meaning</p> <p>binary</p> <p>Also includes the IFF tag used to identify each node type in the \u201c.mb\u201d file format</p>"},{"location":"parallel/#dbpeek-op-nodetracking","title":"dbpeek -op nodeTracking","text":"<p>By default, when no argument is present, shows a list of all nodes created since the last reset along with a count of how many of each type were created. Output is in the form of nodeType/count pairs, one per line, with a tab character separating them.</p> <p>Argument</p> <p>Meaning</p> <p>reset</p> <p>Erases all of the node tracking statistics.</p>"},{"location":"parallel/#dbpeek-op-plugs","title":"dbpeek -op plugs","text":"<p>Shows information about all of the plugs in a scene. By default, when no argument is present, shows static plug footprint. A lot of this is only displayed in specially-instrumented builds, and generally only of use internally.</p> <p>Argument</p> <p>Meaning</p> <p>details</p> <p>Includes the full plug/node name information in the output. Otherwise only the total and summary counts are dumped.</p> <p>group=stat</p> <p>Groups all output by statistic name</p> <p>group=node</p> <p>Groups all output by node name</p> <p>mode=footprint</p> <p>Reports size information for currently-existing networked plugs.</p> <p>mode=usage</p> <p>Reports dynamic code path statistics, if they have been enabled in the current build</p> <p>mode=reset</p> <p>When used in conjunction with \u201cusage\u201d, resets the statistics back to zero.</p> <p>mode=state</p> <p>Gets unevaluated state information for boolean plugs. Only available on specially-built cuts.</p> <p>nodeType=TYPE</p> <p>Restricts the operation to the node types specified in the argument. This includes inherited types, for example if the value is \u201ctransform\u201d, then the operation also applies to \u201cjoint\u201d nodes, as the node type \u201cjoint\u201d inherits from the node type \u201ctransform\u201d. See the node type documentation or the nodeType command for complete information on which node types inherit from each other.</p> <p>stat=STAT</p> <p>If this argument has no STAT, then sorts by the name of the statistic. If this argument does have a STAT, for example, \u201cstat=addToNet\u201d, then only reports that statistic. Only available on specially-built cuts.</p>"},{"location":"parallel/#revisions","title":"Revisions","text":""},{"location":"parallel/#2020","title":"2020","text":"<ul> <li>Updated the dbtrace section to add info about:<ul> <li>OGSPolyGhosts</li> <li>cacheConfig</li> <li>evalMgr</li> <li>evalMgrGraphInvalid</li> <li>peekCache</li> <li>peekContext</li> </ul> </li> <li>Added a link in the dbpeek section to details regarding the new cache operation.</li> </ul>"},{"location":"parallel/#2019","title":"2019","text":"<ul> <li>Updated the Key Concepts section.<ul> <li>Added more info about the different graphs (DG, EG, SG).</li> </ul> </li> <li>Added a section about VP2 Integration and Evaluation Manager Parallel Update.</li> <li>Added a section about Tracking Topology for Evaluation Manager Parallel Update.</li> <li>Updated the Custom Evaluators section to describe the new evaluators.<ul> <li>New evaluators:<ul> <li>curveManager (now with its own subsection)</li> <li>cache</li> <li>cycle</li> </ul> </li> </ul> </li> </ul>"},{"location":"parallel/#2018","title":"2018","text":"<ul> <li>Created an Appendices section.<ul> <li>Added a section that describes the Profiler File Format.</li> <li>Moved Debugging Commands section to the Appendices.</li> </ul> </li> <li>Updated the Custom Evaluators section to describe the new evaluators.<ul> <li>New evaluators:<ul> <li>curveManager</li> <li>hik</li> </ul> </li> <li>Added information on isolate-select and expressions to the Invisibility Evaluator</li> <li>Added new deformer types supported in GPU override:<ul> <li>deltaMush</li> <li>lattice</li> <li>nonLinear</li> <li>tension</li> </ul> </li> </ul> </li> </ul>"},{"location":"parallel/#2017","title":"2017","text":"<ul> <li>Added section on graph invalidation.</li> <li>Added information about different ways to query scheduling information (see Thread Safety).</li> <li>Updated the Custom Evaluators section to describe the new evaluators.<ul> <li>New evaluators:<ul> <li>invisibility</li> <li>frozen</li> <li>timeEditorCurveEvaluator</li> </ul> </li> <li>dynamics evaluator support for Parallel evaluation of scenes with dynamics is now enabled by default.</li> </ul> </li> <li>Added Custom Evaluator API section.</li> <li>Added Evaluation Toolkit section.</li> <li>Added Debugging Commands section.</li> <li>Miscellaneous typo fixes and small corrections.</li> </ul>"},{"location":"parallel/#2016-extension-2","title":"2016 Extension 2","text":"<ul> <li>Added tip about the controller command.</li> <li>Updated Other Evaluators subsection in the Custom Evaluators section to describe the new evaluators.<ul> <li>New evaluators:<ul> <li>transformFlattening</li> <li>reference</li> </ul> </li> <li>deformer evaluator is now enabled by default.</li> <li>dynamics evaluator has a new behavior, disabled by default, to support Parallel evaluation of scenes with dynamics.</li> </ul> </li> <li>Updated Evaluator Conflicts subsection in the Custom Evaluators section.</li> <li>Updated Python plug-ins scheduling to Globally Serial.</li> <li>Updated Render-Bound Performance subsection in the Profiling Your Scene section.</li> <li>Added new images for graph examples.</li> <li>Miscellaneous typo fixes and small corrections.</li> </ul>"},{"location":"parallel/#2016","title":"2016","text":"<ul> <li>Initial version of the document.</li> </ul>"},{"location":"physics/","title":"Physics","text":""},{"location":"physics/#constraint","title":"Constraint","text":"<p>Every object in the real world can move along 6 different axes, or 6 \"degrees of freedom\".</p> <ul> <li>Translate X</li> <li>Translate Y</li> <li>Translate Z</li> <li>Rotate X</li> <li>Rotate Y</li> <li>Rotate Z</li> </ul> <p>A constraint limits one or more of these axes.</p> <p>In Maya, the most typical form of constraint is locking a channel. This prevents this axis from changing.</p> <ul> <li>A value &lt; 0 means <code>LOCKED</code>, meaning it may not move along this axis</li> <li>A value = 0 means <code>FREE</code>, meaning it may freely move along this axis</li> <li>A value &gt; 0 means <code>LIMITED</code>, meaning it may move within the limited range of this axis</li> </ul> <p></p>"},{"location":"physics/#soft-constraints","title":"Soft Constraints","text":"<p>Limits above 0 are referred to as \"soft\", because their amount of influence can be tuned using the <code>Stiffness</code> and <code>Damping</code> attributes. These can safely flex and can approach that of a hard constraint given enough stiffness and damping, but would struggle to reach a given target 100%.</p> <p></p>"},{"location":"physics/#hard-constraints","title":"Hard Constraints","text":"<p>Limits below 0, typically -1, are referred to as \"hard\", because their influence is infinite. These should never flex, as even the slightest amount of flex means the constraint has broken. Leaving the solver in a poor state, struggling to keep up.</p>"},{"location":"quick-tail-setup/","title":"Quick tail setup","text":"<p>In this tutorial you'll learn how to setup a tail with physics and how to steer the look and feel of the simulation using normal keyframing techniques. We'll use one of the excellent rigs by Truong CG Artist.</p> <p>Optional example files</p> <ul> <li>falloff_example.zip</li> </ul> <p></p>"},{"location":"quick-tail-setup/#walkcycle","title":"Walkcycle","text":"<p>Let's start with a walkcycle, and move towards interacting with the environment.</p>"},{"location":"quick-tail-setup/#apply-simulation","title":"Apply Simulation","text":"<p>Select the hip followed by each tail control along the tail in order, and click Create Dynamic Control.</p> <p></p>"},{"location":"quick-tail-setup/#reduce-gravity","title":"Reduce Gravity","text":"<p>This particular rig is very small, about 1.6 cm tall, so we need to reduce the default Gravity to reflect this.</p> <p></p>"},{"location":"quick-tail-setup/#global-strength","title":"Global Strength","text":"<p>The first selected Dynamic Control contains a Guide Multiplier to influence the strength on all of the tail controls at the same time.</p> <p></p>"},{"location":"quick-tail-setup/#local-strength","title":"Local Strength","text":"<p>You can also adjust the strength values individually for each joints, to taper their stiffness along the length of the tail.</p> <p></p>"},{"location":"quick-tail-setup/#strength-falloff","title":"Strength Falloff","text":"<p>Let's taper the strength along the length of the tail.</p> <p></p>"},{"location":"quick-tail-setup/#result","title":"Result","text":"<p>Let's see how it looks.</p> <p></p> <p></p>"},{"location":"quick-tail-setup/#sitting-down","title":"Sitting Down","text":"<p>Now let's see how to steer our simulation with regular keyframes.</p>"},{"location":"quick-tail-setup/#switch-to-animation","title":"Switch to Animation","text":"<p>The simulation will try to follow your keyframe animation. Just switch off the <code>Simulated</code> attribute on the root control while you're animating, then switch it back on to see how it looks.</p> <p></p>"},{"location":"quick-tail-setup/#animation-vs-simulation","title":"Animation vs Simulation","text":"<p>You can see the animation input on the left and the resulting simulation on the right. With just 3 keyframed poses we end up with this result. Note that I had to overcompensate my animation poses to fight gravity when the tail swings around.</p> <p></p> <p></p>"},{"location":"quick-tail-setup/#advanced-control","title":"Advanced Control","text":"<p>Gain even more fine-grained control with these advanced topics.</p>"},{"location":"quick-tail-setup/#flex-and-relax-muscles","title":"Flex and Relax Muscles","text":"<p>By keyframing the root strength multiplier you can flex or relax the muscles in the tail. The higher the value the stiffer it gets and the lower the value the more relaxed it becomes, allowing gravity to drop it to the ground.</p> <p></p>"},{"location":"quick-tail-setup/#damping","title":"Damping","text":"<p>Damping controls how fleshy and sluggish your simulation behaves.</p> <p></p> <p>Low or zero damping preserves more energy in the system, making a simulation more elastic or rubbery. Creatures and humans tend to look best with moderate to high damping values.</p>"},{"location":"sdk/","title":"SDK","text":"<p>The Ragdoll SDK is not Object Oriented, it is Data-Oriented in the form of an Entity Component System (ECS).</p> Concept Is A Description Entity <code>unsigned int</code> Represents a \"thing\", like a marker, group and solver Component <code>struct</code> Represents some data, like a name, position and color System <code>for-loop</code> Represents some operation on said data <p>Stay Tuned</p> <p>This is where you'll find documentation for Ragdoll Core.</p>"},{"location":"tutorials/","title":"Tutorials","text":"<p>Learn about Ragdoll from the ground up with these short videos.</p> <ol> <li>Bouncing Ball</li> <li>Videos</li> <li>Manikin I</li> <li>Manikin II</li> <li>Manikin and IK</li> <li>Ragdog</li> <li>Cloth Emulation</li> <li>Mocap Chap</li> <li>Rookie Wasp</li> <li>Self-Walking Rhino</li> </ol>"},{"location":"blender/download/","title":"Download","text":""},{"location":"blender/download/#download","title":"Download","text":"Download for Blender 3.4 to 4.3 <p>This addon is licenced under the MIT licence</p> Windows &amp; Linux <p>Ragdoll 2025.01.01 awaits. Read about it -     Previous versions </p> <p>Join the community of ragdollers on Discord and/or Discourse.</p> GitHub Chat Forums Version Notes 2025.01.01 Added support for Blender 4.3 2024.06.30 Stability fixes, including fix for \"ghost markers\" that appear after re-opening file 2024.05.23 Fix for integrated Intel and AMD GPUs 2024.05.21 Snap to Simulation works with either Record Rotation or Record Translation Snap to Simulation works with Euler, Axis-Angle and Quaternion mode 2024.05.18 Made Snap to Simulation take Record Translation and Record Rotation into account 2024.04.09 Added Merge Physics, Export Physics and more See all <p></p>"},{"location":"blender/download/#install","title":"Install","text":"<p>Ragdoll for Blender is a bridge between Ragdoll Core and Blender, and ships as a platform independent Addon.</p> <p>To install the addon, you do what you'd normally do for addons, via the \"Install\" button in Blender's preferences.</p> <ol> <li>In Blender, go to <code>Edit &gt; Preferences...</code></li> <li>Go to the <code>Add-ons</code> page</li> <li>Click <code>Install..</code> and select <code>RagdollBlender.zip</code> you downloaded above</li> <li>Search for <code>Ragdoll</code></li> <li>Enable the Addon</li> </ol> <p></p> <p></p> <p>Next, you'll need Ragdoll Core. Which is the engine that performs the actual physics computations.</p> <ul> <li>Download Ragdoll Core</li> </ul> <p></p>"},{"location":"blender/download/#upgrade","title":"Upgrade","text":"<p>When a new version of Ragdoll hits the shelves, here's what you do.</p> <ol> <li>Remove your existing Ragdoll Addon</li> <li>Follow the above Install steps</li> </ol> <p></p>"},{"location":"blender/download/#licence","title":"Licence","text":"<p>Upon loading the addon, Ragdoll will automatically start the clock on a 1-month trial.</p> <p>To carry on from your trial, you can purchase a new licence via our website.</p> <ul> <li>Purchase a new Licence</li> </ul> <p>You'll receive a serial which you can enter via the bottom item of the Ragdoll menu.</p> <p> </p> <p>Enter your serial in the bottom text field and press Activate.</p> <p>Issues?</p> <p>Let us know if you run into any issues at licencing@ragdolldynamics.com</p> <p></p>"},{"location":"blender/download/#using-ragdoll","title":"Using Ragdoll","text":"<p>Once the addon has been enabled, you'll find a few new elements in your Blender UI.</p> <p></p> <ol> <li>With a Ragdoll solver in the scene, you'll be able to manipulate it interactively via this icon</li> <li>Any and all new Ragdoll objects end up in this group, for easy organisation</li> <li>Any properties to control the Ragdoll simulation end up in this tab</li> <li>Finally, the entrypoint to all things Ragdoll</li> </ol> <p></p> <ol> <li>(You can also use the search panel to find all Ragdoll operators)</li> </ol> <p></p>"},{"location":"blender/download/#learning-material","title":"Learning Material","text":"<p>We're working on material explicitly for Blender, until then feel free to enjoy the tutorials for Maya, as the workflow is near identical:</p> <ul> <li>Tutorials</li> <li>More Tutorials</li> <li>Tips and Tricks</li> <li>Documentation</li> </ul> <p></p>"},{"location":"blender/download/#questions","title":"Questions","text":"<p>Let us know on our forums, we'll keep updating this page with new releases.</p>"},{"location":"blender/home/","title":"Blender","text":""},{"location":"blender/home/#ragdoll-in-blender","title":"Ragdoll in Blender","text":"<p>Welcome to Ragdoll in Blender, first released in February of 2024 and with support for versions 3.4 up to 4.0.</p>"},{"location":"blender/reference/","title":"Reference","text":""},{"location":"blender/reference/#manipulator","title":"Manipulator","text":"<p>With Industry Standard keymapping, the Manipulator has a default interaction model.</p> <ul> <li>Primary Documentation</li> </ul> <p>With native Blender keymapping, the Middle-mouse button is occupied so instead:</p> Action Key Translate Ctrl + LMB Scale Ctrl + Shift + LMB Rotate Ctrl + Alt + LMB <p></p>"},{"location":"blender/reference/#properties","title":"Properties","text":"<p>Ragdoll exposes several properties you can use to tune your simulation, divided into several \"archetypes\". One of which is the physics solver itself, responsible for overall settings like start and end frames and quality parameters such as <code>Substeps</code>.</p> <p></p>"},{"location":"blender/reference/#rsolver","title":"rSolver","text":"<p>Responsible for overall simulation settings and keep track of what to include in the physics world.</p> <p></p> Property Description Enabled Whether to simulate or not Export Include this solver when exporting the Ragdoll file to disk Cache Keep simulated frames for the next time you playback your scene Start Time When to start simulating Simulate Every X Frames Enable stop-motion like simulation Substeps Divide every Blender frame into this many \"sub steps\", improves quality at the expense of performance Iterations Try this many times to solve each internal physics constraint Air Density The effect of air, 0 means space and 10 means water Gravity Force applied to all Markers in the solver, to emulate gravity Time Scale Slow motion, or not Scene Scale When your character is not at a realistic e.g. 1.8m height, use this to compensate <p></p>"},{"location":"blender/reference/#rmarker","title":"rMarker","text":"<p>Tracker for your animation controls, like the red pill in The Matrix. This transmits information about each control to Ragdolll, such that it knows where to go and at which strength.</p> <p></p> Property Description Enabled Whether to include this rMarker in the rSolver Export Include this Marker when exporting Behaviour Whether to simulate the control, or treat it as pure animation. The default is to inherit the value from the rGroup Translate Motion Should the control be allowed to translate? Rotate Stiffness The \"strength\" at which to follow the animation control Rotate Damping The \"resistance\" at which to follow the animation control <p></p>"},{"location":"blender/reference/#rgroup","title":"rGroup","text":"<p>Control the stiffness of multiple markers at once.</p> <p></p> Property Description Enabled Whether to include this rMarker in the rSolver Export Include this Group when exporting Self Collide Allow contained Markers to collide with each other Translate Motion Should the controls in this group be allowed to translate? Rotate Stiffness Multiply this value with every Markers contained in the group Rotate Damping Likewise, multiply this value with every Markers contained in the group <p></p>"},{"location":"blender/reference/#workspace-tool","title":"Workspace Tool","text":"<p>On the left-hand side you'll find the Ragdoll <code>Manipulator</code>. This is where you can manipulate shapes and limits, along with entering into Live Mode to interactively pose your character and verify thet contacts and limits behave to your liking.</p> <p></p> <p></p>"},{"location":"blender/reference/#collection","title":"Collection","text":"<p>Any new Ragdoll object is automatically added to a <code>Ragdoll</code> collection.</p> <p></p>"},{"location":"blender/tutorials/advanced_setup/","title":"Advanced Character Setup","text":""},{"location":"blender/tutorials/advanced_setup/#advanced-character-setup","title":"Advanced Character Setup","text":"<p>An advanced course in how to setup a character in Blender with Ragdoll.</p> <ul> <li>00:00 Setup</li> <li>01:20 Assigning Markers</li> <li>02:53 IK Legs</li> <li>05:52 Tuning Shapes</li> <li>07:45 Replace Meshes</li> <li>08:45 Preview Current State</li> <li>09:55 Anatomical Limits</li> <li>20:55 Self Collisions</li> <li>23:35 Retargeting</li> <li>28:20 Split Mesh</li> <li>30:10 Playing Around</li> </ul> <p></p> <p>Comments</p> <ul> <li>https://forums.ragdolldynamics.com/t/advanced-character-setup/1359</li> </ul>"},{"location":"blender/tutorials/manikin/","title":"Manikin I","text":""},{"location":"blender/tutorials/manikin/#manikin","title":"Manikin","text":"<p>\"Make your own motion reference\"</p> <p>In this tutorial, we will setup a human-like character for use as reference or constraint target to your rig. You will be able to pose and position this Manikin like you would a real Manikin, and drop it from various heights and onto various obstacles to produce realistic poses as it falls.</p> <p>Something the animator can import and throw around for reference on how it would look like.</p> <p>Version 1.0 - Up to date</p> <p>Written for Ragdoll <code>2024.02.25</code> and above.</p> <p>Estimated Time</p> <ul> <li>\ud83d\udd50 10 minutes</li> </ul> <p>You will learn</p> <ul> <li>\u2714\ufe0f How to apply markers onto rig controls</li> <li>\u2714\ufe0f How to tune the collision shapes of the markers</li> <li>\u2714\ufe0f How to record your simulation back onto the rig controls</li> </ul> <p>Where to find help</p> <p>If you find or run into any issues with this tutorials, here's what you can do.</p> <ul> <li>\u2714\ufe0f Ask in the chat</li> <li>\u2714\ufe0f Ask on the forums</li> </ul> <p></p>"},{"location":"blender/tutorials/manikin/#bring-your-own-rig","title":"Bring Your Own Rig","text":"<p>Follow this tutorial either using our provided Manikin rig, or your own character. It can have any number of limbs.</p> <p></p> Download Manikin Download Final Scene <p></p>"},{"location":"blender/tutorials/manikin/#motivation","title":"Motivation","text":"<p>Why should we even bother simulating a character?</p> <p>Finding motion reference is one of the most important activities for any animator. And yet I can safely challenge you to find reference for perhaps the most common motion in all blockbuster movies today, something that is either impossible or dangerous for actors or animators alike.</p> <p></p> <p>Or how about reference of someone simply falling over, perhaps from heat stroke or staring into the sun.</p> <p>This is, after all, one of the major reasons for pursuing computer graphics in storytelling rather than real people.</p> <p>Animators bring life to characters, but of equal challenge is that of lifelessness. Of natural and realistic motion without someone behind the wheel. Be it getting hit or shot, blasted or thrown, animating lifelessness is enough to challenge even the most senior of animators.</p> <p>As you will find, there is a lot more we can do once our motion reference is in 3D, on our actual character rig within Maya and infinitely customisable. As opposed to some video on the internet.</p> <p></p>"},{"location":"blender/tutorials/manikin/#setup","title":"Setup","text":"<p>Open your chosen character rig or download the above Manikin rig to get started.</p> <p>Play around with the controls to get a feel for what we're working with.</p> <p></p> <p>FK or IK</p> <p>Use FK for this tutorial</p> <p>This Manikin rig has FK and IK (legs) controls, but we will focus on FK controls for this tutorial to keep things simple.</p> <p></p>"},{"location":"blender/tutorials/manikin/#simulation","title":"Simulation","text":"<p>The stage is set, now let's apply physics!</p> <p></p>"},{"location":"blender/tutorials/manikin/#torso","title":"Torso","text":"<p>Let's start with the Torso.</p> <ol> <li>Select <code>hip_ctl</code></li> <li>Shift select <code>torso_ctl</code></li> <li>Shift select <code>head_ctl</code></li> <li>Run <code>Assign and Connect</code></li> </ol> <p>This will produce our first <code>Group</code>, which is a collection of connected <code>Markers</code>.</p> <p>New Concept</p> <p>Group</p> <p>The <code>rdGroup</code> node contains attributes that affect all contained markers. It's where you'd edit the overall look and feel of your character, like how stiff it should be and whether or not body parts should collide with each other.</p> <p>Each Marker can either inherit or otherwise override these values.</p> <p></p> <p>Assignable Objects</p> <p>These objects can have Markers assigned to them in Blender.</p> <ul> <li>Mesh Object</li> <li>Pose Bone</li> </ul> <p></p>"},{"location":"blender/tutorials/manikin/#left-arm","title":"Left Arm","text":"<p>Next we will continue from the <code>torso_ctl</code> and out into the arms.</p> <ol> <li>Select the <code>torso_ctl</code></li> <li>Shift select <code>L_clavicle_ctl</code></li> <li>Shift select <code>L_upperArm_ctl</code></li> <li>Shift select <code>L_lowerArm_ctl</code></li> <li>Shift select <code>L_hand_ctl</code></li> <li>Run <code>Assign and Connect</code></li> </ol> Is the order important? <p>Yes, the order in which you select will determine how the markers are connected.</p> <p>Your first selection is extra important, as it determines whether to start a new group, like for the <code>hip_ctl</code>, or to add to an existing group, like the <code>torso_ctl</code>.</p> <p>In this case, we would very much like our arm to be connected to the torso.</p> Can I skip the clavicles? <p>Yes, if you have extra controls - such as <code>twist</code> or <code>bend</code> - you can skip these if you don't care to simulate them.</p> <p>Simply skip over them as you select, from <code>torso_ctl</code> directly to <code>L_upperarm_ctl</code>.</p> <p></p> <p></p>"},{"location":"blender/tutorials/manikin/#right-arm","title":"Right Arm","text":"<p>Now repeat the above process for the other arm.</p> <p></p> <p></p>"},{"location":"blender/tutorials/manikin/#legs","title":"Legs","text":"<p>Now let's continue down the hips and into the legs.</p> <ol> <li>Select the <code>hip_ctl</code></li> <li>Shift select <code>L_thigh_ctl</code></li> <li>Shift select <code>L_knee_ctl</code></li> <li>Shift select <code>L_foot_ctl</code></li> <li>Run <code>Assign and Connect</code></li> </ol> <p></p> <p></p>"},{"location":"blender/tutorials/manikin/#drop-test","title":"Drop Test","text":"<p>That's enough setup, let's drop him!</p> <p>New Concept</p> <p>Behaviour</p> <p>Each Marker has a \"behaviour\", which tells Ragdoll it should interpret the control it has been assigned. Should it fall with gravity? Should it try and match the pose? Should it remain fully animated, even in simulation?</p> <ol> <li>Go to Object Mode</li> <li>Select <code>rMarker_Armature_hip_ctl</code></li> <li>Go to the Physics tab of the Property Panel</li> <li>Set <code>Behaviour = Simulated</code> of the Marker</li> <li>Drop the Manikin a few times</li> </ol> <p></p> <p>The default behaviour for <code>Assign and Connect</code> is to give the first selection - the \"root\" - a <code>Animated</code> behaviour.</p> <p>What does Animated mean?</p> <p>Animated means \"copy the animation into simulation and make no changes to it\"</p> <p>By instead setting this to <code>Simulated</code>, then Ragdoll will only use the animation for the starting position and orientation of the simulation.</p> <p>Inherit</p> <p>Alternatively, you can set it to <code>Inherit</code> to have it inherit the value of the <code>rGroup</code> node that was created for the whole character.</p> <p></p>"},{"location":"blender/tutorials/manikin/#tuning","title":"Tuning","text":"<p>Next let's address the elephant in the room; the shapes. They look awful.</p> <p></p> <p></p>"},{"location":"blender/tutorials/manikin/#volumes","title":"Volumes","text":"<p>The shape of each collider affects your simulation in 2 ways.</p> <ul> <li>Contact Points</li> <li>Rotation Mass</li> </ul> <p>The contact point can be important if your character interacts with an environment or another character. Like in this case where the feet are incorrectly colliding with the ground because of a bad shape.</p> <p></p> <p>That's not always the case though, sometimes you just want overlapping motion without contacts in which case the shapes won't matter.</p> <p>They do however also affect their resistance to rotation. Consider this.</p> <p></p> <p>Here, we rotate the exact same shapes, the exact same amount in the exact same amount of time. And yet they respond differently.</p> <p>This shape has vastly different dimensions in the X, Y and Z directions, resulting in a different rotation mass for each one. As a result, the effort required to rotate it in each axis differs too.</p> <p>In practice, you'll find this for just about any limb on a character, which is typically longer in one axis. For our Manikin, this is especially true for the default clavicle shapes.</p> <p>Override Rotate Mass</p> <p>In some cases, you have a shape but want it to act like a different shape. <code>Rotate Mass</code> is very similar to normal <code>Mass</code>, except in 3 dimensions. Where the position of an object is affected equal in X, Y and Z directions, rotations have 3 separate masses.</p> <p></p>"},{"location":"blender/tutorials/manikin/#shapes","title":"Shapes","text":"<p>With this in mind, let's tune some shapes.</p> <ol> <li>Go to Object Mode</li> <li>Activate the Manipulator tool</li> </ol> <p>This brings up the Manipulator interface, where you can manipulate shapes interactively.</p> <p></p> <p>Great, now let's turn those hands and feet into boxes.</p> <p></p> <p>Translate, Rotate and Scale</p> <p>Notice I'm using the..</p> <ul> <li>Middle-Mouse Button to <code>Translate</code></li> <li>CTRL + Middle-Mouse Button to <code>Rotate</code></li> <li>CTRL + Left-Mouse Button to <code>Scale</code></li> </ul> <p>The help text screen-right will help you remember these.</p> <p>Greater Value Step</p> <p>While dragging the value on Manipulator UI panel, you may hold <code>Shift</code> to increase value changing step.</p> <p>Symmetry</p> <p>Also notice the edits are symmetrical; even when they don't start out that way like the feet!</p> <p></p>"},{"location":"blender/tutorials/manikin/#recording","title":"Recording","text":"<p>That's all there is for setting up your character rig for simulation! Let's now transfer the simulation back onto the rig.</p> <ol> <li>Run <code>Record Simulation</code></li> <li>Enjoy</li> </ol> <p></p> <p></p>"},{"location":"blender/tutorials/manikin/#next-steps","title":"Next Steps","text":"<p>Visit our forums and YouTube channel for latest up to date material!</p> <ul> <li>https://forums.ragdolldynamics.com</li> <li>https://www.youtube.com/@RagdollDynamics</li> </ul>"},{"location":"blender/tutorials/merge_solvers/","title":"Merge Solvers with Auto Rig Pro","text":""},{"location":"blender/tutorials/merge_solvers/#merge-solvers","title":"Merge Solvers","text":"<p>An example of how to setup a character, append it twice to one scene, and merge their solvers for character-to-character interactions.</p> <ul> <li>00:00 Intro</li> <li>06:00 Tuning shapes</li> <li>10:33 Retargeting</li> <li>13:10 Recording</li> </ul> <p></p>"},{"location":"blender/tutorials/pickup/","title":"Pickup","text":""},{"location":"blender/tutorials/pickup/#pickup","title":"Pickup","text":"<p>A few weeks ago, Kojima Productions dropped a first trailer for Death Stranding 2, where they leveraged Ragdoll for a puppet being tossed around.</p> <ul> <li>https://youtu.be/4NSjsZcojMM?t=178</li> <li>https://youtu.be/4NSjsZcojMM?t=367</li> </ul> <p>While we await a breakdown from Kojima, we threw together our own breakdown and tutorial of how it could be made with Blender.</p> <p>Enjoy :)</p> <ul> <li>01:19 Loading built-in assets</li> <li>01:25 Re-scaling of ragdolls</li> <li>01:35 Working with Scene Scale</li> <li>02:15 Snap to Simulation for Starting Pose</li> <li>03:10 Offsetting the Armature</li> <li>04:00 Removing left-over animation</li> <li>04:21 Second armature</li> <li>05:35 Reparent string to back</li> <li>06:00 Re-scaling the ground</li> <li>06:45 Tuning string behaviour</li> <li>07:00 Pick up string</li> <li>07:35 Posing the string</li> <li>07:50 Tuning string shapes</li> <li>08:35 Assigning to the Mixamo character</li> <li>09:00 Replacing meshes</li> <li>09:30 Separate meshes</li> <li>10:40 Animated Mixamo character</li> <li>11:40 Disabling Contacts</li> <li>12:10 Attaching string to finger</li> <li>13:00 Disabling pin translate stiffness</li> <li>13:30 Adjusting pin pivot</li> <li>14:00 Animating pin constraint on/off</li> <li>14:35 Tuning pin constraint</li> <li>15:25 The effect of mass</li> <li>16:10 Tuning the string</li> <li>16:40 The effect of 0 stiffness</li> <li>17:10 Tuning the manikin</li> <li>18:00 Coming alive</li> <li>18:35 Live Mode Posing</li> <li>20:55 Waking up with Rotate Stiffness</li> <li>21:10 More jiggle</li> <li>21:50 Normal keyframing</li> <li>23:00 Controlling the global facing direction</li> <li>27:00 Fainting towards the end</li> </ul> <p></p> <p>Comments</p> <ul> <li>https://forums.ragdolldynamics.com/t/pickup-with-motion-capture-in-blender/1277</li> <li>https://blenderartists.org/t/ragdoll-early-access/1515820/39</li> </ul>"},{"location":"blender/tutorials/slapsass1/","title":"Slap'n'Sass","text":""},{"location":"blender/tutorials/slapsass1/#slapnsass","title":"Slap'n'Sass","text":"<p>For Blender users but also applicable to Maya. This one is about tweaking existing animation, such as motion capture, with physical parameters to create variations and generally just have fun. </p> <p>It uses a motion capture clip from Mixamo and applies physics to just one arm at first, followed by the second arm for some different kind of dance moves.</p> <p>Any questions, feel free to ask here or on YouTube, we'll be on the lookout!</p> <ul> <li>00:00 Introduction</li> <li>00:35 Loop Original Animation</li> <li>01:25 Symmetrical Assignment</li> <li>02:04 Assigning Markers</li> <li>02:35 Tuning Shapes</li> <li>03:20 Initial Playthrough</li> <li>03:40 New Start Frame</li> <li>04:30 Tuning Stiffness</li> <li>06:10 Limits for Slap</li> <li>07:10 First Recording</li> <li>08:05 Undo and Continue</li> <li>08:20 Adding the Other Arm</li> <li>09:40 No Gaps</li> <li>10:50 Tuning Stiffness 2</li> <li>11:30 Sass</li> <li>12:40 Finger Limits</li> <li>14:05 Tuning the Final Result</li> <li>14:45 Add Leg Colliders</li> <li>16:15 Final Result</li> </ul> <p></p> <p>Comments</p> <ul> <li>https://forums.ragdolldynamics.com/t/slapnsass-with-blender/1324</li> </ul>"},{"location":"blender/tutorials/slapsass2/","title":"Slap'n'Sass 2","text":""},{"location":"blender/tutorials/slapsass2/#slapnsass-2","title":"Slap'n'Sass 2","text":"<p>A continuation of Slap'n'Sass 1 from the other day, this time simulating the entire character rather than just the arms, covering:</p> <ul> <li>00:00 Introduction</li> <li>01:00 Assigning Markers</li> <li>02:10 Looping Animation</li> <li>02:50 Separate by Loose Parts</li> <li>04:00 Replacing Meshes</li> <li>04:30 Joining Meshes</li> <li>05:30 Simulated Hip</li> <li>06:00 Tuning Stiffness</li> <li>06:50 Self Collisions</li> <li>07:15 Transitioning from Animation to Simulation</li> <li>07:55 Appearing Dead</li> <li>09:10 Initial Recording</li> <li>09:55 Recording into a new Action</li> <li>11:00 Adding Fingers</li> <li>12:40 Finger Limits</li> <li>14:15 Recording</li> <li>14:50 Final Render</li> </ul> <p></p> <p>Comments</p> <ul> <li>https://forums.ragdolldynamics.com/t/slapnsass-part-2-with-blender/1338</li> </ul>"},{"location":"blog/20201215_cmdx/","title":"cmdx","text":""},{"location":"blog/20201215_cmdx/#prelude","title":"Prelude","text":"<p>Talk about cmdx and why it's necessary.</p> <p></p>"},{"location":"blog/20201215_cmdx/#overview","title":"Overview","text":"<p>Some idea of what cmdx even is.</p> <p></p>"},{"location":"blog/20201215_cmdx/#end","title":"End","text":""},{"location":"blog/20201216_high_dpi_and_px/","title":"20201216 high dpi and px","text":""},{"location":"blog/20201216_high_dpi_and_px/#ui-and-resolution-scaling","title":"UI and Resolution Scaling","text":"<p>Read about how Ragdoll implements resolution scaling, to support scalable UIs on modern high-resolution displays.</p> <p></p>"},{"location":"blog/20201216_high_dpi_and_px/#tldr","title":"TL;DR","text":"<p>Here's a standalone version of the function I'll be walking you through, requires Maya 2017 (Qt 5) and above (due to <code>QScreen</code>).</p> <pre><code>def px(value):\n    if not hasattr(px, \"dpi\"):\n        any_widget = QtWidgets.QWidget()\n        any_widget.setWindowFlags(QtCore.Qt.ToolTip)\n        any_widget.show()\n        window = any_widget.windowHandle()\n        scale = window.screen().logicalDotsPerInch() / 96.0\n        px.dpi = scale\n\n    return value * px.dpi\n</code></pre> <p></p>"},{"location":"blog/20201216_high_dpi_and_px/#what-is-resolution-scaling","title":"What is Resolution Scaling?","text":"<p>Most displays have resolutions beyond the traditional 1080p, which makes text and graphics overly small. To account for this, operating systems have implemented \"resolution scaling\"; which is some factor to scale text and graphics by when drawing it on screen.</p> <p>Maya added (early and crude) support for resolution scaling in Maya 2016 with a usable and mostly transparent version landing in 2018 and beyond.</p> <p>Building UIs with Maya's native MEL-based UI tools account for scaling automatically, so you generally don't have to think about it. Unfortunately, for any non-trivial Qt project however you'll need to actively implement and maintain support for it.</p> <p>Ragdoll does this, and here's how.</p> <p></p>"},{"location":"blog/20201216_high_dpi_and_px/#implementation","title":"Implementation","text":"<p>In short, any mention pixels run through a conversion function like this.</p> <pre><code># setFixedWidth(50)    # Before\nsetFixedWidth(px(50))  # After\n</code></pre> <p>Where <code>px()</code> looks something like this.</p> <pre><code>def px(value):\n    return value * 1.5\n</code></pre> <p>That goes for stylesheets as well.</p> <pre><code>style = \"\"\"\n    QPushButton {\n        width: 50px;\n    }\n\"\"\"\nstyle = convert_px(style)\nsetStyleSheet(style)\n</code></pre> <p>Where <code>convert_px()</code> looks something like..</p> <pre><code>def convert_px(style):\n    lines = []\n    for line in style.splitlines();\n        if \"px\" in line:\n            # Find them and destroy them\n    return \"\\n\".join(lines)\n</code></pre> <p>But where does this magical <code>1.5</code> value come from? The value depends on your display scale factor, or more precisely whichever scale factor Maya is currently working with.</p> <p>On Windows, the scale factor is set under your Display settings and Linux's various display managers have something like it.</p> <p></p> <p>You can read this straight from the operating system, but the more cross-platform method would be to lean on Qt. Unfortunately, the Qt documentation for resolution scaling is a good representation of how confusing resolution scaling is amongst UI developers at large.</p> <ul> <li>https://doc.qt.io/qt-5/highdpi.html</li> </ul> <p>Because you have (1) an application scale, (2) an operating system scale and (3) a physical monitor scale; each of which combine in non-obvious ways to produce the final pixel coordinate on screen.</p> <p>What is the difference between \"Physical DPI\" and \"Logical DPI\"? Where does \"Device Pixel Ratio\" come into the picture?</p> <p>Here's what you need to know.</p> <pre><code>scale = logicalDpi / 96.0\n</code></pre> <p>The value you'll end up with is <code>1.0</code> for a non-scaled display, such as your everyday 1080p monitor, and <code>1.5</code> or <code>2.0</code> for greater resolutions. If your OS allows, you could get values inbetween or greater, and although text scales somewhat well to any value, graphics shipped with Ragdoll is scaled at <code>2.0</code> which means it'll look best at <code>1.0</code>, <code>1.5</code> and <code>2.0</code>. Anything else will likely introduce blur.</p> <p>But wait, where does <code>logicalDpi</code> come from, and what's this magical <code>96.0</code>?</p> <p>Qt can provide that for you, but not without a fight.</p> <pre><code>window.\n</code></pre>"},{"location":"blog/20201217_option_dialogs/","title":"20201217 option dialogs","text":"<p>Talk about qargparse and why it's necessary.</p>"},{"location":"blog/20201218_optionvar/","title":"20201218 optionvar","text":"<p>Maya's native persistent preferences, with support for access from C++.</p>"},{"location":"blog/20201219_pythonreload/","title":"20201219 pythonreload","text":"<p>Talk about how you iterate in Maya, reloading all modules by namespace and what to look out for. Especially undo. And always having an uninstall.</p>"},{"location":"blog/20210325_view_to_pixmap/","title":"20210325 view to pixmap","text":"<p>Write about this.</p> <pre><code>def view_to_pixmap(size=None):\n    \"\"\"Render currently active 3D viewport as a QPixmap\"\"\"\n\n    # Python 2 backwards compatibility\n    try:\n        long\n    except NameError:\n        long = int\n\n    image = om.MImage()\n    view = omui.M3dView.active3dView()\n    view.readColorBuffer(image, True)\n\n    # Translate from Maya -&gt; Qt jargon\n    image.verticalFlip()\n\n    osize = size or QtCore.QSize(512, 256)\n    isize = image.getSize()\n    buf = ctypes.c_ubyte * isize[0] * isize[1]\n    buf = buf.from_address(long(image.pixels()))\n\n    qimage = QtGui.QImage(\n        buf, isize[0], isize[1], QtGui.QImage.Format_RGB32\n    ).rgbSwapped()\n\n    return QtGui.QPixmap.fromImage(qimage).scaled(\n        osize.width(), osize.height(),\n        QtCore.Qt.KeepAspectRatio,\n        QtCore.Qt.SmoothTransformation\n    )\n\n\ndef pixmap_to_base64(pixmap):\n    array = QtCore.QByteArray()\n    buffer = QtCore.QBuffer(array)\n\n    buffer.open(QtCore.QIODevice.WriteOnly)\n    pixmap.save(buffer, \"png\")\n\n    return bytes(array.toBase64())\n\n\ndef base64_to_pixmap(base64):\n    data = QtCore.QByteArray.fromBase64(base64)\n    pixmap = QtGui.QPixmap()\n    pixmap.loadFromData(data)\n    return pixmap\n</code></pre>"},{"location":"blog/20210409_littlebits_locatorshotkey/","title":"20210409 littlebits locatorshotkey","text":"<p>Write about the script for toggling locators in the viewport, alongside curves and meshes. A workflow tip. A short one. A \"Little Bits\". :D</p>"},{"location":"blog/20210420_bugfree/","title":"20210420 bugfree","text":"<p>The bug-free software guarantee.</p> <ol> <li>Find a bug, get a free licence</li> <li>If you already have a licence, get the next one free (incentive to find bugs in the 2-4 week trial period)</li> <li>What if everyone finds a bug, and everyone gets a free licence? That's OK. If nobody is able to use Ragdoll without finding a bug, Ragdoll does not deserve payment.</li> </ol> <p>Requirements:</p> <ol> <li>Bug must be reproducible in the latest version</li> <li>Bug must not already have been reported, first-come first-served (tracked via GitHub issues)</li> <li>But must not already be known (tracked via GitHub)</li> </ol>"},{"location":"blog/20210422_escapehatch/","title":"20210422 escapehatch","text":"<p>Always give users a way to circumvent protections and to workaround issues without waiting for a new update (which could be days or weeks).</p>"},{"location":"blog/20210531_backend/","title":"20210531 backend","text":"<p>The month of May 2021 was spent authoring the frontend and backend of the ragdolldynamics.com website. Let's have a look at what makes it tick.</p> <p></p>"},{"location":"blog/20210531_backend/#overview","title":"Overview","text":"<p>Here's life of the website in a nutshell.</p> <ol> <li>1,500 lines of Markdown/HTML</li> <li>2,000 lines of CSS</li> <li>500 lines of JS</li> <li>600 lines of Python</li> <li>Server via Hetzner</li> <li>Flask to communicate with Stripe</li> <li>WyDay to generate serials</li> <li>Mongo to store/match customers and serials</li> <li>Mongo to store logs</li> <li>mkdocs to generate most of the site</li> <li>Flask to generate a reproducible, persistent customer receipt</li> <li>Email via sendgrid</li> </ol> <p>That is, we want a user to put the versions and amount of seats for Ragdoll into a \"cart\" and for that \"cart\" to be passed on to Stripe for the transaction to take place. Once Stripe is done, we'll want to generate a serial to go with it.</p> <p>With a serial in hand, we'd then like to generate a web page specifically for this one purchase. Ideally something the user can revisit later if they forget their key(s).</p> <p>Because many things can go wrong in these few steps, we need to record each step of the way, including log messages, such that we can debug any such issue.</p> <p>And that's it. Let's have a look at practicalities.</p> <p></p>"},{"location":"blog/20210531_backend/#static-website","title":"Static Website","text":"<p>Because most of the site - namely the landing page and contact page - is static I opted to use the same static site generator I use for https://learn.ragdolldynamics.com. Namely mkdocs.</p> <p>Unlike the learn domain, this one wouldn't require a theme as we're laying everything out ourselves.</p> <p>One of the pages need purchase-specific information - namely your serial numbers - so that needs a \"dynamic site generator\", and for that I'll use flask because of my brief excursion many years ago for Pyblish Events.</p>"},{"location":"blog/20210708_limitations/","title":"20210708 limitations","text":"<p>Document and offer alternatives to these.</p> <ul> <li>Active Rigid sandwiched between two Passive Rigids, jitters and possibly explodes</li> <li>Target outside of limits, causes jitters and invisible global forces</li> </ul>"},{"location":"blog/20210713_july28/","title":"Launch Date","text":"<p>On July 28<sup>th</sup> 2021, animators around the world will finally get something new. Something that isn't just your average incremental workflow improvement, but an entirely new way to animate.</p>"},{"location":"blog/20210713_july28/#the-past","title":"The Past","text":"<p>30 years ago there was innovation in character animation, much like the innovation we see today - modelers went from box modeling to sculpting, lighting artists nowadays reflect light and simulate the material properties in textures made with simulated wear-and-tear based on natural weather conditions and concept artists generate imagery through machine learning.</p> <p>But what are animators doing?</p> <ul> <li>https://youtu.be/6W_HL3nULMM?t=1208</li> </ul> <p>That's right! The dopesheet, the graph editor, inverse kinematics, rigs that run at 5 fps. We're still animating like it's 1995!</p> <p>As a result, every part of the filmmaking process has seen a massively reduced cost, except animation. Animation of today is often the most expensive and time consuming part of the pipeline; and when it isn't it really ought to be because despite accurate models, realistic lighting and pixel perfect textures, motion is what makes a character truly come alive.</p>"},{"location":"blog/20210713_july28/#the-present","title":"The Present","text":"<p>Ragdoll was made to address this need. The need for more believable characters with less effort. The need for animators to spend time where it matters - on telling story. Here is where and how I expect animators spend their time today in 2021.</p> Story (10%) Performance (10%) Physics (80%) Message Body language Balance Delivery Timing Contacts Continuity Interactions Force Continuity Momentum Propagation <p>See that 80%? Let's get rid of that.</p>"},{"location":"blog/20210713_july28/#the-future","title":"The Future","text":"<p>Mark your calendars, spread the word. Roughly 2 weeks from now we will embark on a journey together to resume innovating. To ensure that 30 years from now we'll look back at today and not recognise a thing.</p> <p>Best, Marcus Ottosson CEO and Founder Ragdoll Dynamics</p>"},{"location":"blog/20210727_debugging/","title":"20210727 debugging","text":"<p>Quick sanity check for overlapping shapes and an initial state residing within limits.</p> <ul> <li>Turn off gravity. Nothing should move when you play.<ul> <li>If something does move..<ul> <li>Disable collisions on everything</li> <li>If something still does move..<ol> <li>Disable all limits and guides</li> <li>Enable limits one-by-one</li> </ol> </li> <li>If something now does not move..<ol> <li>Everything is OK</li> </ol> </li> </ul> </li> <li>If something does not move..<ol> <li>Everything is OK</li> </ol> </li> </ul> </li> </ul>"},{"location":"blog/20210728_announce_1_0/","title":"Launch","text":"<p>Welcome to Ragdoll Dynamics, the real-time physics solver for Maya.</p> Website Download <p></p>"},{"location":"blog/20210728_announce_1_0/#july-28th-2021","title":"July 28<sup>th</sup> 2021","text":"<p>Today marks the launch of Ragdoll Dynamics and you are reading the announcement post for this moment. With Ragdoll, you'll be able to achieve faster and more realistic character animation with less work.</p> <p>Read on to find out what it's all about.</p> <p></p>"},{"location":"blog/20210728_announce_1_0/#background","title":"Background","text":"<p>In 2012 I had an idea for a physics system suitable for animators.</p> <p>The idea sprung from the mind of a Character Animator landing a job in Creature FX and being exposed to nCloth in Maya. The goal was simple; animate a piece of string in space. But, traditional tools failed us. The desired motion was too subtle and the level of control we had was too fine. Like laying bricks with a tweezer.</p> <p>So we turned to physics simulation as a means of automating subtlety and focusing on how we wanted the animation to feel and what we wanted it to do, rather than spending time making it look like it belonged in the real world. But now we had the opposite problem; although the results were subtle, they were hard to control. Like playing Jenga with a tractor.</p> <p>The process was highly technical, very few animators would endure that kind of process. If this was to become accessible to animators, something drastic needed to happen. Something to transform highly technical concepts into creative choices, something that could leverage the computational power of our workstations without overburdening the artist with nonsense.</p> <p>It is now July 28<sup>th</sup> 2021 - the birthday of Ragdoll - and we may (finally) begin our journey towards exactly that.</p> More <p></p>"},{"location":"blog/20210728_announce_1_0/#what-is-early-access","title":"What is Early Access?","text":"<p>Ragdoll is now in \"Early Access\" for the next 1-3 months.</p> <p>During this time, we'll round off corners and improve the overall experience - including more tutorials, more documentation and generally being here for you as we both take our first steps into this together. Unlike most new technology, there has never been a physics solver for animators before; everything we do from here on out will be unexplored pastures, ripe with new discoveries.</p> <p>So, if you're happy to dive into the unknown and learn the old-fashioned-way of trial-and-error, Ragdoll is yours. Alternatively, sit back, relax and watch other people suffer through the growing pains of an early-stage startup for the next 1-3 months.</p> <p>We'll post updates both here and on LinkedIn during this time.</p> <p></p> <p></p>"},{"location":"blog/20210728_announce_1_0/#early-bird","title":"Early Bird","text":"<p>During these first 1-3 months, there's carrot.</p> <p>Ragdoll Unlimited is the unrestricted, full version of Ragdoll. The full price of which is \u00a31950 for a floating licence. But because it's early, the price is lowered to the price of Ragdoll Complete - \u00a3499 for a node-locked licence. This will be reflected in the total price during checkout.</p> <p>Once early access is over - about 1 to 3 months from now - the price will return to normal.</p> Buy it Try it <p></p>"},{"location":"blog/20210728_announce_1_0/#immediate-roadmap","title":"Immediate Roadmap","text":"<p>The next 1-3 months will have a singular focus.</p> <ul> <li>Learning Material</li> </ul> <p>That means tutorials, documenation, interface tweaks, bug fixing, performance improvements and everything in between. If you find yourself struggling with something, it's not you, it's Ragdoll. Let us know via chat or forum here and we'll aim for same-day or same-week fixes. That's what Early Access is all about.</p> Chat Forums <p></p>"},{"location":"blog/20210728_announce_1_0/#product-tiers","title":"Product Tiers","text":"<p>Ragdoll comes in 5 flavours.</p> <ul> <li>Trial</li> <li>Personal</li> <li>Complete</li> <li>Unlimited</li> <li>Batch</li> </ul> <p>Each flavour is priced differently to enable access to everyone. For non-commercial users - namely anyone wanting to fool around with physics for their personal or student projects at home - there's a special version of Ragdoll. This version is identical to a node-locked version of Ragdoll Unlimited plus having free upgrades forever.</p> Trial Personal Complete Unlimited Batch Commercial Use \u274c \u274c \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Interactive Tools \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c Python API \u2714\ufe0f \u2714\ufe0f \u274c \u2714\ufe0f \u274c Multi-Threading \u2714\ufe0f \u2714\ufe0f \u274c \u2714\ufe0f \u274c JSON Import/Export \u2714\ufe0f \u2714\ufe0f \u274c \u2714\ufe0f \u274c Per-process Licence \u274c \u274c \u274c \u274c \u2714\ufe0f Perpetual Pricing \u274c \u00a399 \u00a3499 \u00a31299 \u00a3199 Floating Licence \u274c \u274c \u00a3750 \u00a31950 \u00a3250 Monthly Pricing \u274c \u274c \u00a355 \u00a380 \u00a320 Annual Upgrade Plan \u274c \u00a30 \u00a3250 \u00a3650 \u00a399 <p></p>"},{"location":"blog/20210728_announce_1_0/#next-steps","title":"Next Steps","text":"<p>Ready?</p> <p>Click here to download and install Ragdoll for Windows and Linux, Maya versions 2018-2022. You'll have a whole month to experiment before having to make up your mind, so go nuts!</p> Try it Buy it"},{"location":"blog/20210730/","title":"Documentation Writers, Ahoy!","text":"<p>Hey you!</p> <p>We launched our animation software Ragdoll Dynamics the other day and are on now the lookout for someone to author learning material on either a full-time or part-time basis.</p> <p>It would involve:</p> <ol> <li>Learning about Ragdoll Dynamics, enough to be dangerous</li> <li>Writing user documentation, primarily for animators, using primarily Markdown (Such as this very page!)</li> <li>Recording 5-second gifs demonstrating workflow and new features, such as these!</li> <li>Recording 5-minute tutorials on making cool things with physics, such as this!</li> <li>Recording project-based learning material, breaking down a finished animation like what you see on the front page of our website</li> <li>Starting as soon as you're available</li> <li>Remote only, at least until we get an office at which point remote would remain an option</li> <li>With pay from \u00a340,000-60,000/year</li> </ol> <p>To qualify, you don't need experience with Autodesk Maya although it wouldn't hurt. What you would need however is:</p> <ol> <li>Examples of prior work; such as a tutorial series on Gnomon Workshop, CMIVFX, Digital Tutors or written documentation any equivalent source we can use to gauge your style.</li> <li>A pleasant voice; we can provide equipment like microphone and recording software.</li> </ol> <p></p> <p>We could compensate you in various ways.</p> <ul> <li>Salary, from \u00a340-60,000/year</li> <li>Per topic, from \u00a3200-400</li> <li>Per week, from \u00a3300-600</li> <li>Pro-bono, get a licence for free</li> </ul> <p>Is this you? Do you know someone?</p>"},{"location":"blog/20210821/","title":"Maya Developers, ahoy!","text":"<p>Hello!</p> <p>We've recently launched our animation software Ragdoll Dynamics and are on now the lookout for a motivated Maya Developer, on either a full-time or part-time basis.</p> <p></p>"},{"location":"blog/20210821/#about-us","title":"About Us","text":"<p>At the time of this writing, Ragdoll is me - Marcus - doing all things Maya along with handling just about every other aspect of running the business - like marketing, licencing, web development, design, animation, documentation.. too many things! And recently Kostas, doing secret things related to robotics in Maya.</p> <p>What I'd like to do is hand over my Maya-development role to you. It would involve all manner of challenges, from UI and UX to physics and low-level optimisations to workflow enhancements and tools development. The more you fancy the better.</p> <p>You will be given a great deal of agency and resonsibility that shape the future of Ragdoll in these early days. How should animators interact with physics? What parts of their workflow can be enhanced or even replaced with physics? These are questions you and I will explore, and the earlier you get involved the greater your influence.</p> <p></p>"},{"location":"blog/20210821/#about-you","title":"About You","text":"<p>What I'd like to see from you is examples of your work along with some motivation for wanting to come on this journey. Startup-life is unlike corporate-life in a few key ways, primarily in being able to create and execute your own set of tasks, of not only implement a solution but also understanding the problem and finding a optimal solution to an otherwise muddy and unexplored problem. It also heavily relies on our pace and progress; if you and I don't make it, it's all over! Hah! On the upside it also means that our success is ours alone, and let me tell you that is incredibly rewarding!</p> <p>To cope with this, you should have some of these.</p> <ul> <li>\u2714\ufe0f 3+ years of experience with the Maya C++ API, enough to be dangerous</li> <li>\u2714\ufe0f Experience working in production on relevant tasks, like at ILM or Dneg or Framestore</li> <li>\u2753 (Optional) Some years of experience with Python, to either understand or evolve the artist tools</li> <li>\u2753 (Optional) Some experience at the other end of the spectrum, in rigging or animation</li> <li>\u2753 (Optional) Experience with continuous integration, such as GitLab CI or GitHub Actions</li> </ul> <p>Bonus Points</p> <p>If you have experience or interest in one or more of these, you're in.</p> <ul> <li>\ud83d\udd6f\ufe0f Data-oriented programming, specifically EnTT</li> <li>\ud83d\udd6f\ufe0f Graphics programming, ghosting and trajectories, tool UIs</li> <li>\ud83d\udd6f\ufe0f Maya Evaluation optimisation, about 90% of Ragdolls performance is on the table</li> <li>\ud83d\udd6f\ufe0f Black-box optimisation, specifically ES but also RL</li> <li>\ud83d\udd6f\ufe0f Parallel programming, performance is key and people have cores to spare</li> </ul> <p>The Offer</p> <p>Like the position, the offer is flexible.</p> <ul> <li>\u2714\ufe0f Part-time, full-time or contract work. Whichever works for you.</li> <li>\u2714\ufe0f Anywhere between <code>\u00a350,000-80,000/year</code> is fair game.</li> <li>\u2714\ufe0f For short-term work, <code>\u00a3300-600/day</code>is fair game.</li> <li>\u2714\ufe0f Remote, or in-office (once there is one).</li> <li>\u2714\ufe0f We're in Europe, so for the sake of timezone you should too.</li> </ul> <p></p>"},{"location":"blog/20210821/#next-step","title":"Next Step","text":"<p>And that's it! If this tickles your curiosity, feel free to get in touch. We can setup a call and talk things through. Maybe all you do is low-level optimisations in x86 assembly, and none of that fancy-pants UX and Python stuff? Or maybe you've got the fanciest pants in town? As an early part of the Ragdoll Dynamics team there's plenty of space in all manner of pants.</p> Email Contact Form <p>Best, Marcus</p>"},{"location":"blog/20220809/","title":"SIGGRAPH 2022 Schedule","text":""},{"location":"blog/20220809/#schedule","title":"Schedule","text":"<p>Here's what we'll be doing at SIGGRAPH 2022!</p> <p></p>"},{"location":"blog/20220809/#tuesday-9th-august","title":"Tuesday - 9<sup>th</sup> August","text":"<p>First day, we'll be ready and waiting at booth 442.</p> Time # Demo 11:00 Intro with Manikin - I'll walk through the basics of Ragdoll Dynamics, the physics solver for animators working in Autodesk Maya. We'll take a hand-animated Manikin character rig through to completion with physics for secondary motion. 13:00 Dragon Rig Setup - We'll take things to the next level, and turn a production-level Dragon rig into a complete ragdoll, something we can play around with interactively and have almost completely automated via turbulence and wind 14:00 RAGDOLL FOR FIRST TIMERS by Vanessa Rossi - I recently tried out Ragdoll as an animator at DNEG, and wanted to share my experience on the basics of it from an user perspective.1. Ragdoll set up using manikin2. Throwing a ball at Manikin with a walk or run cycle mocap - I'll play around with values of the ball in the channel box, in order to show some of the many different results we can get (and say how you can quickly get a few blocking pass options in minutes)3. Falling from a ladder - I'll do a simple constraint set up, and watch Manikin fall from the ladder with variations depending on when the constraint is released. 15:00 Requests - During each demo, we welcome any requests or questions at which point this is where we'll demonstrate their answer. Come join and make requests in real-time!  16:00 Live Mode - Next generation of rigging and animation, come visit us at 16:00 for the reveal!  18:30 End - The conference is done for the day, see you tomorrow! <p></p>"},{"location":"blog/20220809/#wednesday-10th-august","title":"Wednesday - 10<sup>th</sup> August","text":"<p>It's been a whirlwind of a day, and here's the next whirlwind!</p> Time # Demo 10:00 Hands and Fingers - We'll setup hands and fingers to see how much we can get out of contacts with itself and the environment. 11:00 Self-Walking Manikin - Wouldn't it be nice if your character could walk on its own? Or balance on its own, as the environment moves around? That's what we'll attempt in this demo! 14:00 DNEG - Rafael Cardenas Rivera and Vanessa Rossi is joining us at this time to take you through a fun demo! 15:00 Requests - We'll demo any requests having come in from you, the audience, during this block of time. Feel free to drop by and make requests \"on-air\"! 16:00 Technology Preview - Have a look at what life will be like in Unreal Engine from now on. 18:00 End - The conference is done for the day, one day left, see you tomorrow!! <p></p>"},{"location":"blog/20220809/#thursday-11th-august","title":"Thursday - 11<sup>th</sup> August","text":"<p>Final day! Come join and make requests in real-time. </p> Time # Demo 10:00 Locomotion - We'll share some technical details behind how Locomotion - the automatic walk, run and jump solver - works under the hood, and demonstrate how to use it on a Boston Dynamics-like character. 11:00 DNEG - Rafael Cardenas Rivera and Vanessa Rossi is joining us at this time to take you through a fun demo! 13:00 Requests - An improvised session, showcasing some of the best of what we've seen so far and taking requests from you in the audience in real-time. Any last requests? Come join at this time! 16:00 End - SIGGRAPH is done and dusted, hope you had fun!  <p></p>"},{"location":"blog/20220809/#overview","title":"Overview","text":"<p>We're heading to SIGGRAPH this year! </p> <ul> <li>https://s2022.siggraph.org/</li> </ul> <p>To everyone who visits, there will be:</p> <ol> <li>SWAG, obviously</li> <li>Free licences</li> <li>Various demos by us and a special guest (!)</li> <li>Ragdoll-branded sweets </li> </ol> <p></p>"},{"location":"blog/20220809/#where","title":"Where?","text":"<p>We'll be there from 9<sup>th</sup> to 11<sup>th</sup> August at:</p> <p>Vancouver Convention Centre 1055 Canada Place Vancouver, BC, Canada.</p> <p>Booth 442, here's us!</p> <p></p> <p></p>"},{"location":"blog/20220809/#meet","title":"Meet","text":"<p>Reach out to us if you'd like to arrange a meet and greet, we'd love to meet you. </p> <ul> <li>https://ragdolldynamics.com/contact</li> </ul> <p>See you there!</p>"},{"location":"blog/20231018_building_a_business/","title":"On Building a Business in VFX and Games","text":""},{"location":"blog/20231018_building_a_business/#prelude","title":"Prelude","text":"<p>I want more artists making tools for other artists, so I'll share the answers to what is normally sensitive information with everyone here and on the web in the interest of encouraging that. Let's go!</p> <ol> <li>What are the legal requirements for distributing software such as Ragdoll?</li> <li>Do I need a legal entity, i.e. a company?</li> <li>How do I keep the pirates out?</li> <li>Was it worth it?</li> </ol> <p></p>"},{"location":"blog/20231018_building_a_business/#legal-requiremenents","title":"Legal Requiremenents","text":"<p>From a legal standpoint, what [do] the original software vendor (Autodesk / Foundry / SideFX) think about someone selling a plugin that uses their API. Are there any legal issues connected with it?</p> <p>In short, anything you write is yours and can be distributed freely in any way you choose.</p> <p>The part about \"using their API\" is interesting; the thing to keep in mind here is that law and licencing mostly applies to distributing other people's code. And by \"using\" their API, you are not distributing their API.</p> <p>For example:</p> <p>my_software.py</p> <pre><code>print(\"Hello World\")\n</code></pre> <p>Here, I'm \"using\" the Python API to emit messages to the console of anyone running my software. You may argue that I do not own the right to Python's source code and thus cannot distribute this file, but the Python source code is not included in what I distribute. Only my own characters, written on my own keyboard. It is the user, running <code>my_software.py</code>, who has Python on their machine and who is the one who agreed to whatever licence was involved when installing Python such that they can run my software.</p> <p>Let's take a look at another example.</p> <p>my_other_software.py</p> <pre><code>import maya\nprint(maya)\n</code></pre> <p>Now I'm \"using\" the Maya Python API. But again, this file contains only characters written on my own keyboard which means I can distribute this freely with absolutely no restrictions. In fact, what does \"maya\" refer to in this case? Is it the Python API of Autodesk Maya, or is it this Python package?</p> <ul> <li>https://pypi.org/project/maya</li> </ul> <p>Or maybe this file is part of a Python package you've written, in which there is a <code>maya.py</code> that <code>my_other_software.py</code> is calling on. At the end of the day, it cannot be known and doesn't matter. These written characters are mine, I wrote them.</p> <p></p>"},{"location":"blog/20231018_building_a_business/#distributing-other-peoples-code","title":"Distributing Other People's Code","text":"<p>If you only ever distribute code you write, you can stop reading here and live a merry life.</p> <p>Where licencing does become relevant however, is when you do distribute other people's code. For example, in Ragdoll, we use several open source libraries, like this one.</p> <ul> <li>https://rapidjson.org/</li> </ul> <p>When it comes to distributing other people's code, there are usually two categories.</p> <ul> <li>Distributing source code</li> <li>Distributing compiled binaries</li> </ul> <p>Most projects are specific about what you can do with both of these. For example, you are able to freely download and use an LGPL licenced project, but if you distribute it you must also distribute the source code; Qt is a good example, Autodesk has made modifications to it for Maya which is why Autodesk then also distributes it alongside every other project is uses for its software projects.</p> <ul> <li>https://www.autodesk.com/company/legal-notices-trademarks/open-source-distribution</li> </ul> <p>The prevalent reason for GPL-style licencing is for making additions to a library; the author wants those additions to be free like the original, so as to benefit the project and everyone using it. Other common licence types are MIT and BSD which you may distribute, both in source and compiled form, so long as you include their licence. As a form of credit.</p> <p>The RapidJSON licence is here, which includes mention of this obligation.</p> <ul> <li>https://github.com/Tencent/rapidjson/blob/master/license.txt</li> </ul> <p>For Ragdoll, we include this with each release of Ragdoll, and looks something like this.</p> <ul> <li>https://learn.ragdolldynamics.com/open-source/</li> </ul> <p></p>"},{"location":"blog/20231018_building_a_business/#legal-entity-and-taxes","title":"Legal Entity and Taxes","text":"<p>How are you handling taxes as part of your sale? This question may sound silly, but does it require you to open some legal business to handle the tax of selling plugins from your website?</p> <p>This would depend on country and state but in general whenever you have income, you need to declare it to the government. In the UK, you can have income as an individual, that's called a sole trader - for example:</p> <ul> <li>If you rent out a room in your house on AirBnb, that is income.</li> <li>If you mow people's lawn on weekends (for cash), that's income.</li> <li>If you sell software, that's income.</li> </ul> <p>Whenever you declare income to the government, they will want a slice of that income in the form of taxes, and there comes a point when opening a separate business will yield more money for you and less for them. If you operate a \u00a3100/year business, you are likely better off as a sole trader. The tax you pay will become part of your personal tax declaration (i.e. self assessment). Depending on how much that is, you're looking at roughly 30% of your income to taxes. 30% of \u00a3100 is nothing to lose sleep over, it's the cost of doing business. If you operate a \u00a31mil/year business however, it won't be 30% but 60% and above, and suddenly taxes are no joke. Somewhere between \u00a3100/year and \u00a31mil/year will it become sensible for you to open a separate business - probably around the \u00a310,000 and \u00a3100,000 mark. In the UK that would/should be a \"limited\" company.</p> <ul> <li>https://www.gov.uk/set-up-limited-company</li> </ul> <p>A company is like a person. It will earn income just like a person, except taxes are slightly different. A company can earn income and spend it before paying any taxes; in fact most companies spend all of their income for the sole purpose of not having to pay any tax. Any percentage of tax on \u00a30 is still \u00a30. And that's good for the economy as well, it means more money in circulation. For example, if you charge customers \u00a310/licence and you sell 100 licences over the course of a year, your company will have \u00a31,000 in the bank. By the end of the year, the tax man will stop by and ask for 30% in what's called \"corporation tax\". 30% of \u00a31,000 is \u00a3300. The rest you get to keep, the tax man is now done and will return next year to take another 30% of whatever you make that year. If instead you sell 100 licences, get \u00a31,000 and then spend that \u00a31,000 on e.g. a new computer, then the tax man will stop by and find you have \u00a30 in the bank, and promptly leave without asking for any payment. So now you (or your company, rather) have a brand new computer worth \u00a31,000 in your belongings.</p> <p>And I say \"your company\" because that's important to remember. Again, a company is like a person, and all that you are to your company is a director. A director is like an employee, and like any employee you would have responsibilities towards this company, primarily in doing what is essentially a self-assessment but for the company, called a corporation tax return.</p> <p>For developers in our field, there are other ways in which to lower that 30% number, such as government grants and paying for your home office through the company and things such as:</p> <ul> <li>https://www.gov.uk/government/collections/research-and-development-rd-tax-relief</li> </ul> <p>Which is one of the many ways in which a limited company is different from being a sole trader, and your main consideration for whether to start one comes down to that yearly revenue figure.</p> <p></p>"},{"location":"blog/20231018_building_a_business/#payment-processor","title":"Payment Processor","text":"<p>You can take cash, and you can have people transfer money to you via bank transfer. But for online businesses (and offline, for that matter) card payments are more common and you can't do these yourself. For that, you need some service capable of facilitating the transfer of money from customer to yourself.</p> <p>For that, we use Stripe.</p> <ul> <li>https://stripe.com</li> </ul> <p>There's a bunch of options here too, like PayPal and Square. What it comes down to is cost; they all want a slice of your sale. Stripe is rather expensive, but makes up for it in convenience and features. For example, handling subscriptions is no small task.</p> <ol> <li>Onboarding a user for recurring payments</li> <li>Automating recurring payments</li> <li>Making cancellation and edits to a subscription</li> <li>When they subscribe, automate licence generation</li> <li>When they cancel, automate licence cancellation too</li> </ol> <p>There are even services that combine the payment processor and licence management; we initially used https://www.sendowl.com but found that (1) their method of bundling licencing and downloads were limiting and (2) their UI for payments is lacking and (3) they are basically a wrapper on-top of Stripe and Stripe has a really nice API so we opted to simply use that directly.</p> <p></p>"},{"location":"blog/20231018_building_a_business/#software-licencing-vs-pirates","title":"Software Licencing vs Pirates","text":"<p>How are you handling the licensing of your tools? I mean the piracy part. It is an issue, and running some RLM servers is not an option when discussing some relatively small plugins for Maya.</p> <p>It's great question with many answers; some subjective others strategical.</p> <p>For Ragdoll, we use LimeLM by WyDay.</p> <ul> <li>https://wyday.com/limelm</li> </ul> <p>It's based on a DLL file (SO file on Linux) that ships alongside Ragdoll, and this DLL file has already been cracked. Meaning if you get hold of this cracked DLL and replace the file shipped with Ragdoll, Ragdoll will believe you are a legit commercial user.</p> <p>We're able to spot the when, where and who of this happening on our end and do keep an eye on it in case we need to take action, but so far it's under control.</p> <p>At the end of the day, we don't use LimeLM to keep pirates out, we do it to keep honest people honest. Not everyone agrees with this approach, and that's okay. I personally believe that if someone wants to use your software illegally, they will. If there isn't a way to do it, they will find a way to do it. I also believe that if someone wants to use your software legally, they will. What they won't do is jump through too many hoops to get there. If using it legally becomes more difficult than using it illegally, you'll turn honest users dishonest because what matters in the end is getting their job done. So, Ragdoll was cracked weeks after the release of 1.0 and we are aware of it (flattered, you might say!). Are we losing sales because of it, probably. Are we gaining sales from keeping licencing simple? Most definitely. So given that you cannot completely eliminate piracy, it becomes a matter of figuring out the balance which I today believe we've found. But again, this is subjective and will vary based on person and product.</p> <p></p>"},{"location":"blog/20231018_building_a_business/#was-it-worth-it","title":"Was it Worth it?","text":"<p>Was it beneficial for you? I mean developing and selling those plugins from your website commercially. I mean, understand me correctly, I'm not interested in any numbers - that's out of the question and not my business, I mean overall.</p> <p>Without numbers, no answer I could give would mean anything to anyone, because whether it is beneficial will depend on your personal goals. Some want wealth, others want freedom.</p> <p>I've now spent 10 years down this path; from prototyping with nCloth in Maya with my limited skills as an animator to realising it wasn't enough and having taught myself programming and how to run a business and manage a team of developers; if we look at the total figure in 10 years of earning income working for someone else, then I only recently reached the point where I have earned as much via Ragdoll as I would have as an employee.</p> <p></p> <p>Which, as you can see from my fancy graph, involves a large up-front cost. In my case, I never had to dip below 0, which many do in the form of taking on investment or loan.</p> <p>As an aside, let's have a look at some other ways in which this graph can and often do go:</p> <p>Bad idea, bad execution, or both</p> <p>You use up all of your savings/investment but never manage to sell any copies.</p> <p></p> <p>Not worth it</p> <p>You manage to sell product, but would have made more money as an employee. This may still be a win, if all you want is freedom and don't care about money.</p> <p></p> <p>No savings, no investment</p> <p>This was me 4 times in a row for 7 years; restarting can be easy (like it was for me) but heavily depends on life circumstances (e.g. kids).</p> <p></p> <p>In my case and the first graph, what happens after today is obviously highly optimistic, but you'll need a lot of optimism if you are to run a business. </p> <p>Moving on, I was earning \u00a340-70k/year as an animator in 2006-2013, which I expect would have increased with those 10 years of experience and perhaps change of role into something more technical, so let's be generous and say on average I would have made \u00a3100k/year and that I worked full-time for 10 years, that's \u00a31,000,000. On average, companies take 5 years to become profitable. As in, 5 years until you've covered the cost of developing the first version and reached plus/minus 0 and can start saving again, so add another couple of years to reach the point you would have been at if you had just taken those initial 5 years and saved money along the way.</p> <p>I heard this exact thing 10 years ago but never believed it could take this long, and here I am 10 years later repeating it to you. </p> <p>In my case, I never made \u00a370k in a year, but rather spent 2-4 months each year on freelance earning roughly \u00a320k followed by 8-9 months of living off of that (in London, i.e. very frugally) to try and develop what is today known as Ragdoll. Once cash ran out, rinse and repeat and 7 years later I had developed the first version of Ragdoll.</p> <p>Early Website</p> <ul> <li>https://alanjfs.github.io/ragdoll-web/</li> </ul> <p>It was a bug-ridden mess with very few features. But, it solved a real problem, for real customers. There is a lot more to say on the topic of how to develop and launch, so feel free to ask if that's interesting. I publicly launched Ragdoll in 2021 and generated \u00a3200k in the first 3 months of trading, far exceeding my expectation and more than covering the cost of development up until that point. Since then revenue has ebbed and flowed; there are a few key players out there more willing to take risks on startups (the early adopters) and once you've crossed that threshold you are left with the realists; the bulk of the market with higher demands and less patience. This is where the real work begins.</p> <p>Overall I feel the timing was just right; for me personally, given that I get to utilise every skill and experience I've had as an artist and programmer, from modeling to animating for showcase material, to pipeline development and Python tooling, to web design and development for our landing page, to writing documentation via my work in open source (e.g. Pyblish and Allzpark), to managing people as a lead and co-founder in previous companies, to devops and setting up build servers, to making music for announcement trailers, to having enough of a network that I could rather easily find my first set of customers. The timing was right commercially and technically as well; hardware is more than capable of doing what Ragdoll requires in real-time and realism in film and animation is in dire need of tooling; it is simply too expensive and challenging to match the expectations of our audience and to follow the leads of rendering and modeling and texturing, which have gotten so far ahead of where character animation is today. There is a lot more to say on that too, so feel free to ask. </p> <p>With this in mind, was developing and selling software beneficial to me? I enjoy working with others and not having to think about what to do next; being given a task and executing it to the best of my abilities. I know studios enjoy hiring me, I do a good job. But oh man, it does not compare to having built your own thing and seeing it help others. Putting all of my experience, and lately the experience of my staff, together into single .zip file to be distributed to peers in the industry I know and love; there is nothing more rewarding.</p> <p>I take it you didn't expect a reply like this, but believe you me; founders are happy to share. I speak to some of them myself on a regular basis (shoutout to JangaFX, Polygonflow and Inbibo!) and reached out to many more before starting Ragdoll, including Ziva and Pixologic (shoutout to James and Ofer!), they love talking about their experiences too. Running a company can be a lonely endeavour; there are far more employees than employers, so you'll naturally find more conversations about being an employee but at the end of the day we're all human.</p> <p>One of the reasons I chose to get into detail here is because one of the things that bothers me about starting a business is how black box it is. In your case, the legal aspect alone can understandably drive you away from even trying. In others, the financial aspect such as \"do I need investment?\" - which seems really common but does not have to be! - can drive someone away. I also had these questions. For the first year or two of Ragdoll, I stood prepared for the UK government to come crashing through my door due to having forgotten some obligation for running a business - some missed tax payment or missing bit on our website. Or for Autodesk to require I only sell software on their their own app store and demand compensation for not having done so already. And there are still threats out there, things that can cripple any business in an instant for things not already done in the past - especially for things related to law which is why your questions are so important.</p> <p>It is necessary to read licence agreements, like the MIT and GPL walls of text, and the Autodesk EULA when developing for Autodesk software. Some of those texts are trivial and clearly a non-issue, others will be challenging to understand which is when you do need an accountant and/or lawyer. But these people are out there for you, so when that time comes it really is as simple as reaching out to ask. It is unlikely you will need any of that before you generate any revenue, and by the time you do you also have money to spend which turns it not into a question of \"can I afford it\" but rather \"how much more will I earn by having an accountant? By hiring this lawyer for a couple of hours?\". When everything you spend can and often does make you more money, that's when you know you've got a successful business. At the end of they day, nobody is expected to know everything; mistakes can and will be made. Even law is built around this, because law is built around us being human. What matters is not that you know everything up-front, but how you deal with mistakes. If a payment is due, you will be reminded. If some law is broken, you will be notified. At no point will you be punished before being given a chance to remedy the mistake.</p> <p>Bottom line is, you can do it. Aside from an idea, all you need is perseverance. Where there's a will there's a way, true in life as it is in business.</p> <p></p>"},{"location":"blog/20231018_building_a_business/#podcast","title":"Podcast","text":"<p>Finally, in the interest of completeness, there's a podcast between me and Miguel Campos from a few months back talking about many of these things and more at depth.</p> <p>https://www.youtube.com/watch?v=PMWvM9-vbgA&amp;list=PL9LaIDCCDjfhZa-a_rT74cFDAk2R0Sf4S&amp;index=3</p> <p>Hope it helps, and feel free to continue asking questions here!</p>"},{"location":"blog/20240101_omx_vs_cmdx/","title":"cmdx v omx","text":""},{"location":"blog/20240101_omx_vs_cmdx/#omx-by-animal-logic","title":"omx by Animal Logic","text":"<p>The appearance of <code>omx</code> gave me an excellent opportunity to shed some light on the Maya API and how undo is implemented, along with finding some inspiration for things to improve in <code>cmdx</code>.</p> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#what-is-it","title":"What is it?","text":"<p>omx and cmdx provide an alternative to <code>maya.cmds</code> and <code>pymel</code> that is both faster and - in the case of <code>cmds</code> - more convenient.</p> <p>One of the big failings of <code>cmds</code> is nodes being referenced by name; such that when a name changes, the variable containing your node is no longer valid.</p> <pre><code>from maya import cmds\nnode = cmds.createNode(\"transform\", name=\"name\")\ncmds.rename(node, \"newName\")\ncmds.setAttr(node + \".translateX\", 5)\n# \"name\" does not exist!\n</code></pre> <p>PyMEL solved this, and added a boatload of additional features like exposing Maya's native math classes for e.g. easy vector addition.</p> <pre><code>from pymel import core as pm\nvec1 = pm.dt.Vector(1, 2, 3)\nvec2 = pm.dt.Vector(4, 5, 6)\nresult = vec1 + vec2\n</code></pre> <p>But it also added a performance overhead - importing the library can take seconds and generally using the library made code take several times longer than it would have via <code>cmds</code>.</p> <p>Performance Comparison</p> <p>See below for a brief comparison, along with the README for <code>cmdx</code> and documentation for <code>omx</code> for more.</p> <p>For Ragdoll, we needed both performance and maths.</p> <p>For example, the <code>Load Physics</code> command can read a JSON and generate a complete Maya scene with Maya nodes, Ragdoll nodes, connections between them and attributes restored from disk in a handful of milliseconds. On par with how long it takes Maya to load a <code>.ma</code> or <code>.mb</code> file off disk.</p> <p>We built <code>cmdx</code> to provide the terse readability of PyMEL with the performance of <code>cmds</code>. Actually even better than <code>cmds</code>, as you'll find below, due to leveraging the Maya Python API 2.0.</p> <p>About two weeks ago, Animal Logic announced another open source contender called <code>omx</code> and this page is a comparison between the two. To compare them, we'll need a better understanding of Maya, undo and the \"modifiers\", so you'll also learn about how these work!</p> <p>More alternatives</p> <p>The complete list of all other alternatives I know of, let me know if you know any more!</p> <ul> <li>https://github.com/mottosso/cmdc</li> <li>https://github.com/peerke88/cmdWrapper</li> <li>http://pythonhosted.org/MRV</li> <li>https://github.com/utatsuya/metan</li> </ul> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#first-impressions","title":"First Impressions","text":"<p>Let's start with a quick side-by-side.</p> <p>omx</p> <pre><code>import omx\nfrom maya.api import OpenMaya as om2\n\nmod = omx.currentModifier()\njoint = mod.createNode(\"joint\", name=\"joint\")\n\nfn = om2.MFnNumericAttribute()\nattr = fn.create(\"flash\", \"flash\",\n                 om2.MFnNumericData.kInt)\nfn.setMin(0)\nfn.setMax(10)\n\nmod.addAttribute(joint.object(), attr)\n\njoint.radius.setFloat(1.5)\njoint.translate.setCompoundDouble((1, 2, 3))\n\nmod.commandToExecute(\n    f\"setKeyframe -at tx -t 1 -v 10 {joint}\"\n)\nmod.commandToExecute(\n    f\"setKeyframe -at tx -t 5 -v 15 {joint}\"\n)\nmod.commandToExecute(\n    f\"setKeyframe -at tx -t 10 -v 10 {joint}\"\n)\n\nmod.doIt()\n</code></pre> <p>cmdx</p> <pre><code>import cmdx\n\nwith cmdx.DagModifier() as mod:\n    joint = mod.createNode(\"joint\", name=\"joint\")\n    attr = cmdx.Integer(\"flash\", min=0, max=10)\n    mod.addAttr(joint, attr)\n    mod.setAttr(joint[\"radius\"], 1.5)\n    mod.setAttr(joint[\"translate\"], (1, 2, 3))\n    mod.setAttr(joint[\"tx\"], {\n        1: 10,\n        5: 15,\n        10: 10\n    })\n</code></pre> <p>Highlights</p> Feature omx cmdx Maya Support 2022-2024 2016-2024 Attribute Access Dot-access, <code>.attr</code> Dict-access, <code>[\"attr\"]</code> Attribute Setter <code>node.attr.setInt(5)</code> <code>node[\"attr\"] = 5</code> Attribute Getter <code>if node.attr</code> <code>if node[\"attr\"]</code> Animation <code>mod.commandToExecute</code> <code>mod.setAttr</code> Undo <code>MPxCommand</code> + <code>MDGModifier</code> Same <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#performance","title":"Performance","text":"<p>Both omx and cmdx performs better than cmds, PyMEL and MEL. They also all scale linearly with the number of nodes, so let's see how they compare on the heaviest of cases.</p> <p>10,000 nodes</p> <p>Units are in seconds.</p> Test cmds cmdx cmdx noundo omx omx immediate Create 5.66 3.89 2.68 3.17 4.38 Edit 4.8 4.44 3.13 3.19 7.03 Rename 1.29 0.66 0.65 0.47 0.77 Query 0.73 0.52 0.52 0.68 0.66 Remove 0.89 0.61 0.62 0.41 0.70 Overall 13.5 10.1 7.67 7.94 13.6 <p>Both omx and cmdx thinly wrap the Maya API, so both of their bottlenecks is Maya itself.</p> <p>Source</p> <p>Tested on Maya 2024, Windows, source here</p> <p>Bad performance</p> <p>The AL performance comparison of <code>cmds</code> ability to create is off by 3x, clocking in at 15 seconds.</p> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#deep-dive","title":"Deep Dive","text":"<p>Let's take a closer look, starting with syntax.</p> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#syntax","title":"Syntax","text":"<pre><code># omx\nnode.t.x = 5;\n\n# cmdx\nnode[\"tx\"] = 5\n</code></pre> <p>Somewhat subjective, and we've learnt from PyMEL that accessing attributes via the dot-syntax does work. But not without cost.</p> <p>Consider this.</p> <pre><code># Attribute, function or property?\nnode.visible = True\nnode.flash.keyable = True\nnode.translate(1, 2, 3)\n</code></pre> <p>..did these even exist, or did we just add new variables to the Python object?</p> <p>Wouldn't my IDE warn about it?</p> <p>Consider readers on GitHub, GitLab or BitBucket; including the source code on this page.</p> <p>Whenever you call <code>.something</code> on a node, the <code>__getattribute__</code> method of the object is called. In the case of omx, here's what this looks like.</p> <p>AL/omx/_xnode.py#L75</p> <pre><code>class XNode:\n    def __getattribute__(self, name):\n        # (1)\n        if hasattr(XNode, name):\n            return object.__getattribute__(self, name)\n\n        mob = object.__getattribute__(self, \"object\")()\n\n        # (2)\n        if name == \"apiTypeStr\":\n            # ...\n\n        if mob == om2.MObject.kNullObj:\n            # ...\n\n        nodeClass = XNode._NODE_CLASS_CACHE[mayaType]\n        attrs = XNode._ATTRIBUTE_CACHE[mayaType]\n        attr = attrs.get(name, None)\n\n        # (3)\n        if attr is None:\n            if not nodeClass.hasAttribute(name):\n                plug = _plugs.findPlug(name, mob)\n                if plug:\n                    return _xplug.XPlug(plug)\n\n                raise AttributeError(f\"Node {mayaType} has no attribute called {name}\")\n\n            attr = nodeClass.attribute(name)\n            attrs[name] = attr\n\n        # (4)\n        return _xplug.XPlug(mob, attr)\n</code></pre> <p></p> <p>Some highlights</p> <ol> <li>First we check if the member is a property or method of the object</li> <li>If not, we check if you typed <code>node.apiTypeStr</code> in which case we return a special case</li> <li>Next we check whether the member is a dynamic attribute and return an <code>XPlug</code> if so</li> <li>Finally we have determined that this is a static attribute and return an <code>XPlug</code></li> </ol> <p>Here, attributes are shadowed by native functions and properties, and as the count of both native functions and user attributes increases name clashes are inevitable.</p> <p>It's also not clear when you assign whether you are assigning to a Python property or Maya attribute.</p> <pre><code>node.name = \"My Name\"\n</code></pre> <p>Conversely, cmdx uses <code>__getitem__</code> instead. Here's what happens when you call <code>node[\"attr\"]</code></p> <p>cmdx.py#L570</p> <pre><code>class Node:\n    def __getitem__(self, key):\n        unit = None\n        cached = False\n\n        # (1)\n        if isinstance(key, (list, tuple)):\n            # ...\n\n        # (2)\n        if cached:\n            # ...\n\n        assert isinstance(key, str), (\n            \"%s was not the name of an attribute\" % key\n        )\n\n        try:\n            plug = self.findPlug(key)\n        except RuntimeError:\n            raise ExistError(\"%s.%s\" % (self.path(), key))\n\n        # (3)\n        return Plug(self, plug, unit=unit, key=key)\n</code></pre> <p>Some highlights.</p> <ol> <li>Optional values as handled, e.g. a non-standard unit <code>node[\"tx\", Meters]</code> or <code>node[\"rx\", Degrees\"]</code></li> <li>Optional cached return value are is fetched</li> <li>The Maya plug is discovered and wrapped in a <code>cmdx.Plug</code></li> </ol> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#undo","title":"Undo","text":"<p>The first surprise when working with <code>maya.api.OpenMaya</code> is the lack of undo.</p> <pre><code>from maya import cmds\nfrom maya.api import OpenMaya as om\nom.MFnDependencyNode().create(\"transform\")\ncmds.undo()  # Nope!\n</code></pre> <p>We take it for granted with <code>cmds</code> and <code>pymel</code> but with naked access to <code>OpenMaya</code> we are on our own. And it just so happens that undo/redo is (or, can be) really hard.</p> <p>To understand why, we need to look closer at undo in general, and how Maya implements this with <code>MPxCommand</code> and <code>MDGModifier</code>.</p> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#undo-primer","title":"Undo Primer","text":"<p>The basic premise of undo in any application is that for every action there is an equal and opposite reaction. Wait, that's Newtons Third Law. But it does apply!</p> <pre><code>def do():\n    createNode()\n\ndef undo():\n    deleteNode()\n</code></pre> <p>Maya implements undo via the \"Command Pattern\".</p> <p>Alternatives</p> <p>There are other ways to implement undo, such as the \"Memento Pattern\" utilised by Blender.</p> <p>Here are some excellent resources on it for deeper diving!</p> <ul> <li>https://gameprogrammingpatterns.com/command.html</li> <li>https://maxliani.wordpress.com/2021/09/01/undo-the-art-of-part-1/</li> <li>Creating a tools pipeline for Horizon Zero Dawn</li> <li>https://archive.casouri.cat/note/2021/visual-undo-tree/index.html</li> <li>Our Machinery</li> </ul> <p>In a nutshell, it looks like this.</p> <pre><code>class Command:\n    def __init__(self, name):\n        self._name = name\n        self._node = None\n\n    def do(self):\n        self._node = createNode(self._name)\n\n    def undo(self):\n        deleteNode(self._node)\n</code></pre> <p>And that's about all there is to it! What makes this pattern work, is that we can keep a list of previous commands..</p> <pre><code>previous_commands = list()\n\ndef execute(cmd):\n    cmd.do()\n    previous_commands.append(cmd)\n\nexecute(Command(\"hello\"))\nexecute(Command(\"world\"))\nexecute(Command(\"bye\"))\n</code></pre> <p>..and call their <code>undo</code> in the reverse order!</p> <pre><code>def undo():\n    last_command = previous_commands.pop()  # Get and remove last item\n    last_command.undo()\n\nundo()\nundo()\nundo()\n</code></pre> <p>There's one additional list for <code>redo()</code> but the premise is the same. Append and pop.</p> <p>Here's a real example of how this is implemented in the Maya Python API 2.0.</p> <pre><code># my_command.py\nfrom maya.api import OpenMaya as om\n\nclass MyCommand(om.MPxCommand):\n    kPluginCmdName = \"myCommand\"\n\n    def __init__(self):\n        super(MyCommand, self).__init__()\n        self._node = None\n        self._name = None\n\n    def doIt(self, args):\n        self.redoIt()\n        print(\"Created '%s'\" % self._name)\n\n    def undoIt(self):\n        om.MGlobal.deleteNode(self._node)\n        print(\"Deleted '%s'\" % self._name)\n\n    def redoIt(self):\n        fn = om.MFnDagNode()\n        self._node = fn.create(\"transform\")\n        self._name = fn.name()\n        print(\"Re-created '%s'\" % self._name)\n\n    def isUndoable(self):\n        return True\n\n    @staticmethod\n    def cmdCreator():\n        return MyCommand()\n\n\ndef initializePlugin2(plugin):\n    pluginFn = om.MFnPlugin(plugin)\n    pluginFn.registerCommand(MyCommand.kPluginCmdName, MyCommand.cmdCreator)\n\n\ndef uninitializePlugin2(plugin):\n    pluginFn = om.MFnPlugin(plugin)\n    pluginFn.deregisterCommand(MyCommand.kPluginCmdName)\n</code></pre> <p>Apart from a few syntactical differences, this is pretty vanilla Command Pattern.</p> <p>You can call it like this.</p> <pre><code>from maya import cmds\ncmds.loadPlugin(\"my_command.py\")\ncmds.myCommand()  # doIt is called\ncmds.undo()\ncmds.redo()\n# Created transform1\n# Deleted transform1\n# Re-created transform1\n</code></pre> <p>There are however two problems with this approach that make it unsuitable for use in scripting with Python. For starters, we must register each command as a plug-in, and the name of each plug-in must be unique as it will be present in Maya's own <code>maya.cmds</code> module. Secondly, you have to implement the opposite command for every command you do!</p> <p>Consider the case of an auto rigger.</p> <pre><code>class CreateRig(om.MPxCommand):\n    kPluginCmdName = \"createRig\"\n\n    def doIt(self, args):\n        spine = self.create_limb()\n        left_arm = self.create_limb(parent=spine)\n        right_arm = self.create_limb(parent=spine)\n        left_leg = self.create_limb(parent=spine)\n        right_leg = self.create_limb(parent=spine)\n        head = self.create_head(parent=spine)\n\n    def undoIt(self):\n        # Undo everything we just did!\n        pass\n</code></pre> <p>Imagine the amount of state you would need to keep track of in order to undo such a thing. No longer just a <code>self._node</code> but many dependent nodes and attributes, that need to be deleted and reset in the proper order (children first) and attributes potentially created on nodes outside of those created by this one command.</p> <p>You'd have to be pretty dedicated to go this route, even Autodesk (Alias, rather) thought so too, which is why they gave us the modifier.</p> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#modifier-primer","title":"Modifier Primer","text":"<p>Maya provides a means of wrapping one or more commands into an undoable chunk called a \"modifier\".</p> <p>There are 2 flavours.</p> <ul> <li><code>MDGModifier</code> for DG related modifications</li> <li><code>MDagModifier</code> for DAG related modifications</li> </ul> <p>The DG handles things like creating DG nodes, connecting things, renaming things. Whereas the DAG version handles parenting and creating DAG nodes.</p> <pre><code>mod = maya.api.OpenMaya.MDagModifier()\nnode1 = mod.createNode(\"transform\", name=\"hello1\")\nnode2 = mod.createNode(\"transform\", name=\"hello2\")\nmod.doIt()\n</code></pre> <p>Points of interest:</p> <ul> <li>Nothing happens until <code>doIt</code> is called</li> <li>Not every possible command is accessible via <code>MDagModifier</code><ul> <li>Such as changing the keyable state of an attribute</li> <li>Such as changing the min and max of a float</li> <li>Such as playing or pausing the Maya timeline</li> <li>Such as interacting with Maya's UI in any way</li> </ul> </li> </ul> <p>But this still doesn't grant you the ability to undo. Instead, you have:</p> <pre><code>mod.undoIt()\n</code></pre> <p>Which has nothing to do with undo you know - i.e. Ctrl + Z - it's merely a command you can call yourself do undo whatever was done up until <code>doIt</code>. The modifier has been keeping a log of every command you've done, so as to perform the opposite in the same order as you did. So to incorporate this with what you know as undo you need one more ingredient, the command.</p> <p>Here's one way to couple the modifier and command.</p> <pre><code>class MyUndoCommand(maya.api.OpenMaya.MPxCommand):\n    def __init__(self):\n        self._modifier = None\n\n    def doIt(self, args):\n        self._modifier = _GLOBAL_MODIFIER\n        _GLOBAL_MODIFIER = None\n\n    def undoIt(self, args):\n        self._modifier.undoIt()\n\n    def redoIt(self, args):\n        self._modifier.redoIt()\n</code></pre> <p>Maya will create an instance of this command and store it, so by storing the last modifier inside of it, Maya will ensure the right modifier is called at the right time.</p> <p>Aside from some minutia, this is how both cmdx and omx solves this problem.</p> <pre><code>from AL import omx\nmod = omx.XModifier(immediate=False)\nmod.createDagNode(\"transform\")\ncmds.AL_OMXCommand()  # Fetch and store this latest modifier\n\nimport cmdx\nmod = cmdx.DagModifier()\nmod.createNode(\"transform\")\ncmds.cmdx_0_6_3_command()\n</code></pre> <p>And in both cases, this command is hidden from view and is automatically called.</p> <pre><code>from AL import omx\nmod = omx.XModifier(immediate=False)\nmod.createDagNode(\"transform\")\n\nimport cmdx\nwith cmdx.DagModifier() as mod:\n    mod.createNode(\"transform\")\n</code></pre> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#modifiers","title":"Modifiers","text":"<p>Given what we now know, you might be thinking \"modifiers, where have you been all my life!?\". And it's true they provide something rather unique, but they can be both a blessing and a curse.</p> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#blessing","title":"Blessing","text":"<p>Since nothing happens until you call <code>doIt()</code> that also means that if anything goes wrong up until that point, your Maya scene will be unaffected by anything that preceeded it.</p> <pre><code>mod.createNode(\"transform\")\ncond = mod.createNode(\"condition\")\nmod.addAttr(cond, attr)\nmod.createNode(\"BAD\")  # &lt;---\nmod.doIt()\n</code></pre> <p>With MEL, cmds and Pymel, the above would produce an error and leave your scene is a dirty state. As a user, you never know what has been created and what has not; was it enough to carry on? Do you need to undo and try again? Can you even undo, or has the undo queue been disrupted already?</p> <p>With a modifier, an error is produced..</p> <pre><code>Traceback (most recent call last):\n  File \"C:\\github\\test.py\", line 8, in &lt;module&gt;\n    a = mod.createNode(\"BAD\")\nTypeError: invalid node type\n</code></pre> <p>..and since <code>doIt()</code> was never called nothing will have happened! This is very nice.</p> <p>Consider the case of an auto-rigger, where multiple functions and multiple modules call on each other to produce the final result. If anything breaks, an error is produced and nothing will have changed.</p> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#curse","title":"Curse","text":"<p>There are however 2 main drawbacks to this approach.</p> <ol> <li>Source of error is hard to spot</li> <li>Not every command is available via a modifier</li> </ol> <p>(2) means that there are things you cannot do with a modifier, and thus cannot capture their undo. For example, you cannot <code>cmds.play()</code> and you cannot manipulate the Maya UI in any way and you cannot change the min and max of attributes.</p> <p>(1) however is the most damning.</p> <p>Consider the case of a real-world production project, 15 modules, 150 functions, thousands of calls to generate a character rig. Creating nodes, adding and connecting attributes, setting values; the works.</p> <pre><code>from maya.api import OpenMaya as om\n\nmod = om.MDagModifier()\na = mod.createNode(\"transform\")\n\nfn1 = om.MFnDependencyNode(a)\n\nplug1 = fn1.findPlug(\"tx\", False)\nplug2 = fn1.findPlug(\"rx\", False)\nplug3 = fn1.findPlug(\"sx\", False)\n\n# Locked attributes cannot be connected\nplug2.isLocked = True\n\nmod.connect(plug1, plug2)\nmod.connect(plug2, plug3)\n\nmod.doIt()\n</code></pre> <p>And then, an error is thrown. Here's what you'll see.</p> <pre><code>Error: Connection not made: 'unitConversion1.output' -&gt; 'transform2.rotateX'.  Destination is locked.\nTraceback (most recent call last):\n  File \"example.py\", line 18, in &lt;module&gt;\n    mod.doIt()\nRuntimeError: (kFailure): Unexpected Internal Failure\n</code></pre> <p>And here's the kicker; the error occurs at line 18. At <code>mod.doIt()</code>.</p> <p>In this example - with only 1 call to <code>connect</code> - the source is obvious. But you can already see how <code>unitConversion1.output</code> is not what you wrote. It's automatically created by the modifier, and is part of the error message. In this hypotethical production example, these errors can start to get near impossible to debug.</p> <p>Other times, you won't get an error at all until it's too late.</p> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#silently-adding-duplicate-attributes","title":"Silently adding duplicate attributes","text":"<pre><code>mod = om.MDGModifier()\nnode1 = mod.createNode(\"multMatrix\")\n\nfn = om.MFnNumericAttribute()\nattr1 = fn.create(\"myAttr\", \"at\", om.MFnNumericData.kFloat)\nattr2 = fn.create(\"myAttr\", \"at\", om.MFnNumericData.kDouble)\n\nmod.addAttribute(node1, attr1)\nmod.addAttribute(node1, attr2)\n\nmod.doIt()\n# No error\n</code></pre> <p>Now you're left with 2 duplicate attributes. This is not allowed by the Maya API and will likely segfault if you try and operate on either of these once they are done.</p> <p>Under normal, non-modifier circumstances, an error would occur when attempting to add an attribute that already exists.</p> <pre><code>from maya import cmds\ncmds.addAttr(\"persp\", ln=\"myAttr\", at=\"float\")\ncmds.addAttr(\"persp\", ln=\"myAttr\", at=\"double\")\n# Warning: Name 'myAttr' of new attribute clashes with an existing attribute of node 'persp'.\n# Traceback (most recent call last):\n#   File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n# RuntimeError: Found no valid items to add the attribute to.\n</code></pre> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#interoperability-with-non-modifiers","title":"Interoperability with non-modifiers","text":"<p>Modifiers know about the surrounding API, but the surrounding API does not know about modifiers.</p> <pre><code>from maya.api import OpenMaya as om\n\nmod = om.MDagModifier()\nnode = mod.createNode(\"transform\")\n\n# (1)\nfn = om.MFnNumericAttribute()\nlength = fn.create(\"length\", \"le\", om.MFnNumericData.kFloat)\nmod.addAttribute(node, length)\n\n# (2)\nfn = om.MFnDependencyNode(node)\nplug = fn.findPlug(\"at\", False)\nmod.newPlugValueFloat(plug, 5.3)\n\nprint(plug.asFloat())\n</code></pre> <p>In this case, (1) is a modifier given data created outside of the modifier, this is fine.</p> <p>But at (2), a non-modifier is operating on modifier data; this won't work because the data has not yet been created. We haven't yet called <code>doIt()</code>. Neither the attribute nor node exists yet. The <code>MObject</code> passed to <code>MFnDependencyNode</code> is essentially invalid.</p> <p>We can work around this by calling <code>doIt()</code> multiple times.</p> <pre><code>from maya.api import OpenMaya as om\n\nmod = om.MDagModifier()\nnode = mod.createNode(\"transform\")\n\n# (1)\nfn = om.MFnNumericAttribute()\nlength = fn.create(\"length\", \"le\", om.MFnNumericData.kFloat)\nmod.addAttribute(node, length)\nmod.doIt()  # Prepare attribute for the below call\n\n# (2)\nfn = om.MFnDependencyNode(node)\nplug = fn.findPlug(\"at\", False)\nmod.newPlugValueFloat(plug, 5.3)\nmod.doIt()  # Again prepare the the *next* call\n\nprint(plug.asFloat())\n</code></pre> <p>Each time <code>doIt()</code> is called, it will only perform the newly created operations since the last <code>doIt()</code>. The <code>undoIt()</code> on the other hand will undo all operations. Just as one would expect.</p> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#armour","title":"Armour","text":"<p>Both <code>omx</code> and <code>cmdx</code> had the same brilliant idea of recording commands made with the modifier, such that they can be printed out on error. Something Maya really should be doing already.</p> <pre><code>node[\"rx\"].lock()\n\nwith cmdx.DagModifier() as mod:\n    mod.connect(node[\"tx\"], node[\"rx\"])\n\n# cmdx.ModifierError: An unexpected internal failure occurred, these tasks were attempted:\n# - connect('|transform1.translateX', '|transform1.rotateX')\n# - connect('|transform1.rotateX', '|transform1.scaleX')\n</code></pre> <p><code>cmdx</code> incorporates common sources of error into the modifier, so the above for example would error immediately.</p> <pre><code># cmdx.LockedError: Channel locked, cannot connect 'rotateX'\n</code></pre> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#comparison","title":"Comparison","text":"<p>Let's compare the use of modifiers and commands between cmdx and omx.</p> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#mdgmodifier","title":"MDGModifier","text":"<p>Let's look at how users interface with modifiers through cmdx and omx.</p> <p>omx</p> <pre><code>import omx\nfrom maya.api import OpenMaya as om2\n\nmod = omx.currentModifier()\nmod.createNode(...)\nmod.addAttribute(...)\n\n# Current modifier implicitly called\njoint.radius.setFloat(...)\n\nmod.commandToExecute(...)\nmod.doIt()\n</code></pre> <p>cmdx</p> <pre><code>import cmdx\n\nwith cmdx.DagModifier() as mod:\n    joint = mod.createNode(...)\n    mod.addAttr(...)\n    mod.setAttr(...)\n</code></pre> <p>When I first started writing <code>cmdx</code> I desperately wanted to avoid exposing the modifier directly, as it added another layer of complexity compared to <code>cmds</code> and <code>PyMEL</code>. By having a \"current\" modifier somewhere globally accessible, you can make naked calls like <code>joint.radius.setFloat</code> take advantage of it without the user explicitly calling on it.</p> <pre><code># omx/_xplug.py:119\ndef setFloat(self, value):\n    _currentModifier().newPlugValueFloat(self, value)\n</code></pre> <p>The problem is that it was never clear which call made use of this global modifier and which did not.</p> <pre><code># We know this does\njoint.radius.setFloat(3.5)\n\n# But how about this?\njoint.myArray.append(5)\n\n# ..and this?\njoint.tx.locked = True\n\n# hmm..\njoint.visibility.setDoNotWrite(True)\n</code></pre> <p>With <code>cmdx</code>, all undoable things are encapsulated in the modifier. Things outside of it are not immediately undoable.</p> <pre><code>with cmdx.DagModifier() as mod:\n    mod.createNode(...)  # Undoable\n    mod.addAttr(...)     # Undoable\n    mod.setAttr(...)     # Undoable\n\nnode[\"myArray\"].append(5)      # Not undoable\nnode[\"attr\"].storable = False  # Not undoable\n</code></pre> <p>For hand-rolled undoable operations, there is <code>cmdx.commit</code>.</p> <pre><code>import cmdx\n\nhistory = []\nhistory.append(cmdx.createNode(\"transform\"))\nhistory.append(cmdx.createNode(\"condition\"))\nhistory.append(cmdx.createNode(\"multMatrix\"))\n\ndef undo():\n    cmdx.delete(history)\n\ncmdx.commit(undo)\n</code></pre> <p>Which is what <code>cmdx.DagModifier</code> uses too.</p> <pre><code>class Modifier:\n    # ...\n\n    def __exit__(...):\n        cmdx.commit(self.undoIt, self.redoIt)\n</code></pre> <p>Although in practice I have never had to use this in Ragdoll.</p> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#mpxcommand","title":"MPxCommand","text":"<p>Another subtle difference between omx and cmdx is how they store their modifiers.</p> <p>omx</p> <p>_xcommand.py#L40</p> Highlight Comment Implicit list of modifiers There exists this notion of a \"current\" modifier, and apparently there can be many. They are stored together in the same command. Instances Modifier instances themselves are stored alongside the command. Potentially problematic given that one cannot inspect what commands are in Maya's undo buffer at any given time and thus cannot confirm they do what you expect. <pre><code>def getAndClearModifierStack():\n    global _CURRENT_MODIFIER_LIST\n    existingMods = []\n    for xmod in _CURRENT_MODIFIER_LIST:\n        if isinstance(xmod, XModifier):\n            if xmod.isClean():\n                continue\n            mmod = xmod._modifier  # NOQA\n        else:\n            mmod = None\n        logger.debug(\"Retrieving mod %r from list for execution\", mmod)\n        existingMods.append(DoItModifierWrapper(xmod, mmod))\n    _CURRENT_MODIFIER_LIST = []\n    return existingMods\n\nclass XCommand(om2.MPxCommand):\n    def __init__(self):\n        # ...\n        self._modifiers = _xmodifier.getAndClearModifierStack()\n\ncmds.AL_OMXCommand()\n</code></pre> <p>cmdx</p> <p>The <code>undo</code> and <code>redo</code> commands are stored in a shared location, accessible to both the <code>cmdx</code> module and plug-ins made with <code>cmdx</code>.</p> <p>cmdx.py#L8407</p> Highlight Comment <code>unique_command</code> cmdx supports vendoring, whereby there may be multiple instances of <code>cmdx</code> on the <code>sys.path</code> any given time, of different versions. Therefore, they each use a unique name for their command. Addresses Undo and redo addresses are stored in a shared memory location, accessible from outside of Maya's undo queue for inspection, along with inside of new Maya commands made with <code>cmdx</code>. <pre><code>class _apiUndo(om.MPxCommand):\n    def doIt(self, args):\n        self.undoId = shared.undoId\n        self.redoId = shared.redoId\n\ndef commit(undo, redo=lambda: None):\n    shared.undoId = \"%x\" % id(undo)\n    shared.redoId = \"%x\" % id(redo)\n    shared.undos[shared.undoId] = undo\n    shared.redos[shared.redoId] = redo\n\n    getattr(cmds, unique_command)()\n</code></pre> <p>To the end user, the behavious is identical. There really only is 1 way to undo and redo, anything else is a bug.</p> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#omx-and-the-current-modifier","title":"omx and the \"Current Modifier\"","text":"<p>Given what we know know about undo inside of Maya, with modifiers and commands, it was interesting to see the notion of a \"current\" modifier in <code>omx</code>.</p> <p>Consider this.</p> <pre><code># module1.py\ndef function1():\n    mod = omx.currentModifier()\n    mod.createNode(...)\n\n# module2.py\ndef function2():\n    mod = omx.currentModifier()\n    mod.setAttr(...)\n</code></pre> <p>To the naked eye, both of these functions, in these two separate Python modules, call on the same \"current\" modifier. In which case, by the end of your multi-file, multi-function call you must be incredibly lucky to not have encountered a single error - user or otherwise - for the function to have executed perfectly and without error. Only then will you get undo and only then will your scene state be safe. Because yes - as opposed to errors occurring prior to calling <code>doIt()</code> - modifiers will still have executed all commands prior to the one that failed, leaving you with a mess and no undo.</p> <p>But having looked closer at the omx source code, this is not the case. Instead, <code>doIt</code> is frequently called automatically - such as when both creating and deleting new nodes - leaving me wondering what the purpose of a \"current\" modifier is, given that there is also a <code>omx.newModifier()</code>?</p> <p>cmdx deals with this by encouraging small batches of modifiers.</p> <pre><code>def function1():\n    with cmdx.DagModifier() as mod:\n        mod.createNode(...)\n\ndef function2():\n    with cmdx.DagModifier() as mod:\n        mod.setAttr(...)\n</code></pre> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#xmodifier-implementation","title":"XModifier Implementation","text":"<p>omx provides:</p> <ul> <li><code>omx.newModifier()</code></li> <li><code>omx.currentModifier()</code></li> </ul> <p>Whereby <code>currentModifier</code> will create a new modifier if there is no modifier. I was expecting this to keep returning the same modifier until I call <code>newModifier</code>, but this wasn't the case.</p> <pre><code>mod = omx.currentModifier()\nassert mod is omx.currentModifier()\nmod.createDagNode(\"joint\")\nassert mod is omx.currentModifier()  # AssertionError\n</code></pre> <p>Furthermore, the documentation states:</p> <p>If <code>AL.omx.XModifier._immediate</code> is True, whenever you call its method to edit Maya\u2019s scene data, it will call <code>doIt()</code> to apply the edit to the scene immediately. On the other hand, if <code>AL.omx.XModifier._immediate</code> is False, then you\u2019ll have to manually call <code>AL.omx.doIt()</code> or <code>XModifier.doIt()</code> to apply the edit.</p> <p>However this does not appear true.</p> <pre><code>mod = omx.XModifier(immediate=False)\nassert not mod._immediate\nmod.createDagNode(\"joint\")  # Still creates the joint\n# mod.doIt()\n</code></pre> <p>There is a comment in the source explaining why.</p> <p>\"To get a valid MObjectHandle in XNode the creation needs to happen right away\" - Source</p> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#extras","title":"Extras","text":"<p>Let's highlight some other points of interest.</p> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#commandtoexecute","title":"commandToExecute","text":"<p>One of the things I struggled with was incorporating non-modifier commands in a modifier context, like locking attributes.</p> <p><code>omx</code> handles this by utilising <code>MDGModifier.commandToExecute</code> which queues a (MEL) command to execute at the right time, which I thought was very nice.</p> <p>omx</p> <p>Elegant method of handling this scenario.</p> <pre><code>class Modifier:\n    def setLocked(self, locked):\n        cmd = f\"setAttr -locked {locked} {self}\"\n        _currentModifier().commandToExecute(cmd)\n</code></pre> <p>There is also <code>pythonCommandToExecute</code> which does the same but with a Python command instead.</p> <p>cmdx</p> <p>Manual way, which will likely be converted to <code>pythonCommandToExecute</code> instead.</p> <pre><code>class Modifier:\n    def setLocked(self, plug, value=True):\n        self._lockAttrs.append((plug, value))\n\n    def _doLockAttrs(self):\n        while self._lockAttrs:\n            plug, value = self._lockAttrs.pop(0)\n            elements = plug if plug.isArray or plug.isCompound else [plug]\n\n            for el in elements:\n                cmds.setAttr(el.path(), lock=value)\n\n    def __exit__(self):\n        self.redoIt()\n        self._doLockAttrs()\n</code></pre> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#animation","title":"Animation","text":"<p>Shorthand for animating values.</p> <pre><code>node = cmdx.createNode(\"transform\")\nnode[\"tx\"] = {\n    1: 0.0,\n    5: 1.0,\n    10: 0.0\n}\n</code></pre> <p>This sets keyframes on frames 1, 5 and 10, with values 0, 1 and 0 respectively.</p> <ul> <li>Read more: https://github.com/mottosso/cmdx?tab=readme-ov-file#animation</li> </ul> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#units","title":"Units","text":"<p>It might surprise you to know that <code>cmds</code> returns units relative the units your UI is configured to.</p> <pre><code># cm, meters or feet?\nheight = cmds.getAttr(\"persp.ty\")\n</code></pre> <p>Which is convenient sometimes, but not often!</p> <p><code>cmdx</code> on the other hand always returns <code>cm</code> and <code>radians</code>, unless you specify otherwide.</p> <pre><code>height = persp[\"ty\", cmdx.Centimeters]\nheight = persp[\"ty\", cmdx.Meters]\n</code></pre> <ul> <li>Read more: https://github.com/mottosso/cmdx?tab=readme-ov-file#units</li> </ul> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#math","title":"Math","text":"<p>All of the Maya math classes are available via <code>cmdx</code> and may be directly passed (and gotten) as attribute values.</p> <pre><code>node = cmdx.createNode(\"transform\")\nnode[\"ty\"] = 5\nmtx = node[\"worldMatrix\"][0].as_matrix()\n\n# Store Y-transform as offset\nnode[\"offsetParentMatrix\"] = mtx\nnode[\"ty\"] = 0\n\n# Do some math\nmtx_inverse = node[\"worldMatrix\"][0].as_matrix_inverse()\nnode[\"newAttr\"] = cmdx.MatrixType()\nnode[\"newAttr\"] = mtx * mtx_inverse\n</code></pre> <ul> <li>Read more: https://github.com/mottosso/cmdx?tab=readme-ov-file#native-types</li> </ul> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#pep8","title":"PEP8","text":"<p>All of <code>cmdx</code> is available both as Maya-standard camelCase but also as <code>camel_case</code>.</p> <pre><code>cmdx.createNode(\"transform\")\ncmdx.create_node(\"transform\")\n</code></pre> <p>As such, it'll fit into any codebase, no matter the convention!</p> <p>Under the hood, the members are simply aliases of each other, so the functionality remains the same.</p> <pre><code>def createNode(...):\n    pass\n\n# Alias\ncreate_node = createNode\n</code></pre> <ul> <li>Read more: https://github.com/mottosso/cmdx?tab=readme-ov-file#pep8-dual-syntax</li> </ul> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#generate-curves","title":"Generate Curves","text":"<p>Generate curves with a lot less code than the Maya API!</p> <pre><code>import cmdx\n\nparent = cmdx.createNode(\"transform\")\nshape = cmdx.curve(parent, [\n    (0, 0, 0),  # first CV point\n    (0, 1, 0),  # second CV point\n    (0, 2, 0),  # ...\n])\n</code></pre> <ul> <li>Read more: https://github.com/mottosso/cmdx?tab=readme-ov-file#geometry-types</li> </ul> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#cmdc","title":"cmdc","text":"<p>Have a look at the little brother of cmdx called <code>cmdc</code>, a complete re-implementation of Maya's API, a.k.a. \"Maya Python API 3.0\"</p> <ul> <li>https://github.com/mottosso/cmdc</li> </ul> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#more","title":"More","text":"<p>Read more about cmdx and the tons of quality-of-life features incorporated over the years here.</p> <ul> <li>https://github.com/mottosso/cmdx</li> </ul> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#feedback","title":"Feedback","text":"<p>Let me know what you think of the above summary! You can reach me at marcus@ragdolldynamics.com or via the Ragdoll forums. The post is intended for Maya developers at large, but also the developers of omx and anyone using omx or cmdx with a desire to better understand the things it does for you, under that hood.</p> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#try-it","title":"Try it","text":"<p>That's all I got! Take both cmdx and omx for a spin via pip.</p> <pre><code>mayapy -m pip install AL_omx\nmayapy -m pip install cmdx\n</code></pre> <ul> <li>https://pypi.org/project/cmdx</li> <li>https://pypi.org/project/AL-omx</li> </ul> <p></p>"},{"location":"blog/20240101_omx_vs_cmdx/#read-more","title":"Read more","text":"<p>There's a topic created in the omx repository with some more discussion.</p> <ul> <li>https://github.com/AnimalLogic/AL_omx/issues/3</li> </ul>"},{"location":"blog/20240319_ethical_branding/","title":"20240319 ethical branding","text":"<p>How to make yourself known without unethical practices.</p> <ul> <li>Wrapped Links - Links wrapped in a tracker, e.g. website link wrapped in an amplitude.com analytics redirect</li> <li>False Location</li> <li>False Features</li> </ul> <p></p>"},{"location":"blog/20240319_ethical_branding/#location","title":"Location","text":"<p>Saying you are somewhere, but are actually somewhere else. For example, advertising that you are in London when you are really in Italy. Why? Because London is known, familiar and ripe with the tools of your industry. Because money. Manipulation for money. That's unethical.</p> <p>Or how about advertising that you are in Cyprus when you are really in Russia. Why? Because Russa isn't too hot right now, so it may impact your brand. I.e. money. Manipulation for money. That's unethical.</p> <p></p>"},{"location":"blog/20240319_ethical_branding/#features","title":"Features","text":"<p>Advertising that something is done in X amount of time, when really it's X+n amount of time (e.g. Adonis and the \"2 clicks\" which was 10+ clicks). Why? Faster is better. Therefore, money. Manipulation for money. That's unethical.</p>"},{"location":"documentation/cache/","title":"Cache","text":"<p>The fundamental building block to Ragdoll, for \"reverse motion capture\" or Animation Capture.</p> <p></p>"},{"location":"documentation/cache/#caching","title":"Caching","text":"<p>Ragdoll runs alongside your character animation, but sometimes it can be useful to keep the results from a previous run and stop being so interactive.</p> <p>Meet <code>Cache</code> and <code>Uncache</code>.</p> <p></p> <p>Caching is entirely non-destructive, and in fact leverages the very same cache you've been enjoying all this time whenever rewinding.</p> <p>The menu commands toggle an attribute on your solver node, called <code>.cache</code> and automatically plays the entire timeline for you. But the same result can be achieved by setting the attribute and playing it yourself.</p> <p></p> <p>The minimal HUD will show you what's been cached, and like before once you resume playback from a cached to an uncached frame, Ragdoll will continue filling up the cache as one would expect.</p> <p>Look forward to a future release where caching happens in the background, as you work. Something that can also be handy from time to time (pun!).</p>"},{"location":"documentation/constraints/","title":"Constraints","text":"<p>Establish a relationship between two markers.</p> <p></p>"},{"location":"documentation/constraints/#constraints","title":"Constraints","text":"<p>You can constrain one marker to another!</p> Constraint Type Description Weld Constraint Simplest of constraints, welds two markers together; no change to their distance or relative orientation is allowed. This is akin to the Maya <code>Parent Constraint</code> Distance Constraint Maintain a minimum, maximum or total distance between two markers. Pin Constraint Match a position and orientation in worldspace, similar to <code>Drive Space = World</code>. <p></p> <p></p>"},{"location":"documentation/constraints/#weld","title":"Weld","text":"<p>Maintain the position and orientation of one marker relative another from the first frame onwards.</p> <p></p> <p></p> <p></p>"},{"location":"documentation/constraints/#distance","title":"Distance","text":"<p>A simple but versatile constraint with animatable distance.</p> <p>Maintain Start Distance</p> <p>Whatever the distance between two markers, it will be maintained throughout a simulation.</p> <p></p> <p>Minimum Distance</p> <p>Alternatively, only respond to when two controls get too close.</p> <p></p> <p>Maximum Distance</p> <p>Conversely, keep markers from getting too far away from each other.</p> <p></p> <p>Custom Distance</p> <p>Or go all-in, with both a minimum and maximum distance, for the most complex behavior.</p> <p></p> <p>Offsets</p> <p>Control at which point on a control to measure the distance.</p> <p></p> <p>Animated Distance</p> <p>Both min and max distance, along with stiffness and damping, can be animated for some pretty rad effects.</p> <p></p> <p>Hard Distance</p> <p>A <code>Stiffness = -1</code> means the constraint is \"hard\". It will not accept any slack or \"springiness\".</p> <p>In this example, the distance is animated whilst soft, and transitioned into a hard constraint. Notice how it snaps into place once hard.</p> <p></p> <p>Limitation</p> <p>A limitation of a hard constraint is that the distance cannot be animated whilst hard. You can however animate it between values of -1 and above, to transition to and from hard to soft.</p> <p></p>"},{"location":"documentation/constraints/#pin","title":"Pin","text":"<p>Pin the translation and/or rotation of a Marker in worldspace.</p> <p></p>"},{"location":"documentation/environment/","title":"Environment","text":"<p>Collide against complex but immovable geometry.</p> <p></p>"},{"location":"documentation/environment/#environment","title":"Environment","text":"<p>Ragdoll supports static environments; meaning environments that cannot move or deform, but allow for normal polygonal geometry without the need for a simplified \"convex hull\".</p> <p>As you might expect, this works well for environments like terrain and other complex geometry that is otherwise hard to turn into a rounded mesh.</p> <p></p> <p></p>"},{"location":"documentation/environment/#performance","title":"Performance","text":"<p>It's fast.</p> <p>Normal shapes are limited in how complex they can get, and as such you never really run into a situation where the shape noticeably affects performance.</p> <p>Triangle meshes are different; they can be of any complexity. Up to millions of polygons and beyond. So it falls upon you to decide where to make the performance/quality tradeoff!</p> Vertex Count Cooking Time Run-time performance 400 0.39 ms 685 fps 8'000 3.51 ms 599 fps 16'000 14.3 ms 594 fps 64'000 61.5 ms 327 fps 256'000 287.7 ms 40 fps 1'000'000 1490 ms 2 fps <p>What is cooking time?</p> <p>The time it takes for Ragdoll to convert your polygonal geometry into the internal representation needed for collision detection. It involves splitting up the mesh into areas or \"zones\" for faster lookup.</p> <p>This only happens when the mesh actively changes and when first opening the Maya scene, and won't affect playback speed.</p> <p></p>"},{"location":"documentation/export_physics/","title":"Export Physics","text":"<p>Export physics from one scene, for import into another scene.</p> <p>Coming Soon</p> <p>Scheduled for release in January 2022</p>"},{"location":"documentation/fields/","title":"Fields","text":"<p>Environmental effects like Wind and Turbulence for your Markers.</p> <p></p>"},{"location":"documentation/fields/#fields","title":"Fields","text":"<p>Ragdoll supports all of Maya's native \"fields\"</p> <p>What are fields?</p> <p>A field represents a set of forces applied to each Marker. Ranging from <code>Gravity</code> to <code>Turbulence</code>, each field carries unique properties you can use to emulate some environment or environmental effect, like wind and gravity fields along a curve.</p> <p>What is the difference from regular Maya fields?</p> <p>They are the very same!</p> <p>If you're already familiar with them, from e.g. nParticles of nCloth, then you can leverage your experience with Ragdoll, and vice versa if you ever venture into nCloth and friends.</p> <p></p> <p></p>"},{"location":"documentation/fields/#overview","title":"Overview","text":"<p>Let's walk through these fields one-by-one.</p> <p></p>"},{"location":"documentation/fields/#turbulence","title":"Turbulence","text":"<p>The perhaps most interesting field. Apply forces in \"random\" directions, based on the worldspace positions of your Markers.</p> <p></p> <p></p> <p>The way to think of turbulence is as Perlin Noise you may have seen in images such as this.</p> <p></p> <p>Where the amount of white determines the amount of force being applied. As a Marker travels across this field, both the magnitude and direction changes in interesting ways.</p> <p></p>"},{"location":"documentation/fields/#drag","title":"Drag","text":"<p>Apply an opposite force to any motion.</p> <p>The faster things move, the greater the force.</p> <p>Pro tip</p> <p>This field is similar to Ragdoll's <code>Air Density</code>. Not technically, but practically.</p> <p></p> <p></p>"},{"location":"documentation/fields/#wind","title":"Wind","text":"<p>Apply a uniform force, at a given speed, in a given direction. Like wind, including a kitchen fan with some <code>Spread</code>.</p> <p></p> <p></p>"},{"location":"documentation/fields/#gravity","title":"Gravity","text":"<p>A familiar force, except this one can be also be animated!</p> <p></p> <p></p>"},{"location":"documentation/fields/#newton","title":"Newton","text":"<p>Force Markers towards or away from a point in space.</p> <p></p> <p></p>"},{"location":"documentation/fields/#radial","title":"Radial","text":"<p>A more curious field; with a force which increases as it gets farther from the source.</p> <p></p> <p></p>"},{"location":"documentation/fields/#uniform","title":"Uniform","text":"<p>Apply a constant force. That's all.</p> <p></p> <p></p>"},{"location":"documentation/fields/#vortex","title":"Vortex","text":"<p>Apply forces in a circular pattern.</p> <p></p> <p></p>"},{"location":"documentation/fields/#volume-axis-field","title":"Volume Axis Field","text":"<p>A field for when you don't know what field you want.</p> <p>A true Swiss Army Knife of fields, can do everything from Vortex, to Newton to Turbulence in one convenient node.</p> <p></p> <p></p>"},{"location":"documentation/fields/#volume-curve","title":"Volume Curve","text":"<p>Have some fun with this curve-based field. Perhaps to emulate an underwater current?</p> <p>In this example, I'm also using a <code>Drag</code> field to keep things from flying off into space.</p> <p>Pro tip</p> <p>The curve is a normal Maya NURBS curve. If you need more points, right click and add points as you normally would.</p> <p></p> <p></p>"},{"location":"documentation/fields/#combined-fields","title":"Combined Fields","text":"<p>Make two or more fields to combine their effect and create complex forces or series of forces!</p> <p></p> <p></p>"},{"location":"documentation/fields/#centroids","title":"Centroids","text":"<p>Where within each Marker should a field apply forces?</p> <ul> <li> Center of Mass</li> <li> Volumetric</li> </ul> <p>At the center, forces will be nice and predictable; except they won't be able to introduce rotations to your Marker, which may or may not be what you want. For the most realistic fields, use volumetric centroids.</p> <p></p> <p></p> <p>Here's another example using the Turbulence Field.</p> <p></p> <p></p> <p>Which is better?</p> <p>Up to you! There is a tiny performance penalty for volumetric origins, as the number of forces increase. But you shouldn't notice much if any impact on performance.</p> <p></p>"},{"location":"documentation/fields/#centroid-seed","title":"Centroid Seed","text":"<p>For complex meshes, centroids can end up in unwanted locations or gather in an area with dense vertices. That's when you can give the algorithm a little jolt to try and see whether there is a better alternative out there.</p> <p></p> <p></p>"},{"location":"documentation/fields/#use-selected-as-source","title":"Use Selected as Source","text":"<p>Some forces act according to their position in the world. Attach a field to a Marker to create an interesting relationship between the two.</p> <p>Non-commercial Ragdoll</p> <p>This feature is limited to 100 frames in non-commercial versions of Ragdoll.</p> <p></p> <p></p> <p>Distance constrain two markers, and attach a field to the outer-most Marker for a doubly-interesting effect. That also wrecks your brain. \ud83d\ude43</p> <p></p> <p></p>"},{"location":"documentation/fields/#field-scale","title":"Field Scale","text":"<p>If forces start becoming large, you may find yourself in a situation where the visualisation needs to tone down just a bit.</p> <p>In the solver settings, you will find options to scale those lines (i.e. <code>Field Scale</code>), as well as control how many steps into the future (i.e. <code>Field Iterations</code>) it should draw for you.</p> <p></p> <p></p>"},{"location":"documentation/fields/#ignore-field","title":"Ignore Field","text":"<p>Fine-tune the effect of fields by having one or more Markers ignore the effect of fields.</p> <p></p> <p></p>"},{"location":"documentation/fields/#more","title":"More","text":"<p>Being native to Maya, Autodesk has some documentation of its own here.</p> <ul> <li>Maya's Fields Documentation.</li> </ul> <p>You may also search for fields on YouTube or ask your colleagues about them; any trick they've learnt may very well apply to Ragdoll as well!</p>"},{"location":"documentation/group/","title":"Group","text":"<p>Ragdolls are combined into what's called a \"group\", with attributes to control the overall behavior of all contained Markers.</p> <p></p>"},{"location":"documentation/group/#self-collision","title":"Self Collision","text":"<p>Previously, it was very important that your shapes did not overlap any shape other than it's immediate neighbour. If they did, chaos ensued.</p> <p>Before</p> <p>Clavicles intersect their parent spine, but also each other!</p> <p></p> <p>After</p> <p>With the new <code>Self Collision = Off</code>, this is no longer a problem.</p> <p></p> <p>This can be taken into the extreme!</p> <p></p> <p>And here's another example to fill out a large volume in the center of a character.</p> <p></p> <p>Attention</p> <p>Notice how the spine is made up of many shapes, some of which cover the width of the body, others the depth. An overlapping mess that would never have simply not have been possible without self-collision support!</p> <p></p> <p>Original asset created by Mehmet Tayfur T\u00fcrkmeno\u011fluwe and Dr. Reel, licensed by The Rookies.</p>"},{"location":"documentation/import_physics/","title":"Import Physics","text":"<p>Import physics onto existing controllers from disk.</p> <p></p>"},{"location":"documentation/import_physics/#import","title":"Import","text":"<p>You can import a Ragdoll setup exported from Maya, back into Maya. It'll re-create everything just the way it was.</p> What is included in the export? <p>Just about everything.</p> <ul> <li>Solvers</li> <li>Groups</li> <li>Markers</li> <li>Constraints</li> <li>Colors</li> <li>Attribute changes</li> <li>Retargeting</li> <li>Reparenting</li> <li>Replaced meshes</li> <li>Thumbnail of your viewport</li> </ul> What isn't included in the export? <p>Very little.</p> <ul> <li>The cached simulation</li> </ul> Will I get identical results when simulating an imported scene? <p>Yes, anything else is a bug.</p> <p>More precisely, determinism depends on (1) the type and number of items in the solver along with (2) the order in which these are created. Both of these are part of the exported file format and is taken into account during import. Meaning you should get identical results so long as the content is the same.</p> <p></p>"},{"location":"documentation/import_physics/#example","title":"Example","text":"<p>Here's an exported Ragdoll setup for the free CG Spectrum Tiger rig.</p> <ul> <li>Download Ragdoll file (<code>2.8 mb</code>)</li> <li>Download Rig</li> </ul> <p>To use it, download the rig and import the Ragdoll file.</p> <p> </p> <p>It contains 2 levels of detail.</p> Level Content Level 0 Body and feet Level 1 Everything on Level 0, plus toes <p></p> <p></p>"},{"location":"documentation/import_physics/#workflow","title":"Workflow","text":"<p>Here's the rundown.</p> <ol> <li>Assign markers</li> <li>Tweak values</li> <li>Export</li> <li>Open a new scene, with the same character</li> <li>Import</li> </ol> <p>On import, Ragdoll will try and find the names of what you exported in your currently opened scene.</p> <ul> <li>If all names match, import should go smoothly. Preserving all of your hard work!</li> <li>If names do not match, if for example the namespace differs, there is an option to override the namespace from the file via the <code>Namespace</code> dropdown menu.</li> <li>If names don't match at all, if for example it was grouped differently on export or it is a different character altogether, then you can try using the <code>Search and Replace</code> fields to modify the names searched for by Ragdoll.</li> </ul> <p>Export</p> <p>Once you're happy with your character, it's time to export. Towards the bottom of the UI, you'll get a preview of what is about to be exported. This can help clarify that what ends up on disk is what you expect.</p> <p></p> <p>Import</p> <p>In a new scene, with the same character, same names and everything, import as you'd expect. At the bottom of this UI, you'll get a preview of what's in the file on disk, along with how it will associate the node names found in the file with what you have on disk.</p> <p></p> <p></p>"},{"location":"documentation/import_physics/#namespace-from-file","title":"Namespace from File","text":"<p>Odds are, the character you're importing either has no namespace, or has a different namespace to what you've currently got in your scene. As in this example here, with 3 copies of the same character, each with its own namespace.</p> <p>Use the <code>Namespace</code> dropdown to select one of the current namespaces in your scene, or <code>Custom</code> to type one in yourself.</p> <p></p> <p></p>"},{"location":"documentation/import_physics/#solver-from-file","title":"Solver from File","text":"<p>Per default, Ragdoll will import the file into the current solver in your scene, if any. Or, you can import the original solver from the source file.</p> <p></p> <p></p>"},{"location":"documentation/import_physics/#known-limitations","title":"Known Limitations","text":"<p>Here are a few things that will be addressed over time. Let us know if you encounter anything else!</p> <ul> <li>Chat</li> <li>Forum</li> </ul> Limitation Result Missing Replaced Mesh If you replace the mesh of a marker, but this mesh isn't present in the scene during import, you'll get a Capsule instead. The vertices of the geometry isn't stored in the exported file, only the name of the mesh you replaced with. Linked Solvers These turn into a single, unified solver on import."},{"location":"documentation/level_of_detail/","title":"Level of Detail","text":"<p>Light-weight or heavy-duty? How about both!</p> <p></p>"},{"location":"documentation/level_of_detail/#level-of-detail","title":"Level of Detail","text":"<p>Setup your character once with all bells-and-whistles, and interactively pick which level of detail to use for your simulation in a given situation.</p> <p>Usecases</p> <ol> <li>Body at <code>Level 0</code>, fingers at <code>Level 1</code></li> <li>Props at <code>Level 1</code>, muscles at <code>Level 2</code></li> <li>Major masses at <code>Level 0</code>, extremities at <code>Level 1</code> and <code>Level 2</code></li> </ol> <p>For example, here's a Wasp character with 3 levels of increasing detail.</p> <p></p> <p>As you'd expect, it'll record only the currently active markers.</p> <p></p> <p></p>"},{"location":"documentation/level_of_detail/#workflow","title":"Workflow","text":"<p>Here's how it works.</p> <ol> <li>Give each marker a \"level\", such as <code>1</code></li> <li>Tell solver which \"level\" to solve at, such as <code>1</code></li> </ol> <p></p> <p>And that's it! Any marker with a matching level is simulated and recorded.</p> <p></p>"},{"location":"documentation/level_of_detail/#operators","title":"Operators","text":"<p>What does each level mean? The answer lies in the \"operator\".</p> Operator Description <code>Less Than</code> If the <code>Marker Level</code> is less than (or equal) to the <code>Solver Level</code>, simulate it. <code>Greater Than</code> If the <code>Marker Level</code> is greater than (or equal) to the <code>Solver Level</code>, simulate it. <code>Equal</code> If the <code>Marker Level</code> is equal to the <code>Solver Level</code>, simulate it. <code>NotEqual</code> If the <code>Marker Level</code> is not equal to the <code>Solver Level</code>, simulate it. <p>With these, you can use each level for..</p> <ol> <li>An increasing amount of detail</li> <li>An increasing amount of reduction</li> <li>Something completely custom</li> </ol> <p>With <code>Equal</code> and <code>NotEqual</code> operators, you can have some markers appear or disappear on particular levels, enabling endless combinations.</p> <p>Roadmap</p> <p>This should cover a majority of cases, but there are things you cannot yet do, but will be able to in the future.</p> <ol> <li><code>Capsule</code> on one level, <code>Mesh</code> on another. For higher-resolution contacts.</li> <li>Dense hierarchy of controls at one level, sparse at another. For e.g. twist joints versus a simple 2-joint chain, or a densely packed spine versus just hip and torso controls.</li> </ol> <p></p>"},{"location":"documentation/level_of_detail/#algorithm","title":"Algorithm","text":"<p>For the geeks out there, here's what the underlying algorithm looks like in Python.</p> <pre><code># Membership types\nMinimum = 1  # Present at this level and higher\nMaximum = 3  # Present at this level and lower\nOnly = 4     # Only present at this level\nNot = 5      # Present at all levels *except* this one\n\nmarkers = [\n    {\"name\": \"hip\", \"level\": 0, \"membership\": Minimum},\n    {\"name\": \"spine\", \"level\": 0, \"membership\": Minimum},\n    {\"name\": \"neck\", \"level\": 0, \"membership\": Minimum},\n    {\"name\": \"head\", \"level\": 0, \"membership\": Minimum},\n    {\"name\": \"L_upper_leg\", \"level\": 0, \"membership\": Minimum},\n    {\"name\": \"L_lower_leg\", \"level\": 0, \"membership\": Minimum},\n    {\"name\": \"R_hand\", \"level\": 1, \"membership\": Minimum},\n    {\"name\": \"L_foot_box\", \"level\": 1, \"membership\": Maximum},\n    {\"name\": \"L_foot_convex\", \"level\": 2, \"membership\": Minimum},\n    {\"name\": \"R_toe_capsule\", \"level\": 2, \"membership\": Not},\n    {\"name\": \"R_toe_convex\", \"level\": 2, \"membership\": Only},\n]\n\ndef resolve(level):\n    print(\"Level %d\" % level)\n    for marker in markers:\n        if marker[\"membership\"] == Minimum and marker[\"level\"] &lt;= level:\n            print(\" - {name} ({level})\".format(**marker))\n\n        if marker[\"membership\"] == Maximum and marker[\"level\"] &gt;= level:\n            print(\" - {name} ({level})\".format(**marker))\n\n        if marker[\"membership\"] == Only and marker[\"level\"] == level:\n            print(\" - {name} ({level})\".format(**marker))\n\n        if marker[\"membership\"] == Not and marker[\"level\"] != level:\n            print(\" - {name} ({level})\".format(**marker))\n\nresolve(0)\nresolve(1)\nresolve(2)\n</code></pre> <p>Run this, and this is what you'll find.</p> <pre><code>Level 0\n - hip (0)\n - spine (0)\n - neck (0)\n - head (0)\n - L_upper_leg (0)\n - L_lower_leg (0)\n - L_foot_box (1)\n - R_toe_capsule (2)\nLevel 1\n - hip (0)\n - spine (0)\n - neck (0)\n - head (0)\n - L_upper_leg (0)\n - L_lower_leg (0)\n - R_hand (1)\n - L_foot_box (1)\n - R_toe_capsule (2)\nLevel 2\n - hip (0)\n - spine (0)\n - neck (0)\n - head (0)\n - L_upper_leg (0)\n - L_lower_leg (0)\n - R_hand (1)\n - L_foot_convex (2)\n - R_toe_convex (2)\n</code></pre>"},{"location":"documentation/link/","title":"Link","text":"<p>Combine, or \"merge\" multiple solvers together, to simulate them as one.</p> <p></p>"},{"location":"documentation/link/#linking","title":"Linking","text":"<p>Reference two characters, link their solvers.</p> <p></p> <p>Until now, you've been able to author physics using <code>Active Chain</code> and combine scenes using the <code>Combine Scene</code> menu item. That would transfer all connected rigids from one scene to another.</p> <p>But, that feature is destructive. There's no way to \"uncombine\" and even if you could, there's no record of what was originally combined.</p> <p>Let me introduce <code>Solver Linking</code>, a lightweight and non-destructive alternative.</p> <p>Linking</p> <p>This fellow is referenced twice, and get their solvers linked together.</p> <p></p> <p>Unlinking</p> <p>Unlinking restores their previous behavior exactly.</p> <p></p> <p>That's neat, but can you..</p> <p>I know exactly what you're thinking, I was thinking the same thing.</p> <p>Can you link a solver to another solver that is also linked? So that I can build a network of simple solvers that all work together to form one complex solver?</p> <p>Yes. Yes, you can. \ud83e\udd2d See below.</p> <p></p>"},{"location":"documentation/link/#example","title":"Example","text":"<p>Here are 2 assets, a manikin and a backpack.</p> Manikin Backback <p>The backback and manikin has been combined into one, which is then referenced twice into the final scene for a total of 4 unique solvers.</p> <p>Non-destructively link solvers</p> <p>Notice the hierarchy of solvers formed here, enabling you to build complex solvers out of many small solvers.</p> <p></p> <p>Non-destructively unlinking too</p> <p>Likewise, safely deconstruct a network of solvers by just removing the connection.</p> <p></p> <p>Technically, a solver is added to another solver in the same manner a marker, group and constraint is added. One big happy family.</p> <p></p>"},{"location":"documentation/live_mode/","title":"Live Mode","text":"<p>Interact with your simulation in real-time.</p> <p></p>"},{"location":"documentation/live_mode/#live-mode","title":"Live Mode","text":"<p>Here's \"Live Mode\" in a nutshell.</p> <p></p> <p>Traditional Rig</p> <p>And here's the equivalent task with the traditional rig.</p> <p></p> <p>If you don't make it through all of the 95 seconds that the traditional method takes, I don't blame you. Not only is posing with Live Mode already 3x faster, it also has the following benefits.</p> <ul> <li>It's fun! You don't see that every day.</li> <li>No intersections You don't even have to think about it, like playing with an action figure</li> <li>No broken limits That is, skinning and subsequent muscles and cloth are safe</li> <li>No controls Your geometry are the controls!</li> </ul> <p>But perhaps most importantly.</p> <ul> <li>You don't need rigging!</li> </ul> <p>This same workflow applies to plain joint hierarchies, meaning an animator could:</p> <ol> <li>Import a mesh</li> <li>Plot some joints</li> <li>Skin mesh</li> <li>Assign markers</li> <li>Start animating</li> </ol> <p>For example, here's 30 seconds of \"rigging\" a character from scratch.</p> <p></p> <p>And that's where things are going.</p> <p>Let's have a closer look at what this thing can do today.</p> <p></p>"},{"location":"documentation/live_mode/#general-posing","title":"General Posing","text":"<p>Clicking and dragging on any marker will affect it the way you'd expect.</p> <p></p> <p></p>"},{"location":"documentation/live_mode/#reset","title":"Reset","text":"<p>Exiting out of the mode or changing from the Manipulator to e.g. the Maya Translate tool (W hotkey) will reset the simulation to where it originally started.</p> <p></p> <p></p>"},{"location":"documentation/live_mode/#drop-press-hold","title":"Drop Press &amp; Hold","text":"<p>Towards the bottom, you'll find a number buttons, one of which is called <code>Drop</code>. This \"drops\" the character. In other words, it temporarily enables gravity. This can help ease a character onto the ground or generally relax things that are hovering. It's also fun to play with. </p> <p></p> <p></p>"},{"location":"documentation/live_mode/#drop-toggle","title":"Drop Toggle","text":"<p>Hold Shift to toggle gravity on, such that you can throw things around! Also fun to play with </p> <p></p> <p></p>"},{"location":"documentation/live_mode/#tense-press-hold","title":"Tense Press &amp; Hold","text":"<p>Next up is <code>Tense</code>. This tenses the character.</p> <p></p> <p>What's really happening is that it tries to reach whatever pose your rig is in at that time.</p> <p></p> <p></p>"},{"location":"documentation/live_mode/#tense-toggle","title":"Tense Toggle","text":"<p>Like <code>Drop</code>, the <code>Tense</code> button can be toggled, which would leave the character tense.</p> <p></p> <p></p>"},{"location":"documentation/live_mode/#mask","title":"Mask","text":"<p>Hold Ctrl whilst clicking to \"mask\" a Marker. This prevents it from moving at all, it's technically turning the Marker into a Kinematic object temporarily.</p> <p>Pro tip</p> <p>You can also press Ctrl whilst dragging and release to leave the Marker you are currently dragging in place, for some cool posing mechanic!</p> <p></p>"},{"location":"documentation/live_mode/#unmask-all","title":"Unmask All","text":"<p>Next up is \"unmask\" which involves \"masking\" via Ctrl + Clicking on a Marker. It's how you prevent a Marker from moving.</p> <p>How does it work?</p> <p>It temporarily turns any marker <code>Kinematic</code>, identical to the <code>Behaviour = Kinematic</code> attribute.</p> <p></p> <p></p>"},{"location":"documentation/live_mode/#mask-parent","title":"Mask Parent","text":"<p>Hold Shift whilst dragging to isolate the effect to a marker and it's children.</p> <p></p> <p></p>"},{"location":"documentation/live_mode/#transfer-pose","title":"Transfer Pose","text":"<p>The final button is the <code>Transfer</code> button. It's what transfers the simulation back onto your animation controls.</p> <p></p> <p></p>"},{"location":"documentation/live_mode/#transfer-toggle","title":"Transfer Toggle","text":"<p>Like Drop and Tense, this button can also be toggled, meaning the pose is transferred as soon as you let go of the mouse cursor.</p> <p></p> <p></p>"},{"location":"documentation/live_mode/#animation","title":"Animation","text":"<p>And these are the tools you use to animate. </p> <p></p> <p></p>"},{"location":"documentation/live_mode/#visual-undo","title":"Visual Undo","text":"<p>The timeline helps you understand where undo will take you.</p> <p></p> <p>You can also interact with the timeline, for fine control over where in history you want to go.</p> <p></p> <p></p>"},{"location":"documentation/live_mode/#recording-live-mode","title":"Recording Live Mode","text":"<p>Use Live Mode with <code>Cache = Static</code> to enable recording of your interactions!</p> <p></p> <p></p>"},{"location":"documentation/live_mode/#interactive-mode","title":"Interactive Mode","text":"<p>Toggle the Lock button far-right to keep simulating outside of the Manipulator.</p> <p>This enables you to use Ragdoll as a normal Maya deformer, and see real-time updates on contacts and limb limits.</p> <p></p> <p>Here are some more examples!</p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"documentation/live_mode/#rigging-for-live-mode","title":"Rigging for Live Mode","text":"<p>In order for your characters to work with Live Mode, you'll need to take a few things into consideration. Primarily that your character has FK controls with the ability to disable space switches and other mechanics that differ from a straightforward parent/child relationship.</p> <ul> <li>https://youtu.be/fx-BT6eDxDE (4:15 mins)</li> </ul> <p></p> <p></p>"},{"location":"documentation/live_mode/#rigging-with-multi-cut","title":"Rigging with Multi-Cut","text":"<p>A quick tutorial on how to setup a character using Maya's multi-cut, and then export and load this character to assemble it alongside our favourite Manikin!</p> <ul> <li>https://youtu.be/Si_l8B82c9w (10:06 mins)</li> </ul> <p></p> <p></p>"},{"location":"documentation/live_mode/#live-rig-and-maya-native-rigs","title":"Live Rig and Maya Native Rigs","text":"<p>Here's an example of how you can \"trick\" Live Mode into working for you with any traditional Maya rig.</p> <ul> <li>https://youtu.be/kmY5NSmbkZo (5:13 mins)</li> </ul> <p></p> <p></p>"},{"location":"documentation/live_mode/#experimental-settings","title":"Experimental Settings","text":"<p>At the bottom-left hand corner of Live Mode, you'll find a set of experimental controls.</p> <p></p> <p></p>"},{"location":"documentation/live_mode/#magnet-tuning","title":"Magnet Tuning","text":"<p>Whenever you click and drag, you are dynamically creating and destroying a Pin Constraint. The settings for this Pin Constraint can be customised here.</p> <p></p> <p>These can also affect the Modifier keys on the right-hand center of the Live Mode UI, such as how strong gravity should be or how tense the character should get when pressing the <code>Tense</code> button.</p> <p></p>"},{"location":"documentation/live_mode/#include-pin-constraints","title":"Include Pin Constraints","text":"<p>In Live Mode, all constraints are disabled. This way, they will not interfere with the primary purpose of Live Mode, which is to pose your character. However, outside of Live Mode, such as in Interactive Mode, it may be useful to keep these active.</p> <p></p> <p></p> <p></p> <p>See example here</p> <ul> <li>https://forums.ragdolldynamics.com/t/interactive-mode/973/5</li> </ul> <p></p>"},{"location":"documentation/live_mode/#include-fields","title":"Include Fields","text":"<p>Like Pin Constraints, Fields are disabled in Live Mode per default, but can be re-enabled using this button.</p> <p></p> <p></p>"},{"location":"documentation/live_mode/#workflows","title":"Workflows","text":"<p>These are having a hard time finding a good default or place in the UI. They affect the overall workflow of Live Mode, so play with them but don't put too much faith into them.</p> Button Description Synchronise Keep the Live Timeline in sync with the Maya timeline Reset on Time Changed Keep the simulation in sync with the Maya scene whenever time changes Force Viewport Update Improved interaction when in Interactive Mode <p></p>"},{"location":"documentation/locomotion/","title":"Locomotion","text":"<p>Automatic walking, running, jumping and more with Locomotion.</p> <p></p>"},{"location":"documentation/locomotion/#usage","title":"Usage","text":"<p>Here's what you do.</p> <ol> <li>Select body</li> <li>Select feet</li> <li>Run <code>Assign Plan</code></li> </ol> <p></p> <p>What is a \"Plan\"?</p> <p>The generated locomotion is the result of a \"plan\", meaning each of the inputs you give it. Including this initial selection.</p> <p></p>"},{"location":"documentation/locomotion/#examples","title":"Examples","text":"<p>Let's start with a quick look at what you can get out of this new toy.</p> <p>Locobot</p> <p>Modeling by Christophe Desse.</p> <p></p> <p></p> <p></p> <p>Spot and Friends</p> <p></p> <p></p> <p>Happy Box</p> <p>Yes, you can give it a terrain. </p> <p></p> <p>Two Happy Boxes</p> <p></p> <p>Locoboy</p> <p>A 2-legged quadruped, look at 'em go!</p> <p></p> <p>Locomotion &amp; Physics</p> <p>Playing well together.</p> <p></p> <p>Humanoid Locomotion</p> <p>As you can tell, quadrupeds fair much better!</p> <p></p> <p>Human Dynamics</p> <p>But with some physics, it's starting to look nice. :)</p> <p></p> <p></p>"},{"location":"documentation/locomotion/#abilities","title":"Abilities","text":"<p>Here's what we're aiming for with this feature.</p> <ul> <li>Full clip</li> </ul> <p></p> <p>To achieve this, you've got control over:</p> <ol> <li>The start and end positions of the body and feet</li> <li>The order and duration of steps, called a <code>Step Sequence</code></li> <li>An optional <code>Terrain</code> upon which to walk</li> <li>A few additional extras for fine-tuning things</li> </ol> <p>There can be any number of feet and it can travel any amount of distance. The <code>Step Sequence</code> is how you're able to achieve different kind of walks.</p> <ul> <li>Walking</li> <li>Running</li> <li>Trotting</li> <li>Dancing</li> <li>Jumping</li> <li>...</li> </ul> <p>And the <code>Terrain</code> is how it can do this across geometry of any complexity.</p> <p></p>"},{"location":"documentation/locomotion/#limitations","title":"Limitations","text":"<p>Let's talk about what cannot be solved with Ragdoll <code>Locomotion</code>.</p> <p>Currently, it only understands 2 things.</p> <ol> <li>The body</li> <li>The foot</li> </ol> <p>And for feet, it only understand the position of the foot, not its orientation.</p> <p>Most importantly, it does not understand arms! Arms are critical to human locomotion, they swing in tandem with each step. This version of Ragdoll does not understand arms. Yet. Meaning it's good for locomotion involving any creature that does not have arms.</p> <p>But Marcus, that doesn't leave much room for many creatures. They all have arms!</p> <p>Think again!</p> <ul> <li>Dogs</li> <li>Cats</li> <li>..any quadruped!</li> <li>6-legged creatures, e.g. crabs</li> <li>8-legged creatures, e.g. spiders</li> <li>n-legged tentacle monsters</li> </ul> <p>With that out of the way, let's look at what it can do!</p> <p></p>"},{"location":"documentation/locomotion/#press-t","title":"Press T","text":"<p>Locomotion also has a manipulator, accessible by selecting the <code>rPlan</code> node and pressing <code>T</code> on your keyboard.</p> <p></p> <p></p>"},{"location":"documentation/locomotion/#background-processing","title":"Background Processing","text":"<p>Locomotion is computed in the background.</p> <p>Normally, it'll take a second or two to compute 4-12 seconds worth of locomotion, and you can safely interact with Maya whilst it's running. It has zero impact on your overall Maya or character rig performance.</p> <p></p>"},{"location":"documentation/locomotion/#rig-compatibility","title":"Rig Compatibility","text":"<p>Anything from a box with a sphere for feet to the most complex digi-double will do.</p> <p>The rig in the above example is nothing special, as you've seen from the examples above this works on \"rigs\" as complex as a box and 2 spheres.</p> <p></p> <p></p>"},{"location":"documentation/locomotion/#multiple-characters","title":"Multiple Characters","text":"<p>You can have as many characters in the scene as you like.</p> <p></p>"},{"location":"documentation/locomotion/#parallel-processing","title":"Parallel Processing","text":"<p>That's right! If 1 character takes 2 seconds to compute, 5 characters also take 2 seconds to compute. Or 10 characters, or 100 characters. 2 seconds in total, that's all you'd have to wait, up to the number of cores on your system.</p> <p>As core-count continues to increase in our machines, you can expect the number of characters being run in parallel to increase as well, up to the level of full crowds; each individual character a unique and precise sequence of steps that conform to their environment.</p> <p></p> <p>Juice Left</p> <p>There is still a little bit of juice left to squeeze.</p> <p>At the moment, if Ragdoll detects any relation between one plan and another, it will run these one-by-one.</p> <p>Normally, this is not the case, but if you for example connect the output of one plan to the input of another, there isn't much that can be done other than wait for one to finish. However this can also happen when unrelated things are connected, such as your character being connected to two plans, such that you can blend between them. This is too much, and will be addressed in a future release. Subtle balance!</p> <p></p>"},{"location":"documentation/locomotion/#physics","title":"Physics","text":"<p>Locomotion is an entirely separate \"brain\" that you may, or may not, want to combine with regular Markers.</p> <p></p> <p>Body and/or feet can be <code>Kinematic</code> or driven by a <code>Pin Constraint</code>, or anything inbetween.</p> <p></p>"},{"location":"documentation/locomotion/#recording","title":"Recording","text":"<p>Unlike a simulation, <code>Locomotion</code> is entirely time independent. So it isn't strictly necessary to record; it will run directly on your character rig.</p> <p>You can edit the locomotion as keyframes via Maya's native <code>Bake Results</code> command.</p> <p></p> <p></p>"},{"location":"documentation/locomotion/#step-sequencer","title":"Step Sequencer","text":"<p>This will become your new best friend. With an easily recognisable pattern for when to move your feet.</p> <ol> <li>Select <code>Sequencer Mode</code></li> <li>Hold <code>Shift</code> to paint</li> <li>Hold <code>Ctrl</code> to erase</li> </ol> <p></p> <p>It can be used to produce a wide variety of locomotion, such as this frog sequence.</p> <p></p> <p></p>"},{"location":"documentation/locomotion/#targets","title":"Targets","text":"<p>Once you've figured how to get somewhere, next up is figuring out where to go.</p> <ol> <li>Select <code>Target Mode</code></li> <li>Select either <code>Start</code> or <code>End</code> of the body or foot</li> <li>Use the <code>Translate</code> gizmo to control the position of either <code>body</code> or <code>foot</code></li> <li>Use the <code>Rotate</code> gizmo to control the start and end orientation of the <code>body</code></li> </ol> <p></p> <p>Use the <code>Rotate</code> gizmo to control the orientation of the body at the start or end positions.</p> <p></p> <p></p>"},{"location":"documentation/locomotion/#limits","title":"Limits","text":"<p>Is your character jumping or limping? Maybe dancing? Limits control the area in which each foot is allowed to move.</p> <ol> <li>Select <code>Limit Mode</code></li> <li>Select the <code>body</code> to adjust the size of your character</li> <li>Select a <code>foot</code> to adjust the amount of motion a foot is allowed to have</li> </ol> <p></p> <p>Here's an example of how a short limit on one foot, and long steps with the other foot, can generate a wounded or limping locomotion.</p> <p></p> <p></p> <p></p>"},{"location":"documentation/locomotion/#terrain","title":"Terrain","text":"<p>Things can easily get more interesting by swapping out that flat ground with some geometry.</p> <p></p> <p></p>"},{"location":"documentation/locomotion/#shift-to-toggle","title":"Shift to Toggle","text":"<p>You can choose whether to use the Shift and Control keys to add and remove steps in the Locomotion Step Sequencer, or whether to use Shift for both. Dragging over a filled step will erase it, whereas dragging over an unfilled step will fill it. A toggle!</p> <p></p>"},{"location":"documentation/manipulator/","title":"Manipulator","text":"<p>Interactively manipulate shapes and limits using the Manipulator.</p> <p></p>"},{"location":"documentation/manipulator/#manipulator","title":"Manipulator","text":"<p>One of the most challenging aspects of Ragdoll to date is editing shapes and limits. These have now been greatly simplified via the use of \"manipulators\", similar to your standard Translate/Rotate/Scale manipulators. Except on steroids.</p> <p>Here's a 21 second overview.</p> <p></p> <p></p>"},{"location":"documentation/manipulator/#activate","title":"Activate","text":"<p>You have a few options for activating the manipulator.</p> <ol> <li>Run <code>Ragdoll -&gt; Manipulator</code></li> <li>Select a Ragdoll node and press <code>T</code> on your keyboard</li> <li>Select a Ragdoll node and click the <code>Show Manipulator Tool</code> in the Toolbar</li> </ol> <p>Any of the Ragdoll nodes can be selected in order to enable the manipulator via the <code>T</code> keyboard shortcut.</p> <ul> <li><code>rdSolver</code></li> <li><code>rdGroup</code></li> <li><code>rdMarker</code></li> <li><code>rdDistanceConstraint</code></li> <li><code>rdPinConstraint</code></li> <li><code>rdFixedConstraint</code></li> </ul> <p>Manipulator UI Scale</p> <p>If the Manipulator's UI is too big or too small, you can change that via <code>Ragdoll &gt; System &gt; Ragdoll Preferences &gt; Resolution Scale</code>. Make sure to restart Maya or reload Ragdoll after changing the Resolution Scale.</p> <p>Solver Shape</p> <p>At the time of this writing, the solver needs its shape selected, not the parent transform. This will be addressed in a future release.</p> <p>A comfortable workflow is..</p> <ol> <li>Select any assigned control</li> <li>Select the marker DG node in the Channel Box</li> <li>Press <code>T</code></li> </ol> <p>The selected Marker will be pre-selected in the manipulator.</p> <p></p> <p>Alternatively, press the <code>Show Manipulator Tool</code> button in the Toolbar.</p> <p></p> <p></p>"},{"location":"documentation/manipulator/#shape-modes","title":"Shape Modes","text":"<p>This release introduces a manipulator with two \"modes\".</p> <p></p> Mode Description Shape Mode Edit shape properties, like <code>Length</code>, <code>Radius</code>, <code>Position</code> and <code>Orientation</code> Limit Mode Edit limit properties, like <code>Twist</code> and <code>Swing</code> along with their pivots. <p>In Shape Mode, you currently have 5 manipulators.</p> Manipulator Description <code>Translate</code> Affects the <code>Shape Offset</code> attribute <code>Rotate</code> Affects the <code>Shape Rotation</code> attribute <code>Scale</code> Affects the <code>Shape Radius</code> and <code>Shape Extents</code> attributes <code>Length</code> Affects the <code>Shape Length</code> attribute, for the <code>Capsule</code> shape <code>HUD</code> Individual control over primary attributes, like <code>Shape Extents</code> axes <p>Translate</p> <p>Hold the middle-mouse button to translate.</p> <p></p> <p>Rotate</p> <p>Hold Ctrl + middle-mouse button to rotate.</p> <p></p> <p>Scale</p> <p>Hold Ctrl + left-mouse button to scale.</p> <p></p> <p>Length</p> <p>The <code>Capsule</code> shape have additional in-view manipulators you can drag to affect each side independently.</p> <p></p> <p>HUD</p> <p>Finally, attributes without a visual handle can be edited via the viewport HUD.</p> <p></p> <p></p>"},{"location":"documentation/manipulator/#limit-mode","title":"Limit Mode","text":"<p>In Limit Mode, you currently have 2 manipulators.</p> Manipulator Description <code>Limit</code> Affects the <code>Limit Range XYZ</code> attributes <code>HUD</code> For locking and enabling of limits <p>Enable and Disable</p> <p>Click the <code>Axis</code> button to limit the rotation about a particular axis.</p> <p></p> <p>Lock and Unlock</p> <p>Click the <code>Lock</code> button to prevent all rotation about the axis.</p> <p></p> <p>Asymmetrical Edits</p> <p>Hold <code>Ctrl</code> to make asymmetrical edits</p> <p>Some limbs start out at the center of their limit. Like your hip and neck. They are typically modeled to enable equal movement in each axis.</p> <p>Other limbs, like the elbow and knee, are typically modeled in the extreme of their limit. Able to only rotate in one direction. For these cases, they need an asymmetrical limit.</p> <p></p> <p>With limits in multiple axes, keep an eye out for how asymmetrical edits to one axis affect the others.</p> <p></p> <p>Why are they moving?</p> <p>Under the hood, each axis must still be symmetrical; edits only appear to be asymmetrical for your convenience. What's really happening is the entire limit is both changing shape and also rotating and the rotation is causing all axes to move.</p> <p>This is an inherent limitation (pun!) of limits in Ragdoll and is unlikely to be addressed in the future, so we'll have to work with it.</p> <p>If you mess up and want to start from scratch, hit the <code>Reset</code> button, also found under..</p> <ul> <li><code>Ragdoll -&gt; Utilities -&gt; Reset Constraint Frames</code></li> </ul> <p></p> <p></p>"},{"location":"documentation/manipulator/#symmetry","title":"Symmetry","text":"<p>Enabled per default, symmetry will mirror your edits across an axis.</p> <p>There are 2 types of symmetry at the time of this writing.</p> Type Description <code>World</code> Look for a marker across the current axis in worldspace <code>Pose</code> Based on the pose at the time of assigning markers, which is typically symmetrical. <p></p> <p>Each of which can be made symmetrical in either the X, Y or Z axes. The <code>Pose</code> axis means you can make changes even if a character has been posed after having been assigned. A feature particularly useful when assigning to the A- or T-pose of a character rig.</p> <p>Pose Based Symmetry</p> <p>Because these controls were assigned in the T-pose of the rig, you can use Pose-based symmetry to make changes even when the character is currently asymmetrical.</p> <p></p> <p>Multiple Rigs</p> <p>If two or more characters are present in the scene, and they were all rigged in the same pose, at the center of the world, then Ragdoll will only look at markers in the same <code>rdGroup</code> as the selected Marker.</p> <p>Search Distance</p> <p>On the right-hand side of the <code>Enable Symmetry</code> button, there is a <code>Search Distance</code> gizmo.</p> <p>Drag to edit this value</p> <p>When you select a marker on one side, it will search for a marker at the opposite side of the axis you've chosen. Because positions are all approximate, it uses a maximum search distance to look for it.</p> <p>Matches</p> <p>Ideally, there should only be one match. But in a crowded hierarchy there may be several. Tune the <code>Search Distance</code> to control the number of matches, to ensure it doesn't pick the wrong one.</p> <p></p>"},{"location":"documentation/manipulator/#multi-select","title":"Multi-select","text":"<p>Disable <code>Symmetry</code> to enable multi-select</p> <p>Hold <code>Shift</code> to select and manipulate multiple markers at once.</p> <p></p> <p>Drag Select?</p> <p>Not yet! But will be added in a future release.</p> <p></p>"},{"location":"documentation/manipulator/#undo-redo","title":"Undo &amp; Redo","text":"<p>No surprises here.</p> <p>Changes made using the manipulator are undoable as you would expect, with the exception that it currently does not let you undo the selection itself like normal Maya selection does; this will be addressed in a future release.</p> <p></p>"},{"location":"documentation/manipulator/#fit-to-view","title":"Fit-to-view","text":"<p>Tap the <code>F</code> key to fit any selected Marker(s) to the view, like you would expect from selected Maya nodes.</p> <p></p> <p>Caveat</p> <p>This currently only applies if you've activated the manipulator using the <code>Ragdoll -&gt; Manipulator</code> menu item, or have the <code>rdSolver</code> shape node selected.</p> <p></p>"},{"location":"documentation/manipulator/#select-node","title":"Select Node","text":"<p>Click the <code>Select Node</code> button to select this node in Maya</p> <p>Per default, Ragdoll and Maya selection are separate. You can have Maya select the node(s) currently seleted in Ragdoll by pressing the <code>Select Node</code> button.</p> <p></p> <p>You can automate this using the <code>Synchronise</code> button at the far-left of the HUD.</p> <p></p> <p>Why is this not on per default?</p> <p>The solver is what is actually being fitted. If the selection is changed to a marker (which is not a DAG node, and therefore lacks a visual representation) then fit-to-view no longer works.</p> <p>This will be addressed in a future release and made into the default.</p> <p>With Multi-select or symmetry enabled, all selected markers will be selected in Maya, to make bulk edits via the Channel Box easier.</p> <p></p>"},{"location":"documentation/manipulator/#manipulator-help","title":"Manipulator Help","text":"<p>On the right-hand side is an overview of the hotkeys and mouse button combinations you can use, and what they do.</p> <p></p> <p>It can be hidden via the HUD button on the upper right-hand side.</p> <p></p>"},{"location":"documentation/marker/","title":"Marker","text":"<p>Markers form the fundamental building block of Ragdoll, to achieve Animation Capture a.k.a. \"reverse motion capture\".</p> <p></p>"},{"location":"documentation/marker/#animation-capture","title":"Animation Capture","text":"<p>Capture your character rig, as though it was a live action actor.</p> <p>Inspired by Motion Capture - Animation Capture is a new way to think about and work with physics in Maya. To learn about it, let's first understand how Motion Capture generally works.</p> <p></p> <p>Here is a typical data pipeline for motion capture, from real-life actor to final character animation.</p> # Description 1 Markers are attached to an actor 2 Markers are \"captured\" 3 A pointcloud is generated 4 A hierarchy of joints is generated 5 Joints drive a typical character rig 6 Rig drives final geometry for render <p>Each \"Marker\" is a dud. Nothing of any complexity. Something for the camera(s) to recognise and track as it moves through space. Once tracked, it's able to translate this Marker from a 2D image into a 3D position, and continues to do so for each Marker. The real processing to take place inside software.</p> <p>Once the capture is complete, the human actor can remove the markers and go enjoy the rest of their day. The rest is up to the computer.</p> <p>With 3D positions generated, software takes over to translate these points into a hierarchy; the FK joint hierarchy you may be familiar with if you've ever worked with mocap. The joint hierarchy can then be used to either drive the final geometry, or to drive a more complex character rig which in turn drives the final geometry.</p> <p>Animation Capture is just like that, but in reverse. Instead of capturing a person, it captures your character rig.</p> <p></p> # Description 1 Markers are attached to a character rig 2 Markers are \"captured\" 3 A rigid body is generated for each Marker 4 A hierarchy of constraints is generated to connect them 5 Simulation is recorded back onto the original character rig <p>Unlike motion capture, we'd like the result mapped back onto our character rig again, which is how animators iterate with physics.</p> <p></p>"},{"location":"documentation/marker/#example-1-basics","title":"Example 1 - Basics","text":"<p>Here's how to simulate a box.</p> <ol> <li>Select box</li> <li>Run <code>Assign</code></li> </ol> <p></p> <p>Once you're happy with what you see..</p> <ol> <li>Run <code>Record Simulation</code></li> </ol> <p></p> <p></p>"},{"location":"documentation/marker/#example-2-ragdoll","title":"Example 2 - Ragdoll","text":"<p>Here's how to setup a full Ragdoll.</p> <p>1. Setup hierarchy</p> <p>Select controls in the order you'd like them attached.</p> <p></p> <p>2. Edit shapes</p> <p>Fit the shapes to your character model.</p> <p></p> <p>3. Record</p> <p>Once your happy with the way the simulation looks, record it back onto your rig.</p> <p></p> <p></p>"},{"location":"documentation/marker/#behaviour","title":"Behaviour","text":"<p>The <code>Behaviour</code> is how Ragdoll should interpret the controls you assign. Did you mean for them to remain animated, i.e. <code>Animated</code>? Or should they follow the control around, i.e. <code>Simulated</code>?</p> <p>The <code>Behaviour</code> can be set either for a whole group of markers, or each Marker individually.</p> Type Description Use Group Do whatever the group is doing, or <code>Simulated</code> if there is no group Animated Follow the input exactly, physics need not apply Simulated Follow the input approximately, with some <code>Stiffness</code> and <code>Damping</code> <p></p>"},{"location":"documentation/marker/#animated","title":"Animated","text":"<p>Follow the input exactly, no exceptions. Not even collisions.</p> <p></p> <p></p>"},{"location":"documentation/marker/#simulated","title":"Simulated","text":"<p>Follow the local pose of your animation.</p> <p></p> <p></p>"},{"location":"documentation/marker/#pose-space","title":"Pose Space","text":"<p>Pose matching happens in either <code>Local</code> or <code>World</code> space.</p> <p></p> <p>Look, it's Ragdoll Blaine!</p> <p>This is an example of Worldspace Pose Stiffness. Ragdoll will try and reach the worldspace position and orientation of your rig, rather than only looking at the relative angles between each limb.</p> <p>Here's another example of the difference between <code>Local</code> and <code>World</code>space.</p> <p></p> <p>Notice how in <code>Local</code> space, the controls arms remain relative the torso. And with <code>World</code> space they instead follow the worldspace orientation of the controls.</p> <p>This attribute is also animatable, and is how you can transition from animation into simulation and back again.</p> <p></p> <p>Here's a more complete example:</p> <p></p> Frame Transition 100 Starts as a regular animated character 125 Transitions into physics as he jumps, for a physically-correct trajectory 155 Transitions back to animation once he rolls over on that cabinet 160 Transitions back to physics until he stands up 170 Transitions back into animation to match an exact pose 200 Partially transitions into physics, for secondary motion in the upper body as his arm is raised. <p></p>"},{"location":"documentation/marker/#overlap-group","title":"Overlap Group","text":"<p>Specify which markers may overlap rather than collide. This can be useful to enable dense areas of a character, like the clavicles, where there is natural overlap amongst large shapes like with the neck and spine.</p> Value Meaning <code>-1</code> No overlap allowed <code>0</code> Default, respects self-collision on the group (if any) <code>1-255</code> Overlap everything with the same number <p>An <code>rdMarker</code> part of a <code>rdGroup</code> can get an overlap group assigned procedurally, based on other members of that group. For example, in a complete ragdoll, all markers are part of the same group. So a <code>Self Collide = On</code> means these will all be given the same overlap group.</p> <p>If it isn't in a group, then <code>0</code> is the same as <code>-1</code>, in that it will collide with everything.</p> <p>Let's have a look at a few scenarios.</p> <p></p>"},{"location":"documentation/marker/#collide-with-everything","title":"Collide with Everything","text":"<p>In this example, every Marker is part of the same group. The group has <code>Self Collide = Off</code>, which is fine for just about every Marker except the fingers. In that case, we do want self-collision, so they are given the group <code>-1</code>.</p> <p></p> <p></p>"},{"location":"documentation/marker/#respect-self-collision","title":"Respect Self Collision","text":"<p>In this case, we're happy with a default group of <code>0</code> since we don't need anything to self collide. Especially these clavicles that overlap significantly!</p> <p></p> <p></p>"},{"location":"documentation/marker/#surgical-control","title":"Surgical Control","text":"<p>Finally, for the very specific cases of wanting two or more markers to overlap. Notice how we give both the ground and 3 of the boxes an <code>Overlap Group = 5</code>.</p> <p></p> <p></p>"},{"location":"documentation/marker/#material","title":"Material","text":"<p>Each Marker has a \"material\" to control how it interacts with other markers.</p> <p></p>"},{"location":"documentation/marker/#mass","title":"Mass","text":"<p>How much influence one Marker should have over another during contact.</p> <p>Pro tip 1 - Misconception about Mass</p> <p>A common misconception in physics is that <code>Mass</code> affects how quickly something falls to the ground. But in Ragdoll - like in real-life - mass is only relevant during interaction with another Marker and when forces are applied, like <code>Guide Strength</code>.</p> <p>Have a look at this video of a bowling ball falling in a vacuum alongside a feather.</p> <p></p> Pro tip 2 - Making something fall faster <p>So how do you make something fall faster?</p> <ol> <li>Decrease <code>Scene Scale</code> under the solver node</li> <li>Increase <code>Gravity</code>, also under the solver node</li> </ol> <p>To make something \"bend\" faster, like an arm flexing, that would be controlled via the <code>Guide Strength</code> and typically what causes it to reach a given speed and then stay there is governed by the <code>Rotate Damping</code>. That's how much of any motion should be cancelled out, to stabilise the motion. A very fast motion would have very little damping, but then also run the risk of \"overshooting\". That is, of passing the point at which you wanted it to reach.</p> <p></p>"},{"location":"documentation/marker/#density","title":"Density","text":"<p>Ragdoll can automatically compute a suitable mass for each Marker, based on the volume of your shape and a density of your choosing.</p> <p>In other words, big objects become heavy, small objects become light.</p> <p>Before</p> <p></p> <p>After</p> <p></p> <p></p>"},{"location":"documentation/marker/#presets","title":"Presets","text":"<p>Enter any value, or pick one from these pre-defined ones.</p> Density Value Description <code>Cotton</code> 0.05 Very sparse, 0.05 grams per cubic centimeter <code>Wood</code> 0.2 Sparse, 0.2 grams per cubic centimeter <code>Flesh</code> 1.0 Default, 1.0g/cm3 <code>Uranium</code> 19.0 Dense, 19.0g/cm3 <code>Black Hole</code> 1000.0 Very, very dense <p>Mass is computed based on the volume of your shape, along with a density of your choosing.</p> <p></p> <p></p>"},{"location":"documentation/marker/#options","title":"Options","text":"<p>Choose between various densities either at creation-time or after creation.</p> <p></p> <p></p>"},{"location":"documentation/marker/#visualise","title":"Visualise","text":"<p>The computed mass updates interactively as you change the size and type of your shape, including convex hulls!</p> <p></p> <p>In the Manipulator, you'll be able to not only edit the density, but preview the computed mass given the current shape volume and density you provide.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"documentation/marker/#friction","title":"Friction","text":"<p>Control how much resistance should be added between two rigids rubbing against each other.</p> <p></p> <p></p>"},{"location":"documentation/marker/#bounciness","title":"Bounciness","text":"<p>Control how much rigids should repel each other when coming into contact.</p> <p></p> <p>Values beyond 1.0</p> <p>Here's a tip!</p> <p>Bounciness can be greater than 1.0, which means they will gain energy during contact.</p> <p>In practice, energy will always dissipate in some way. The most-bouncy character in the GIF above has a bounciness of <code>2.0</code>, which in theory means that for every contact it should fly <code>200%</code> faster away than it did coming in, and keep doing this forever.</p> <p></p>"},{"location":"documentation/marker/#center-of-mass","title":"Center of Mass","text":"<p>If you try and balance something on your finger, but the \"center of mass\" is off center, it would fall over.</p> <p></p> <p>It is the point at which the weight of an object is equal in all directions.</p> <p>Ragdoll automatically computes this point based on what the shape looks like. For meshes, it will voxelise your geometry to figure out the physically accurate volumetric center of mass, assuming the density of the object is uniform throughout (rather than hollow or variadic, like swiss cheese).</p> <p>You now override this point using the attribute <code>Center of Mass</code> found under the Advanced tab.</p> <p> </p> <p>Guidelines</p> <ul> <li>For realistic results, leave it at <code>0</code> to compute the point automatically based on the shape</li> <li>For full control, override it</li> </ul> <p></p>"},{"location":"documentation/marker/#angular-mass","title":"Angular Mass","text":"<p>In real life, if you spin a broom 180 degrees along its length; that's easy. But if you spin it 180 degrees along any other axis, like a ninja, it's considerably heavier.</p> <p></p> <p>The reason is something called \"angular mass\", also known as \"moment of inertia\". It's like mass, but in terms of rotation rather than position. The broom has a low angular mass along its length axis. It takes more force to affect a \"heavier\" axis than a lighter one which is why a broom spins more easily along its length.</p> <p>This effect happens in Ragdoll too and is typically automatically computed for you based on the shape you use. If it looks like the broom, it will act like a broom.</p> <p>With this release, you can now customise this for greater control of your rotations.</p> <p></p> <p>When would you want to do that?</p> <ol> <li>Your shape looks like a broom, but you want it to act like a box</li> <li>Your shape doesn't look like a broom, but you would like it to act like one</li> </ol> <p>Or any combination in between. :) Generally, a broom or any thin shape is more easily spun along its length, so you may find stability in setting your angular mass to <code>(1.0, 1.0, 1.0)</code>, at the expense of realism.</p> <p>Guidelines</p> <ul> <li>For realistic results, leave it at <code>-1</code> to automatically compute the angular mass</li> <li>For full control, override it</li> </ul>"},{"location":"documentation/record_simulation/","title":"Record Simulation","text":"<p>Convert a simulation into keyframes using <code>Record Simulation</code>.</p> <p></p>"},{"location":"documentation/record_simulation/#record-simulation","title":"Record Simulation","text":"<p>Markers can be recorded all together, or independently. For example, say you wanted animation from frame 1-100, simulate 101-150 and return to animation from 151-200. You can do that.</p> <p>Furthermore, say you liked what the simulation was doing, but only on one half of the body. Or only on the hip, driving the main trajectory in a physically-plausible way. Keeping the rest of your animation intact.</p> <p>Record All</p> <p>With nothing selected, Ragdoll will record all marked controls to the current Maya playback range.</p> <p></p> <p>Record Selected Markers</p> <p>Select a few controls to control what gets recorded.</p> <p></p> <p>Record Range</p> <p>Limit the Maya playback range for control over when recording takes place.</p> <p></p> <p>Record Selected Range</p> <p>Or, select an explicit range interactively.</p> <p></p> <p>Record to Animation Layer</p> <p>Ragdoll will record to a layer per default.</p> <p></p> <p>Mode</p> <p>Update the viewport whilst recording, or not. That's <code>Nice and Steady</code> and <code>Fast and Loose</code> respectively. There's a performance benefit to not updating the viewport, however some character rigs depend on viewport updates to evaluate properly, so it may not always work.</p> <p>Here's an example with an almost 2x performance difference!</p> <p></p> <p></p>"},{"location":"documentation/record_simulation/#transitions","title":"Transitions","text":"<p>Let's have a look at how you would use markers to transition between simulation and animation.</p> <p></p> <p>Notice how we're animated up until the jump, and then Ragdoll takes over.</p> <ol> <li>Once he approaches that box, we turn our <code>Pose Space</code> from <code>Local</code> to <code>World</code> and have him reach the target pose in worldspace.</li> <li>Once he's close, we switch <code>Behaviour</code> to <code>Kinematic</code> and kinematically move him.</li> <li>Until we once again transition to <code>Guide</code>, this time with <code>Pose Space = Local</code>.</li> </ol> <p></p> <p></p>"},{"location":"documentation/record_simulation/#record-to-custom-attributes","title":"Record to Custom Attributes","text":"<p>Sometimes, rotation isn't coming from <code>Rotate X</code> but rather a custom <code>Ball Roll</code> attribute on a different IK control.</p> <p></p> <p>As Ragdoll only understands <code>Translate</code> and <code>Rotate</code>, how would you go about recording onto this attribute!? Here's what you can do.</p> <ol> <li>Create a new Locator</li> <li>Retarget the foot to this Locator</li> <li>Connect <code>Locator.rotateX -&gt; R_foot_CTL.ballRoll</code></li> </ol> <p>Now Ragdoll will record onto a familiar channel, and Maya will handle the conversion back onto the rig.</p> <p></p>"},{"location":"documentation/record_simulation/#extract-simulation","title":"Extract Simulation","text":"<p>Get data out of the solver and into a baked joint hierarchy.</p> <p>You can use this to build a library of animations, or to handle the retargeting from simulation to animation manually by just constraining to the resulting joint hierarchy.</p> <p></p> <p>Performance</p> <p>Notice how fast this is!</p> <p>A Debugging Companion</p> <p>It can also be used for situations where <code>Record Simulation</code> doesn't do what you need it to. The extracted skeleton will be a plain joint hierarchy, with no scale, and guaranteed to match the simulation exactly. So you can extract it, and constrain your rig to it.</p>"},{"location":"documentation/retargeting/","title":"Retargeting","text":"<p>Assign to joints, record to controls.</p> <p></p>"},{"location":"documentation/retargeting/#retarget","title":"Retarget","text":"<p>You can visually see where keyframes go upon running <code>Record Simulation</code>.</p> <p></p> <p></p>"},{"location":"documentation/retargeting/#usage","title":"Usage","text":"<p>Let's take a look at what this UI is, what it can do for you and when to use it.</p> <ul> <li>00:00 Why a UI?</li> <li>00:30 How to previously spot a retarget</li> <li>01:30 Spotting suspicious targets</li> <li>02:11 Warning indicator</li> <li>02:30 Untarget</li> <li>02:42 Retarget</li> </ul> <p></p> <p></p>"},{"location":"documentation/retargeting/#warnings","title":"Warnings","text":"<p>The UI can help you spot problems with recording, before recording happens.</p> <ul> <li>00:00 Constrained Channels</li> <li>00:08 Locked Channels</li> <li>00:60 Keyframed Channels</li> <li>00:71 Hidden Channels</li> </ul> <p></p> <p>In this case, some of our markers are retargeted onto joints that are driven by some other object. If we were to attempt to record these, it's unclear what the result should be.</p> <ol> <li>Should they retain their connection to the thing already driving them?</li> <li>Or should they abandon that, and become keyframed by the simulation?</li> </ol> <p>Neither of these are a great pick, since we don't want to break the rig, but we also want our simulation to go somewhere.</p> <p></p>"},{"location":"documentation/retargeting/#workflow","title":"Workflow","text":"<p>Once you've assigned your markers, grab a clean slate and gain complete control over where animation is to be recorded.</p> <ul> <li>00:00 Intro</li> <li>00:18 Untarget everything</li> <li>00:25 Retarget one at a time</li> </ul> <p></p> <p></p>"},{"location":"documentation/retargeting/#complete-demo","title":"Complete Demo","text":"<p>And finally, here's a longer-form example of a full setup of the Truong Dragon that we did a livestream on a while back.</p> <ul> <li>00:00 Assigning Markers</li> <li>00:38 Spine Shapes</li> <li>01:01 Wing Shapes</li> <li>01:27 IK Legs</li> <li>02:20 IK Shapes</li> <li>02:37 Tail</li> <li>03:08 Retargeting</li> <li>03:40 IK Retargeting</li> <li>04:36 Test Animation</li> <li>05:00 Mass Distribution</li> <li>05:36 Record</li> </ul> <p></p> <p></p>"},{"location":"documentation/retargeting/#reassign","title":"Reassign","text":"<p>The opposite of Retarget.</p> <p>Rather than assigning to joints and retargeting to IK controls, we assign to IK controls and reassign to joints. Same coin, different side; which one do you prefer?</p> <p></p>"},{"location":"documentation/retargeting/#reparent","title":"Reparent","text":"<p>Use <code>Reparent</code> when you selected things in the wrong order and want a do-over.</p> <p></p> <p>Success!</p> <p></p> <p></p>"},{"location":"documentation/retargeting/#untarget","title":"Untarget","text":"<p>For when you don't want anything recorded for this Marker. Useful for utility Markers, like twist joints or extra spine controls or just Markers without a corresponding control.</p>"},{"location":"documentation/snap_to_simulation/","title":"Snap to Simulation","text":"<p>Snap a character to wherever the simulation is currently at.</p> <p></p>"},{"location":"documentation/snap_to_simulation/#snap-to-simulation","title":"Snap to Simulation","text":"<p>Yet another way to work with physics, by transferring individual poses from the solver into your animation. You can use it to pose or layout a scene.</p> <p></p> <p></p> <p></p> <p>Coming Up</p> <p>An upcoming release will enable you to advance time in the simulation, without affecting time in Maya. Such that you can \"relax\" a pose, for example. \ud83d\ude01</p>"},{"location":"documentation/solver/","title":"Solver","text":"<p>Markers connect to a solver, and anything connected to one solver is able to interact.</p> <p></p>"},{"location":"documentation/solver/#solver","title":"Solver","text":"<p>Where the magic happens.</p> <p>The <code>rdSolver</code> node is akin to the motion capture camera(s). It'll monitor any markers in your Maya scene and show you what their physical equivalent version looks like.</p> <ul> <li>\u2714\ufe0f Real-time</li> <li>\u2714\ufe0f Deterministic</li> <li>\u2714\ufe0f Rewind and Resume</li> <li>\u2714\ufe0f Caching</li> <li>\u2714\ufe0f Support for scale</li> <li>\u2714\ufe0f Support for non-uniform scale</li> <li>\u2714\ufe0f Support for negative scale</li> <li>\u2714\ufe0f Support for overlapping shapes</li> <li>\u2714\ufe0f Support for IK/FK</li> <li>\u2714\ufe0f Support for space switching</li> <li>\u2714\ufe0f Support for follicles</li> <li>\u2714\ufe0f Support for native Maya constraints</li> <li>\u2714\ufe0f And more</li> </ul> <p></p>"},{"location":"documentation/solver/#frameskip-method","title":"Frameskip Method","text":"<p>Ragdoll needs a consistent progression of time to provide reliable results. So per default, if it notices a frame being skipped, it kindly pauses and waits until you revisit the last simulated frame.</p> <p>Alternatively, you can let it look the other way and pretend time has progressed linearly, like nCloth and countless other solvers do.</p>"},{"location":"documentation/solver/#pause","title":"Pause","text":"<p>The default. It's safe, predictable, but requires <code>Play Every Frame</code> to work.</p> <p></p>"},{"location":"documentation/solver/#ignore","title":"Ignore","text":"<p>The nCloth and nHair default, of trying its best to simulate even though it wasn't given the frames inbetween. Unpredictable, unreliable but may handle playing along with sound.</p> <p></p> <p>Aside from not giving you the same result each time you play, if too many frames are skipped your simulation can completely explode. You can semi-work around this by increasing the number of substeps, forcing more simulation frames to fill for the missing frames.</p> <p></p> <p>Non-deterministic</p> <p>Bear in mind that the <code>Ignore</code> method cannot give you the same results each playthrough. The <code>Pause</code> method is guaranteed to give you the same results, and are identical to what you get when you use the <code>Record Simulation</code> or <code>Cache</code> commands.</p>"},{"location":"documentation/solver/#auto-time","title":"Auto Time","text":"<p>Rather than having to specify which frame to start simulating at, Ragdoll can keep track of your animation start frame. Either the start of the range, or the full timeline. Or, you can still set a <code>Custom</code> start time for when you do care about specifics.</p> <p></p> <p></p>"},{"location":"documentation/solver/#solvertype-differences","title":"<code>solverType</code> Differences","text":"Type Description Strong Better for characters, it makes the <code>Rotate Stiffness</code> stronger; more capable of matching the animated pose. It can become unstable if there are too many loose objects in the scene. Stable Better for many independent objects, like a destruction scene. <p>You can find <code>solverType</code> under the Channel Box and the Attribute Editor.</p> <p></p> <p></p>"},{"location":"documentation/utilities/","title":"Replace Mesh","text":"<p>The fundamental building block to Ragdoll, for \"reverse motion capture\" or Animation Capture.</p> <p></p>"},{"location":"documentation/utilities/#replace-mesh","title":"Replace Mesh","text":"<p>You can now replace the original geometry assigned to your marker, just like you could with Rigids.</p> <p></p> <p></p>"},{"location":"documentation/utilities/#auto-limits","title":"Auto Limits","text":"<p>Markers are now able to infer which axes to lock in the simulation, based on the locked channels of your control or joint.</p> <p></p> <p>Notice in this example how some of the channels are locked. With the <code>Auto Limit</code> option checked, the corresponding limit axes will be locked too, such as to prevent the simulation from rotating around those axes.</p> <p>If you forget or want to detect locked axes on an existing marker, you can use the Utility option too.</p> <p></p>"},{"location":"maya/download/","title":"Download","text":"Autodesk Maya 2019 to 2025 <p>If you agree with the Ragdoll Dynamics EULA, you may select a platform below.</p> Ragdoll Windows Linux MacOS <p></p> Locomotion Windows Linux MacOS <p>Ragdoll 2024.07.01 awaits. Read about it -     Previous versions </p> <p>Join the community of ragdollers on Discord and/or Discourse.</p> Chat Forums Version Notes 2024.07.01 New <code>Regex</code> option for Import Physics, crash fix for complex scenes. See forum See all <p></p>"},{"location":"maya/download/#install","title":"Install","text":"<p>Ragdoll ships as a Maya Module for Windows, Linux and MacOS.</p> <p>Installation for Windows</p> <p>On the Windows platform, there's an executable you can run.</p> <ol> <li>Run the <code>.msi</code> installer</li> <li>Restart Maya</li> </ol> <p>Alternatively, download the Linux distribution above and unzip it into your <code>~/maya</code> directory. You should end up with something like this.</p> <pre><code>c:\\Users\\marcus\\Documents\\maya\\modules\\Ragdoll.mod\n</code></pre> Installation for Linux <p>On Linux, installation and upgrades are done in the same fashion.</p> <ol> <li>Unzip the <code>.zip</code> into your <code>~/maya</code> directory</li> <li>Restart Maya</li> </ol> <p>You should end up with something like this.</p> <pre><code>/home/marcus/maya/modules/Ragdoll.mod\n</code></pre> Installation for MacOS <p>On MacOS, installation and upgrades are done in the same fashion.</p> <ol> <li>Copy the contents of <code>/modules</code> into <code>/Users/Shared/Autodesk/modules/maya</code></li> <li>Restart Maya</li> </ol> <p>You should end up with something like this.</p> <pre><code>/Users/Shared/Autodesk/modules/maya/Ragdoll-2021_11_15.mod\n</code></pre> <p></p> <p>Gatekeeper</p> <p>Ragdoll is still in the process of being verified by Apple, until then you may need to tell Gatekeeper \"everything is OK\" for both the <code>ragdoll.dylib</code> which is the physics solver, and <code>loco3d</code> which is the Locomotion module. It may also ask about <code>TurboFloat</code> and <code>TurboActivate</code> which is the licencing system.</p> <p></p> <p></p> <p>The plug-in is now available via the Plug-in Manager.</p> <p></p> <ul> <li>See Release History</li> </ul> <p></p> <p>Everything ok?</p> No menu <p>You've booted up Maya, loaded the plug-in via the Plug-in Manager, but there is no menu, what gives?</p> <p>Maya Modules work in mysterious ways. Try installing it the old fashioned way.</p> <pre><code>from ragdoll import interactive\ninteractive.install()\n</code></pre> No module named 'ragdoll' <p>A clue! Let's go deeper.</p> <pre><code>import os\nmodules_path = r\"c:\\Users\\marcus\\Documents\\maya\\modules\"\nragdoll_path = os.path.join(modules_path, \"Ragdoll-Maya-2021_11_06\\scripts\")\n\nimport sys\nsys.path.insert(0, ragdoll_path)\n\nfrom ragdoll import interactive\ninteractive.install()\n</code></pre> <p>Make sure you replace the version number (date) with the version you are using. At this point, I expect you've uncovered why your module wasn't working in the first place and should probably revisit that as this process would require you to manually update the version number in that path each time you upgrade. No fun.</p> Something else happened <p>Oh no! I'd like to know about what happened, please let me know here.</p> <p></p>"},{"location":"maya/download/#faq","title":"FAQ","text":"What are my workstation requirements? <p>Anything capable of running Maya can run Ragdoll.</p> <ul> <li>Windows 10+ or CentOS 7+</li> <li>64-bit Intel\u00ae or AMD\u00ae processor</li> <li>4 GB of RAM</li> <li>Maya 2018-2022</li> </ul> What are my licensing options? <p>See Pricing.</p> What happens when my licence runs out? <p>Your scenes will still open, but the solver will be disabled. Contact licence@ragdolldynamics.com for renewal of your licence.</p> What happens when I skip frames? <p>The simulation gracefully pauses until you revisit the last simulated frame. See the <code>Frameskip Method</code> attribute on the <code>rdSolver</code> node for another option, <code>Ignore</code>. This will continue simulating, and ignore any skipped frames. Good for real-time playback with audio.</p> Can I use Rez? <p>Yes, the only environment variable needed for Rez is <code>MAYA_MODULE_PATH</code>, such as:</p> <pre><code>env[\"MAYA_MODULE_PATH\"].append(\"{root}\")\n</code></pre> <p>Where the <code>Ragdoll-2021_07_28</code> folder and <code>Ragdoll-2021_07_28.mod</code> file resides at <code>{root}</code>.</p> Why not use nHair for overlapping animation? <p>Ragdoll simulates your translate and rotate channels, whereas nHair simulates point geometry. You can convert those points into translation and rotation, but given the choice why would you? Besides, Ragdoll has far more robust collisions, control and constraints than nHair or nCloth could ever hope to achieve, at much greater performance.</p> <p></p>"},{"location":"maya/download/#limitations","title":"Limitations","text":"<p>As of <code>Ragdoll 2024.02.29</code> these are the current known limitations of Ragdoll.</p> <ul> <li>No known limitations, please report any issue on the forums</li> </ul>"},{"location":"maya/home/","title":"Maya","text":""},{"location":"maya/home/#ragdoll-in-maya","title":"Ragdoll in Maya","text":"<p>Welcome to Ragdoll in Maya, first released in July of 2021 and with support for versions 2019 up to 2025.</p> <p></p>"},{"location":"maya/home/#where-to-find-help","title":"Where to Find Help?","text":"<p>Depending on where you are and what you are looking for, one of these should fit the bill.</p> # Source Description Chat Come join the party on Discord! Documentation Read about each command available to you in Maya Release Notes Every new release has examples of every new feature and squashed bug. Search Top of every page, you know what to do \u261d\ufe0f UI Help Find help without leaving Maya YouTube Videos Long-form walkthroughs and examples. Tutorials Long-form, written tutorials for learning Ragdoll from the ground up. Reference The Reference page lists all menu items, item options and node attributes of Ragdoll along with descriptions and examples. Community Inspire and be inspired via the Ragdoll forums Support Get us involved and let's make some waves"},{"location":"releases/2020.11.10/","title":"Multi-threading","text":"<p>Performance!</p> <ul> <li>NEW Multi-threading<ul> <li>Ragdoll now supports multiple solvers in the same Maya scene, each of which run in parallel offering a 2-3x increase in FPS</li> </ul> </li> <li>NEW UI<ul> <li>Menu items now have additional customisation with a new UI interface.</li> </ul> </li> <li>NEW Animation Influence<ul> <li>Dynamic Controls can now respond to animation input, either kinematically or as a guided influence to your simulation. This means you can turn your controllers dynamic, and add additional animation to steer the simulation!</li> </ul> </li> <li>NEW Exploratory Menu<ul> <li>The menu is now fully unlocked, with user-friendly messages letting you know how to use it if you are unfamiliar. The goal is facilitating exploration and curiosity in a safe environment with reliable undo.</li> </ul> </li> <li>FIXED Hinge Constraint<ul> <li>A constraint being converted to/from a hinge constraint no longer breaks the constraint.</li> </ul> </li> <li>FIXED Set Initial State<ul> <li>Modify the position and orientation of your rigid bodies after creation with this feature.</li> </ul> </li> </ul> <p></p>"},{"location":"releases/2020.11.10/#multi-threading","title":"Multi-Threading","text":"<p>Ragdoll is now multi-threaded!</p> <p></p> <p>There are two mechanisms for managing performance.</p> <ol> <li>Scene-level parallelism</li> <li>Solver-level parallelism</li> </ol> <p>With 2 or more Ragdoll solvers in the same Maya scene, Maya will run these in parallel. Which means they will both run independently, on separate hardware cores on your CPU. Currently, you can expect a 2-3x performance increase through use of multiple solvers, with more optimisation to come.</p> <p>A single Ragdoll solver can be automatically broken up into simulation \"islands\" that run in parallel. Islands are created when two or more groups of rigid bodies are unlikely or unable to interact. For example, two characters in the same solver far away from each other. To leverage solver-level parallelism, adjust the <code>rdScene.threadCount</code> attribute (under Advanced in the Attribute Editor). A value of <code>0</code> (default) means it will run on a single thread, on the same thread as the rest of Ragdoll and Maya.</p> <p>For small scenes, with less than 100 rigid bodies, you should expect improved performance from a single thread. Each thread comes with some amount of overhead.</p> <p> </p> <p> </p>"},{"location":"releases/2020.11.10/#option-dialogs","title":"Option Dialogs","text":"<p>Some menu items now have option dialog boxes for further customisation. Settings are stored with Maya's preferences and persists across scenes and between application launches.</p> <p></p> <p> </p> <p> </p>"},{"location":"releases/2020.11.10/#animation-influence","title":"Animation Influence","text":"<p>The \"Dynamic Control\" feature now enables control of the simulation using the animation used for blending.</p> <ul> <li>See Tutorial for details.</li> </ul>"},{"location":"releases/2020.11.16/","title":"Cached Playback","text":"<p>The highlight for this release is Cached Playback!</p> <ul> <li>NEW Cached Playback<ul> <li>You can now leverage Maya 2020's native cached playback for your simulations, speeding up playback performance and lowering iteration times.</li> </ul> </li> <li>NEW Help Videos Ragdoll commands now come with how-to videos built directly into the UI.</li> <li>NEW Shape orientation and joints<ul> <li>Shapes relied on the <code>jointOrient</code> being proper for joints, gone are the days.</li> </ul> </li> <li>FIXED Wireframe Bug<ul> <li>The wireframe for the <code>Box</code> shape does now draw correctly with a custom <code>rdRigid.shapeRotation</code></li> </ul> </li> <li>FIXED Outliner Icon Support on Linux<ul> <li>Linux now benefits from the same pretty icons as Windows</li> </ul> </li> <li>FIXED Logging Warnings<ul> <li>These now emit a yellow color in your Command Line</li> </ul> </li> <li>FIXED Boxes and Joints<ul> <li>Joints converted to Rigids can now be set to Box shape with proper orientation</li> </ul> </li> </ul> <p> </p>"},{"location":"releases/2020.11.16/#cached-playback","title":"Cached Playback","text":"<p>Maya 2019 introduced support for Cached Playback, and Maya 2020 added support for Cached Simulation, which is now supported by Ragdoll!</p> <p></p> <p></p> <p>Create new rigids</p> <p></p> <p>Edit existing rigids</p> <p></p> <p>Trajectories can be enabled with the <code>rdScene.drawTrajectories</code> attribute, under <code>Visualisation</code> of the Attribute Editor</p>"},{"location":"releases/2020.11.16/#known-limitations-with-cached-playback","title":"Known Limitations with Cached Playback","text":"<p>There is still work to be done. Currently, animated visualisations aren't updating in cached mode. However the simulation still runs correctly and your driven character animation will behave identically to non-cached mode.</p> <p>The animation of the slice visualisation doesn't represent the current, animated state</p> <p></p> <p>The connection visualisation is not up-to-date, you can disable the drawing with rdConstraint.drawConnection</p> <p></p> <p>The guide delta drawn to represent the difference between simulation and your animation only draws the latest result, rather than the result on the current frame.</p> <p></p> <p>Note that these are only visual and does not affect the simulation. These will all be addressed in a future release!</p> <p></p> <p><code>rdRigid.ouputGeometry</code> Remove any geometries when working with cached playback, these cause instant death to Maya and it's still unclear why.</p> <p> </p>"},{"location":"releases/2020.11.16/#help-videos","title":"Help Videos","text":"<p>Find out more about a command, by seeing an example of how to use it. There's only one video at the moment, with more to come. Including videos for different ways of using the same command.</p> <p>The goal is to never have to leave Maya to learn about Ragdoll.</p> <p></p> <p> </p>"},{"location":"releases/2020.11.16/#shape-orientation","title":"Shape Orientation","text":"<p>Shapes typically align with the Maya node, but in the case of joints that isn't always what you want. Maya separates between joint orientation and drawing; it'll always draw joints facing its child. When the orientation and visual orientation of a joint differs, you would end up with correct but unexpected results.</p> <p>This release fixes that by properly updating..</p> <ul> <li><code>rdRigid.shapeOffset</code></li> <li><code>rdRigid.shapeRotation</code></li> </ul> <p>..to mimic how joints appear in the Maya viewport.</p> <p></p>"},{"location":"releases/2020.11.17/","title":"Splash Screen","text":"<p>Minor release.</p> <ul> <li>NEW Installation confirmation Ragdoll now lets you know whether the install went successful or not. This appears on first launch, and can be revisited via the Ragdoll menu. This is also where updates will be found, along with future new-user material like links to docs and tutorials.</li> <li>FIXED The <code>Ragdoll | Character</code> menu item has been fixed and is operating at 100%</li> </ul> <p> </p>"},{"location":"releases/2020.11.17/#install-confirmation","title":"Install Confirmation","text":"<p>It isn't obvious to new users that Ragdoll installed successfully, so here's what the splash screen looks like that you'll see on first launch.</p> <p></p>"},{"location":"releases/2020.11.22/","title":"Bugfixes","text":"<p>Minor release, no breaking changes.</p> <ul> <li>FIXED Capsule orientation used to face the wrong direction with some joints</li> <li>FIXED Creating a new collider is now undoable like you would expect</li> <li>FIXED Message printed when converting a rigid is now accurate</li> <li>FIXED Kinematic/Dynamic option from Convert Options does no longer bleeds into the Create Rigid Options</li> <li>ADDED <code>Auto</code> option to <code>Convert Rigid</code>, to toggle a rigid between dynamic and kinematic</li> <li>CHANGED The <code>rdRigid.kinematic</code> attribute is now up-top, better indicating its importance</li> <li>CHANGED The <code>Ragdoll | Convert</code> menu item is now split into <code>Convert Rigid</code> and <code>Convert Constraint</code></li> <li>CHANGED Renamed <code>Convex Hull</code> -&gt; <code>Mesh</code>, should make more sense now</li> </ul> <p> </p>"},{"location":"releases/2020.11.22/#capsule-orientation","title":"Capsule Orientation","text":"<p>Fixed a bug where the capsule of a joint would face the wrong way.</p> <p></p> <p> </p>"},{"location":"releases/2020.11.22/#what-is-rigid-body-dynamics","title":"What is Rigid Body Dynamics?","text":"<p>Loose thoughts that will eventually transform into a quick 10 second video.</p> <p>Rigid Body Dynamics is a branch of computer science which \"studies the movement of systems of interconnected bodies under the action of external forces\". It differs from your typical simulation - such as nHair and nCloth - in that it simulates the <code>translate</code> and <code>rotate</code> channels of a given transform node rather than points of the geometry.</p> <p>The main advantage is that it is well suited for animation and rigging, since animation and rigging is all about translate and rotate.</p> <p>Ragdoll Jargon</p> <ul> <li>Rigid a.k.a. <code>Dynamic Rigid Body</code> is a transform affected by forces. Forces like Wind, but also contacts and constraints which are both considered forces, in that they happen instantaneously rather than continuously.</li> <li>Collider a.k.a. <code>Kinematic Rigid Body</code> is a transform affected by animation. It does not respect forces, but enables you to animate </li> <li>Shape Every rigid body has a shape, either <code>Box</code>, <code>Sphere</code>, <code>Capsule</code> or <code>Mesh</code>. Shape attributes are prefixed <code>Shape *</code> e.g. <code>Shape Length</code> affects the length of the <code>Capsule</code>, whereas <code>Shape Extents</code> affects the dimensions of the <code>Box</code></li> <li>Constraint two rigids interact by either colliding and/or being constrained. Constraints work similarly to Maya Constraints, in that there is a parent and a child that lock either <code>translate</code> or <code>rotate</code> or both channels to each other.</li> <li>Force is an external force, like <code>Wind</code> or <code>Push</code> you can use to affect a <code>Dynamic Rigid Body</code></li> </ul> <p> </p>"},{"location":"releases/2020.11.22/#performance-tips","title":"Performance Tips","text":"<p>Many things are currently unoptimised and these are the lowest hanging fruit you can reap for greater performance.</p> <ul> <li>Hide Rigids Drawing is currently unoptimised and somewhat heavy. You'll find a 5-10% increase in performance by simply hiding the <code>rdRigid</code> shape once you're done tweaking</li> <li>Hide Constraints These are even heavier, since they update dynamically to show you the deltas between animation and simulation poses. Hiding these can yield a 20-30% performance increase.</li> </ul> <p>Other things come down to scene-by-scene basis.</p> <ul> <li>Try PGS There are two separate solvers you can use, \"TGS\" and \"PGS\". TGS (the default) is better suited for full-body dynamics, whereas PGS is better suited for lots of independent rigid bodies, like a brick wall.</li> <li>Decrease Position Iterations The <code>rdRigid.positionIterations</code> is how many iterations are given to each related constraint. Greater numbers means you can use higher values for <code>Guide Strength</code> and <code>Limit Strength</code>, at the expense of performance</li> <li>Decrease Substeps These generally don't need to exceed 8, try 4 and 2 as well to see whether that makes a difference to behaviour/performance.</li> </ul>"},{"location":"releases/2020.11.23/","title":"Dynamic Control 2.0","text":"<p>The headline of this release is Dynamic Control 2.0</p> <ul> <li>CHANGED Dynamic Control Removed fuss and simplified the interface.</li> <li>CHANGED \"Delete All Physics\" Now deletes all physics, regardless of the current selection</li> <li>CHANGED Rigid versus Collider Learn about what these mean and how to convert between the two.</li> <li>ADDED Center of mass (Advanced) Now you can change the point at which a rigid body is balanced</li> <li>ADDED Angular mass (Advanced) Typically computed automatically from the shape and size of your rigid, now you can manually define this.</li> <li>ADDED Auto Connect More clarity, and also usable with things other than joints</li> </ul> <p> </p>"},{"location":"releases/2020.11.23/#dynamic-control-20","title":"Dynamic Control 2.0","text":"<p>Ragdoll is currently very technical.</p> <p>It is exposing features of an underlying mathematical framework for solving \"Rigid-Body Dynamics\" (wiki) and tries to be as friendly about it as possible, but there is always a tradeoff in usability and flexibility.</p> <p>Dynamic Control was made to bridge that gap.</p> <p></p> <p></p> <p>It combines a user-selection with a series of commands to automatically try and figure out your intentions when those intentions are \"add some dynamics to my animation control\".</p> <p>Dynamic Control has been with Ragdoll for a few weeks now, and have undergone a series of changes to try and increase its intuitiveness whilst reducing complexity. It's hard! But in this release I'd like to present what I'm dubbing the \"2.0\" of Dynamic Control.</p> <p>The main differences are:</p> <ol> <li>Preserves existing animation rather than replacing it</li> <li>Simulation follows animation with additional \"stiffness\" and \"damping\" attributes</li> </ol> <p><code>stiffness</code> is the \"springiness\" whereas <code>damping</code> is the \"plasticity\". A control can have 0 damping and be very springy and active. It can also have 0 stiffness, but that would basically disable it.</p> <p>On a technical note, the attributes exposed on your animation control are \"proxy\" attributes. Which means they can be animated either from your control, or from the source node, such as the <code>rSocketConstraint</code> shape node under your control.</p> <p></p> <p>Here are some more videos to get you familiar with the tool.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <ul> <li>More videos</li> </ul>"},{"location":"releases/2020.11.23/#limitations","title":"Limitations","text":"<p>Some limitations in this current version, yell if these affect you.</p> <ol> <li>Negative scale not allowed, the tool will refuse your request</li> <li>Rotate and scale pivots are zeroed out</li> </ol> <p>The same goes for all things Ragdoll at the moment.</p> <p></p>"},{"location":"releases/2020.11.23/#center-of-mass","title":"Center of Mass","text":"<p>If you try and balance something on your finger, but the \"center of mass\" is off center, it would fall over.</p> <p></p> <p>It is the point at which the weight of an object is equal in all directions.</p> <p>Ragdoll automatically computes this point based on what the shape looks like. For meshes, it will voxelise your geometry to figure out the physically accurate volumetric center of mass, assuming the density of the object is uniform throughout (rather than hollow or variadic, like swiss cheese).</p> <p>You can now override this point using <code>rdRigid.centerOfMass</code>.</p> <p> </p> <p>Guidelines</p> <ul> <li>For realistic results, leave it at <code>0</code> to compute the point automatically based on the shape</li> <li>For full control, override it</li> </ul> <p></p>"},{"location":"releases/2020.11.23/#angular-mass","title":"Angular Mass","text":"<p>In real life, if you spin a broom 180 degrees along its length; that's easy. But if you spin it 180 degrees along any other axis, like a ninja, it's considerably heavier.</p> <p></p> <p>The reason is something called \"angular mass\", also known as \"moment of inertia\". It's like mass, but in terms of rotation rather than position. The broom has a low angular mass along its length axis. It takes more force to affect a \"heavier\" axis than a lighter one which is why a broom spins more easily along its length.</p> <p>This effect happens in Ragdoll too and is typically automatically computed for you based on the shape you use. If it looks like the broom, it will act like a broom.</p> <p>With this release, you can now customise this for greater control of your rotations.</p> <p></p> <p>When would you want to do that?</p> <ol> <li>Your shape looks like a broom, but you want it to act like a box</li> <li>Your shape doesn't look like a broom, but you would like it to act like one</li> </ol> <p>Or any combination in between. :) Generally, a broom or any thin shape is more easily spun along its length, so you may find stability in setting your angular mass to <code>(1.0, 1.0, 1.0)</code>, at the expense of realism.</p> <p>Guidelines</p> <ul> <li>For realistic results, leave it at <code>-1</code> to automatically compute the angular mass</li> <li>For full control, override it</li> </ul> <p></p>"},{"location":"releases/2020.11.23/#auto-connect","title":"Auto Connect","text":"<p>The \"Auto Connect\" option now enables you to specify whether to connect joints, or any selected object.</p> <p></p>"},{"location":"releases/2020.11.24/","title":"Hotfix","text":"<p>Hotfix, the last release broke a few things.</p> <ul> <li>FIXED You can now save the Maya scene. Imagine that!</li> <li>FIXED You can now enable the Ragdoll solver after having disabled it</li> </ul> <p>That's all, have mercy.</p>"},{"location":"releases/2020.12.01/","title":"Character 2.0","text":"<p>Lots of good stuff!</p> <ul> <li>CHANGED Active &amp; Passive Rigid More intuitive jargon for these suckers</li> <li>CHANGED Character 2.0 New and improved, now with cup-holders!</li> <li>ADDED Dynamic Control Capsules For those flat controls</li> <li>ADDED Time Multiplier Speed up or slow down your simulation, can be animated!</li> <li>ADDED Normalise Shapes Evenly distribute shapes across a hierarchy</li> <li>ADDED Auto Orient Don't bother orienting your joints with this nifty automation, now the X-axis always means \"length\"</li> <li>CHANGED <code>Delete all Physics</code> now also deletes Ragdoll's attributes on your animation controls, for that squeaky clean feeling</li> <li>ADDED Support for custom Rotate Order means more character controls now work out-of-the-box.</li> <li>FIXED Undo bug and <code>rdRigid</code> The rigids should now clean up after themselves better</li> <li>FIXED Simulation start time now uses the start range rather than start time, which is what you would expect</li> <li>NOTES Stick figures Learn about how thickness affects your simulation</li> <li>NOTES Animation in 1995 Witness how little our industry has changed since then, let's fix that!</li> </ul> <p></p>"},{"location":"releases/2020.12.01/#active-passive-rigid-body","title":"Active &amp; Passive Rigid Body","text":"<p>The terminology for \"Rigid\" and \"Collider\" wasn't clear. Surely, a \"Rigid\" collides too?</p> <p>With this release, I've updated the jargon to make a little more sense.</p> <ul> <li><code>Active Rigid</code> A rigid that moves is active</li> <li><code>Passive Rigid</code> A rigid that doesn't move is passive</li> </ul> <p>This also goes for the <code>kinematic</code> attribute which has been renamed <code>passive</code>, highlighting that an active rigid can made passive by flicking this switch. Backwards compatibility is preserved by keeping the underlying attribute name, and only changing it in the Channel Box and Attribute Editor (i.e. the \"nice name\").</p> <p></p> <p></p>"},{"location":"releases/2020.12.01/#character-20-auto-ragger","title":"Character 2.0 - \"Auto-Ragger\"","text":"<p>This release expands on the \"Character\" tool with some nifty new features. But since I haven't mentioned what 1.0 was capable of, here's an overall round down of what it is and when to use it.</p> <p><code>Character</code> is a one-click character creation tool - and auto-rigger (or auto-ragger, if you will). It's designed to give you the essential tools for turning any native Maya skeleton into an animatable rigid body hierarchy.</p> <p>Read more about it on this new dedicated page I've made for it.</p> <ul> <li>Character Page</li> </ul> <p></p>"},{"location":"releases/2020.12.01/#dynamic-control-capsules","title":"Dynamic Control Capsules","text":"<p>Now Dynamic Control can be configured to generate capsules between selected controls, instead of assuming that the NURBS CVs neatly wrap around the model.</p> <p>Current and Default behaviour</p> <p>The tool uses the <code>Mesh</code> shape per default like before.</p> <p></p> <p>Alternative Capsules</p> <p>But if your controls do not have volume, or do not nicely wrap the underlying model, you can now use Capsules instead.</p> <p></p> <p>The caveat with capsules is that the tool cannot know how long to make your capsules. Therefore, there is an option to use the last-selected node as a hint for how long to make it.</p> <p></p> <p>In this example, 5 nodes selected, 1 passive and 3 active rigids comes out. If you don't use a last selection for length, the last selected capsule will have a length of 0 (it'll be a sphere). That can work in some cases, but is generally discouraged. The center of mass would be wrong and you should expect unrealistic results until you tweak it to fit your model.</p> <p>Gathering information about Dynamic Control on the..</p> <ul> <li>Dynamic Control Page</li> </ul> <p></p>"},{"location":"releases/2020.12.01/#normalise-shapes","title":"Normalise Shapes","text":"<p>An early version of the \"Normalise Sizes\" tool, meant to more evenly distribute sizes of shapes across a hierarchy. Per default, shapes are sized based on the geometry of the Maya node. If it's a box, it'll get the dimensions of the box. If it's a joint, it'll get the length and radius of that joint.</p> <p>But because this mechanism can't see past the one node it's looking at, it's an uphill battle making shapes evenly distributed in a greater network.</p> <p>The \"Normalise Sizes\" tool is meant to address that.</p> <p></p> <p>It's still early, and a few things are missing.</p> <ol> <li>Resolve Self-intersections These are more likely to happen the larger shapes get.</li> <li>Handle spine It tends to become too thin and desperately needs to be thickened up</li> </ol> <p></p>"},{"location":"releases/2020.12.01/#time-multiplier","title":"Time Multiplier","text":"<p>Now you can speed up or slow down your simulation with a multiplier attribute found on the <code>rdScene</code> node!</p> <ul> <li>If you need something happening really-really fast, don't forget to also up your <code>Substeps</code>.</li> <li>If you need something even faster, like a bullet moving across the room in 2 frames, activate <code>Continuous Collision Detection</code> to prevent it from flying through stuff without noticing.</li> <li> <p>For anything slower than real-time, remember contacts and constraints are solved each frame, so more frames means more accurate simulation. If you don't like that, you can either (1) half the substeps alongside halving time or (2) bake out the simulation and scale the bake instead.</p> </li> <li> <p>Example Scene</p> </li> </ul> <p></p> <p></p>"},{"location":"releases/2020.12.01/#rotate-order","title":"Rotate Order","text":"<p>Now rigids play well with non-standard rotation orders, very common your everyday character animation rigs to ensure axes don't go gimbal.</p> <p></p> <p>Thanks to Peter Jemstedt for help on this one!</p> <p></p>"},{"location":"releases/2020.12.01/#auto-orient","title":"Auto Orient","text":"<p>Shapes and constraints can now be automatically oriented based on the parent and child of each joint (soon coming to controls). This should help sort out those pesky joint orientations any manner of skeletons.</p> <p></p> <p></p>"},{"location":"releases/2020.12.01/#undo-bug","title":"Undo Bug","text":"<p>There was this nasty bug that caused <code>rdRigid</code> nodes to remain behind after creating and then undoing. But what got left behind wasn't your normal nodes. They only appeared in the Node Editor and could not be selected or even deleted. They would show themselves out when re-opening the Maya scene which is great.</p> <p></p> <p>This visibility isn't a problem in itself, if it wasn't for them also being visible from Python. If any command needed to know \"hey, animation control, are you connected to a rigid?\" then it would happily reply \"yes! for sure!\".</p> <p>And that's bad. But not anymore, because it's fixed!</p> <p></p>"},{"location":"releases/2020.12.01/#stick-figures","title":"Stick Figures","text":"<p>In a previous release I touched on \"angular mass\" and what it meant for your simulations.</p> <p>Let's look at this in practice.</p> <p> </p> <p>Here's one character with identical settings, the only difference is the radius of her capsules, and yet the move differently. Why is that?</p> <p>Remember that angular mass is 3-dimensional. Just like normal mass, when mass is high, more force is required to introduce motion. In the case of angular mass, the force required is divided into three axes.</p> <p></p> <p>In this illustration, the angular mass along the X axis is much larger than Y and Z, so in to rotate around this axis you need much more force than the other two axes.</p> <p>There is however only 1 value for \"guide strength\". You can think of this force as being distributed across each axis, relative its mass.</p> <p>For example, if your <code>Guide Strength</code> is 10.0, then the distribution might look something like this.</p> <pre><code>X Strength = 10\nY Strength = 2\nZ Strength = 1\n</code></pre> <p>Whereas if <code>angularMassX</code> was equal like a square cube..</p> <p></p> <pre><code>X Strength = 10\nY Strength = 10\nZ Strength = 10\n</code></pre> <p>In light of this, what are your options?</p> <ol> <li>Fit your geometry The most realistic behaviour is what you get when model your shapes to the geometry you are animating.</li> <li>Adjust to taste If there is no geometry, or if the geometry is of an actual stick figure that you would like to act like a person, thicknen up your shapes. To separate between behaviour and collisions, add a second rigid and disable collisions on the first.</li> <li>Edit <code>angularMass</code> The least intrusive but perhaps most complex option is to manually specify a preferred angular mass.</li> </ol> <p>Here's the scene and one more gif to keep you warm at night.</p> <ul> <li>https://files.ragdolldynamics.com/share/rKN1sryQ</li> </ul> <p></p> <p>Some things to experiment with:</p> <ol> <li>What if she has a really heavy head?</li> <li>..really heavy hand?</li> <li>What if the <code>Guide Strength</code> was halved?</li> <li>..or 10x?!</li> <li>What if you remove <code>Guide Strength</code> on her hip?</li> <li>What if you add an extra <code>Guide</code> to her head?</li> </ol> <p></p>"},{"location":"releases/2020.12.01/#animation-in-1995","title":"Animation in 1995","text":"<p>Stumbled upon this (thanks Jarl!) which I think is a great example of what I think we're ready to move away from as an industry. :)</p> <ul> <li>https://twitter.com/jeandenishaas/status/1330671654477860864</li> </ul> <p>Here's a prediction for you - about a year from now, you won't be keyframing anymore. You'll be recording.</p>"},{"location":"releases/2020.12.07/","title":"Dynamic Control Improvements","text":"<p>Small release with important changes if you use Dynamic Controls on complex rigs with pre-existing animation.</p> <ul> <li>ADDED Blend Rigid Now rigids can do some of what Dynamic Controls can do. :)</li> <li>FIXED Dynamic Control switch Shape You can now switch to capsules after having created them as meshes.</li> <li>FIXED Dynamic Control and Undo If your controls have pre-existing animation, undo will now work properly</li> <li>FIXED Dynamic Control and Auto Orient If you controls have intermediate groups between themselves, auto axis will now work properly</li> </ul> <p></p>"},{"location":"releases/2020.12.07/#blend-rigid","title":"Blend Rigid","text":"<p>Non-destructive guidance from your original animation when making active rigid bodies. This works much like Dynamic Control, except the guidance is in worldspace. :)</p> <p>Look at this example of driving an IK handle with physics.</p> <p></p> <p></p> <p>You can blend between simulation and animation using the <code>blendSimulation</code> node in the Channel Box.</p> <p></p>"},{"location":"releases/2020.12.07/#dynamic-control-capsules","title":"Dynamic Control Capsules","text":"<p>Change shape type, after creation. No matter the starting type.</p> <p>In the previous release, I added an option for generating dynamic controls as capsules instead of using the actual NURBS geometry. The usecase is for controls that don't have enough geometry to sufficiently wrap around the underlying geometry.</p> <p>This release enables the user to switch between capsules and mesh after having made the dynamic control. Previously, it was only possible to switch from Capsule to Mesh, not the other way around.</p> <p></p> <p></p>"},{"location":"releases/2020.12.07/#dynamic-control-and-undo","title":"Dynamic Control and Undo","text":"<p>You couldn't undo, now you can.</p> <p>I found and patched a nasty bug that affected any Dynamic Control - and in fact any Rigid - created with anyhting that had pre-existing animation or connections of any kind, breaking undo.</p> <p></p> <p></p>"},{"location":"releases/2020.12.07/#dynamic-control-and-orient","title":"Dynamic Control and Orient","text":"<p>Orientations were whack, now they're back.</p> <p>Previously, the orientation of dynamic controls were determined by the physical hierarchy of the control. If the immediate parent was the expected parent control, all was well. But in real-world rigs, there are typically several intermediate groups - some empty, some constrained, some offsets. In such cases, the immediate parent can't be assumed to be the visible parent control the animator sees on screen.</p> <p>This releases solves this by treating the user-selection as the hierarchy, regardless of what the actual hierarchy looks like. This means you the animator get to control how things are oriented, just like you control what is to be simulated.</p> <p></p>"},{"location":"releases/2020.12.18/","title":"Documentation","text":"<p>Documentation documentation documentation!</p> <ul> <li>ADDED Documentation You heard it here first!</li> <li>ADDED Help Page All menu items now offer a dedicated help page for details about how it works.</li> <li>ADDED Timeline More videos more easily accessible via the new Timeline feature of UIs</li> <li>CHANGED API \ud83d\udc96 cmds The API now integrates with <code>maya.cmds</code></li> <li>ADDED Shelf Support Menu items can now be added to your own custom shelf with <code>Ctrl + Shift + Click</code></li> <li>ADDED Helper warnings Ragdoll now warns when doing something unsupported</li> </ul> <p>This version expires January 10 2021</p> <p></p>"},{"location":"releases/2020.12.18/#documentation","title":"Documentation","text":"<p>Since the last release I've added a boatload of documentation to Ragdoll, including the very website you are visiting now!</p> <p></p> <ul> <li>https://learn.ragdolldynamics.com</li> </ul> <p>This is where I'll aggregate anything there is to know about Ragdoll, including links to the upcoming forums and chat rooms, YouTube series and more. More more more!</p> <p>Documentation is generated dynamically from the same source used to generate the in-Maya menu and graphical dialogs, so whenever you want quick help from within Maya without breaking your flow, you can! And when you're on the train without access to Maya wanting to know more about a particular button or feature, you can!</p> Overview <p></p>"},{"location":"releases/2020.12.18/#help-page","title":"Help Page","text":"<p>Every menu item now comes with the <code>Help</code> sub-menu active.</p> <p></p> <p>The page can also be accessed by clicking on the top description.</p> <p></p> <p>I also added hints to the labels of attributes, rather than just the widgets themselves.</p> <p></p> <p>All of the information is generated from the same source as the website, so they'll tell you the same thing except closer to where you are.</p> <p>For example, the <code>Active Rigid</code> menu item:</p> <ul> <li>https://learn.ragdolldynamics.com/menu/#active-rigid</li> </ul> <p></p>"},{"location":"releases/2020.12.18/#timeline","title":"Timeline","text":"<p>Multiple videos are now visible in the UI, to shed more light onto how things work.</p> <p></p> <p>Hints</p> <p>Hovering over the currently playing video displays a description of what it is about.</p> <p></p> <p>Real-time scrubbing</p> <p>I've added real-time scrubbing too!</p> <p></p> <p>The caveat however is that it consumes a lot of RAM, this dialog of about 1,000 frames takes 1.5 GB of RAM, and a hefty delay to showing the option dialog.</p> <p></p>"},{"location":"releases/2020.12.18/#api-and-cmds","title":"API and cmds","text":"<p>The API used to take and return instances of <code>cmdx</code>, the high-performance alternative to PyMEL. The API now integrates seamlessly with <code>maya.cmds</code>, both taking and returning node paths (i.e. strings) rather than instances, which means you can now do this!</p> <pre><code>from maya import cmds\nfrom ragdoll import api as rd\n\ncube, _ = cmds.polyCube()\ncmds.move(0, 10, 0)\ncmds.rotate(35, 50, 30)\n\nscene = rd.createScene()\nrigid = rd.createRigid(cube, scene)\n\ncmds.evalDeferred(cmds.play)\n</code></pre> <p>The performance advantage of <code>cmdx</code> is still intact, and can be accessed via <code>commands.py</code> which contains identical members and argument signatures, except returning instanced of <code>cmdx</code> instead. This is what's used internally for both performance and readability.</p> <p>In addition, there is now support for <code>interactive.py</code> for quick-and-dirty one-off scripts. This module contains all of what is provided by the Ragdoll menu and work similarly to <code>api.py</code> except they take (1) user selection and (2) user preferences into account.</p> API Reference <p></p>"},{"location":"releases/2020.12.18/#add-to-shelf","title":"Add to Shelf","text":"<p>Menu items can now be added to the shelf by holding Ctrl + Shift + Click. Menu items also reveal the equivalent Python command to use for your scripts!</p> <p></p> <p></p>"},{"location":"releases/2020.12.18/#helper-warnings","title":"Helper Warnings","text":"<p>If nodes have custom pivots or if your Maya scene is set to DG evaluation mode, Ragdoll will tell you about why that's a bad idea.</p> <p></p> <p></p>"},{"location":"releases/2021.01.04/","title":"Licencing","text":"<p>This release introduces proper licencing to Ragdoll.</p> <ul> <li>ADDED Official Website Tell your friends!</li> <li>ADDED Licencing Read all about it!</li> <li>FIXED Locked rotatePivot Minor bug patched up and ready to go</li> <li>FIXED Centered Option Window - On Linux, the option window would sometimes appear in the top-left corner of the screen. No more!</li> </ul> <p></p>"},{"location":"releases/2021.01.04/#website","title":"Website","text":"<p>Happy New Year, the year of Ragdoll. :)</p> <p>I've launched the next generation of Ragdoll's website. Something a little more flashy and intended to wet people's appetite for what lies ahead. Feel free to tell people about it, I've added a note about when it'll become a reality.</p> <ul> <li>https://ragdolldynamics.com</li> </ul> <p></p> <p>Also see this news coverage happening in Japan! :D</p> <ul> <li>https://3dnchu.com/archives/ragdoll-dynamics-maya/</li> </ul> <p></p> <p>The old website can still be accessed, although it is a little crippled.</p> <ul> <li>https://alanjfs.github.io/ragdoll-web/</li> </ul> <p></p> <p>If any link fails, just make sure it's prefixed with <code>ragdoll-web/</code> as the landing page, e.g. <code>https://alanjfs.github.io/ragdoll-web/howto</code></p> <p></p>"},{"location":"releases/2021.01.04/#licencing","title":"Licencing","text":"<p>Ragdoll is growing up and now understands the \"product key\" which means users can now purchase a copy and register it to themselves.</p> <p>Here's the short version, with a longer version below.</p> <ul> <li>Can I use it on more than one machine? Yes</li> <li>Can I move a licence between two machines? Yes</li> <li>Do I need an internet connection to use Ragdoll? Yes and no</li> <li>What if someone steals my licence key? Bummer</li> <li>Can I have a floating licence? Soon</li> <li>Can I activate offline? Soon</li> <li>When exactly is internet required? See long answer</li> <li>Can I manage my licence via Python? Yes</li> </ul> <p>Now let's cover the nitty gritty details, at the time of this writing.</p> <ul> <li>See licencing for current up-to-date information if you are reading this from the future.</li> </ul> <p></p>"},{"location":"releases/2021.01.04/#whats-changed","title":"What's changed?","text":"<p>You won't notice a change, other than a new UI.</p> <p></p> <p>Rather than Ragdoll expiring on a fixed date, it'll now expire 30 days after first launch, unless you activate.</p> <p></p> <p>Activation requires a <code>product key</code> which you get by either purchasing a licence or being really awesome.</p>"},{"location":"releases/2021.01.04/#how-does-it-work","title":"How does it work?","text":"<p>On first launch, Ragdoll will try and connect to the Ragdoll Licence Server (internet connection required, offline activation coming soon) and register your trial version. This version is node-locked to the particular machine you are on. It'll stick with the machine even across re-installs of your operating system.</p> <p>Once you've acquired a product key, you can either:</p> <ol> <li>Click the <code>Ragdoll</code> menu item (bottom)</li> <li>Click <code>Activate</code></li> <li>Enter your product key</li> </ol> <p>Or if you prefer:</p> <pre><code>from ragdoll import licence\nlicence.activate(key)\n</code></pre>"},{"location":"releases/2021.01.04/#can-i-use-it-on-more-than-one-machine","title":"Can I use it on more than one machine?","text":"<p>Yes. You can activate and use Ragdoll on up to 3 machines. You just can't run a simulation on more than 1 at a time, that could lead to suspension of the licence.</p>"},{"location":"releases/2021.01.04/#can-i-move-a-licence-between-two-machines","title":"Can I move a licence between two machines?","text":"<p>Yes. If you've activated 3 licences, you can hit the <code>Deactivate</code> button (which is same as the <code>Activate</code> button once you've actiavted) and the activation will be released.</p>"},{"location":"releases/2021.01.04/#do-i-need-an-internet-connection-to-use-ragdoll","title":"Do I need an internet connection to use Ragdoll?","text":"<p>Yes and no.</p> <ul> <li>Yes: To activate either the trial of purchased version of Ragdoll, the machine needs a connection to the internet.</li> <li>No: Once activated, you won't need internet for 90 days</li> <li>No: For special cases, get in touch.</li> </ul>"},{"location":"releases/2021.01.04/#what-if-someone-steals-my-licence-key","title":"What if someone steals my licence key?","text":"<p>That key is all that is required to run Ragdoll on any machine. If someone takes your key and activates 3 of their own machines, you won't be able to activate it yourself. If this happens, email us with proof of ownership (e.g. via the email used when purchasing) and you'll get a new one.</p>"},{"location":"releases/2021.01.04/#can-i-have-a-floating-licence","title":"Can I have a floating licence?","text":"<p>Yep, get in touch with licencing@ragdolldynamics.com. Later on, these will be as trivial as node-locked licences. All I need is you.</p>"},{"location":"releases/2021.01.04/#can-i-activate-offline","title":"Can I activate offline?","text":"<p>Yes. As soon as someone needs it, I'll add it. Get in touch with licencing@ragdolldynamics.com</p> <p>Offline will be a 4-step process.</p> <ol> <li>Running e.g. <code>activation_request_to_file()</code> from you local machine</li> <li>Emailing generated file </li> <li>Receiving a licence file back </li> <li>Running e.g. <code>activate_from_file(fname)</code> on the same local machine.</li> </ol> <p>Floating offline is also be possible, again get in touch.</p>"},{"location":"releases/2021.01.04/#when-exactly-is-internet-required","title":"When exactly is internet required?","text":"<p>A connection is made in one of two separate occasions.</p> <ol> <li>Calling <code>ragdoll.licence.install()</code></li> <li>On simulating any frame</li> </ol> <p><code>install()</code> is typically called on Maya startup when the plug-in is loaded and menu is installed. You can disable this.</p> <p>That is, Maya can open a scene with Ragdoll in it without making a connection to the internet if neither of these things happen. This means you can simulate on one machine, bake or otherwise disable the solver and send it off to a farm (e.g. local or cloud) without worrying about licences.</p> <p>The alternative would be having to erase any trace of Ragdoll from a scene which would be such a pain.</p>"},{"location":"releases/2021.01.04/#can-i-manage-my-licence-via-python","title":"Can I manage my licence via Python?","text":"<p>Sure can, see below.</p> <p></p>"},{"location":"releases/2021.01.04/#licence-api","title":"Licence API","text":"<p>As a user, you'll generally use the UI. But the UI is ultimately making calls to Python (which is making calls to C++) and you can bypass the UI using these same calls.</p> <pre><code>from ragdoll import licence\n\n# Called once before calling any other licencing function\n# This is automatically called on Ragdoll Python initialisation\n# and simulation start, but needs calling manually if simulation\n# hasn't yet started.\nlicence.install()\n\n# Retrieve the currently activated product key\nlicence.current_key()\n\n# Activate using your product ket\nlicence.activate(key)\n\n# Deactivate whatever key is currently activated\nlicence.deactivate()\n\n# Dictionary of useful information\ndata = licence.data()\n\n{\n    # Same as current_key\n    \"key\"\n\n    # Is the current licence activated?\n    \"isActivated\"\n\n    # Is the current licence a trial licence?\n    \"isTrial\"\n\n    # Has the licence not been tampered with?\n    \"isGenuine\"\n\n    # Has the licence been verified with the server\n    # (requires a connection to the internet)?\n    \"isVerified\"\n\n    # How many days until this trial expires?\n    \"trialDays\"\n}\n</code></pre> <p></p>"},{"location":"releases/2021.01.04/#locked-rotate-pivot","title":"Locked Rotate Pivot","text":"<p>Ragdoll doesn't support a custom <code>rotatePivot</code> attribute and would zero this out whenever a transform is turned dynamic. It'll provide a warning to the end user that this would happen.</p> <p>But, it wasn't taking into account the <code>rotatePivot</code> being connected or locked. If that happened, Ragdoll would flat out refuse and print something cryptic in the Script Editor.</p> <p>This has now been fixed.</p> <ol> <li>If the attribute is zero, nothing changes</li> <li>If the attribute is modified, it'll be zeroed out</li> <li>If the attribute is locked or connected, a warning is printed, but nothing changes.</li> </ol> <p>Ragdoll still doesn't actually support a custom rotate pivot. So this fixes only the situation where..</p> <ol> <li>The <code>rotatePivot</code> is zero (default), and..</li> <li>The <code>rotatePivot</code> is locked</li> </ol>"},{"location":"releases/2021.01.14/","title":"Multiplier Nodes","text":"<p>Highlight for this release are the new Multiplier Nodes!</p> <ul> <li>ADDED Multiplier Nodes Animate in bulk with this nifty utility node!</li> <li>ADDED Environment variables Gain more control over the integration of Ragdoll into your pipeline</li> <li>ADDED Dynamic Shape Type Attributes Cleaner channel box means happier animators</li> <li>FIXED NaN and Dynamic Control Got bogus values on the <code>Rotate Limit</code> of Dynamic Controls? No longer!</li> <li>FIXED Cycle warnings on create In rare occasions, Maya would complain that there's a cycle just as you turn a control dynamic. No more.</li> <li>FIXED Zero limit strength Used to be interpreted as \"inifinitely strong\", but now is \"off\" as one would expect.</li> <li>PUBLICITY EnTT We got mentioned in this great project :)</li> <li>OPTIMISATION Bounding Box Minor performance and stability improvements with native bounding box support</li> </ul> <p></p>"},{"location":"releases/2021.01.14/#multiplier-nodes","title":"Multiplier Nodes","text":"<p>Work procedurally, with this centralised place to edit any number of rigids or constraints simultaneously. The idea is to facilitate a top-level node which govern the overall look of your simulation; withouth having to find and select each control individually.</p> <p>Workflow</p> <ol> <li>Select any number of rigids or constraints</li> <li>Click <code>Multiply Selected Constraints</code> (or <code>Rigids</code>)</li> </ol> <p>The order in which you select matters, the first selection gets the node. The recommended workflow is to start with the root and work your way out. But your selection can span multiple hierarchies or even the whole character. A quick \"Select Hierarchy\" across an entire character is possible also.</p> <p>A constraint and rigid can only have 1 multiplier connected at any one time.</p> <p>Demo</p> <p></p> <p>The most common attributes are made available currently, let me know if you find something missing!</p> <p>YouTube</p> <ul> <li>Wolf Rig Example</li> <li>Multiply Constraint Attributes</li> <li>Multiply Rigid Attributes</li> </ul> <p></p>"},{"location":"releases/2021.01.14/#environment-variables","title":"Environment Variables","text":"<p>Added these suckers for you to play around with.</p> Variable Description Default RAGDOLL_PLUGIN Absolute path to binary plugin, .mll on Windows .so on Linux. This overrides whatever is on <code>MAYA_PLUG_IN_PATH</code> <code>\"ragdoll\"</code> RAGDOLL_NO_AUTOLOAD Do not automatically load the plug-in and add the menu on startup of Maya. <code>False</code> RAGDOLL_NO_STARTUP_DIALOG Do not display the startup-dialog on first launch. <code>False</code> RAGDOLL_AUTO_SERIAL Automatically activate Ragdoll on install using this serial number. Unset <p>For up to date information, see here.</p> <ul> <li>https://learn.ragdolldynamics.com/api/#environment-variables</li> </ul> <p></p>"},{"location":"releases/2021.01.14/#entt","title":"EnTT","text":"<p>Getting some more recognition on the interwebs from EnTT, the library used to keep Ragdoll fast and clean!</p> <ul> <li>https://github.com/skypjack/entt</li> </ul> <p></p> <p></p>"},{"location":"releases/2021.01.14/#dynamic-shape-type-attributes","title":"Dynamic Shape Type Attributes","text":"<p>Now only relevant attributes are visible in the Channel Box, dynamically based on the current type.</p> <p></p> <p>I've added an option to disable this in the Global Preferences.</p> <p></p> <p></p>"},{"location":"releases/2021.01.14/#bounding-box","title":"Bounding Box","text":"<p>Maya uses bounding box information to avoid drawing things that aren't visible in camera. The previous version of Ragdoll didn't provide Maya with any bounding box, which left Maya with no choice but to draw these always; even when behind the camera.</p> <p>Now this isn't so. You shouldn't notice much for smaller scenes, but drawing typically consumes 20-30% of the total CPU impact Ragdoll has on your character rigs. So for larger scenes this should reap a significant performance boost.</p> <p>Pro tip: You can also disable drawing of all Ragdoll primitives by disabling <code>Locators</code> in your viewport; that's how Maya classifies any and all Ragdoll nodes.</p> <p></p> <p></p>"},{"location":"releases/2021.01.14/#cycle-warnings","title":"Cycle Warnings","text":"<p>TLDR; you should now experience fewer cycle warnings.</p> <ul> <li>https://forums.ragdolldynamics.com/t/how-to-cause-a-cycle-warning/33</li> </ul> <p>Whenever you create a rigid from any Maya node, like an animation control, Ragdoll makes a note of the position and orientation of that control. It takes into account that you may not be on the start frame when you create the control, which is what you most likely intended to do. When that happens, Maya will silently roll back time in the background to query an attribute at the start frame.</p> <p>This silent roll-back has a tendency to trigger evaluation of unrelated nodes, like IK handles, which in turn trigger other nodes, ultimately leading back to where it came from, and thus cause a cycle. These were somewhat harmless, but could mask a real cycle from happening.</p> <p>In this release, this silent roll back only happens when you actually aren't on the start frame. So you should see less of it. There's still room for improvement however, so if you still find warnings or any odd behaviors being due to cycles, do reach out!</p> <p></p>"},{"location":"releases/2021.01.14/#nan","title":"NaN","text":"<p>If you've ever gotten these, you can now rest easy. They are gone. They could happen on occasion, especially after repeated undo. It had to do with memory access violation by Maya being naughty, something it really shouldn't be able to do in the first place. We now guard against this, so all is well.</p> <p></p>"},{"location":"releases/2021.01.15/","title":"Dynamic Control 3.0","text":"<p>The gift that keeps on giving, the highlight for this release is Dynamic Control 3.0!</p> <ul> <li>UX Dynamic Control 3.0 More intuitive, more smart</li> <li>UX Convert &amp; Restore Slimmer and more intuitive</li> <li>UI Passive Grayscale Passive rigids are now distinguished by grayscale colors</li> <li>ADDED Select All Quickly select all rigids and constraints with this handy menu or shelf item.</li> </ul> <p></p>"},{"location":"releases/2021.01.15/#dynamic-control-30","title":"Dynamic Control 3.0","text":"<p>Another step forward for Dynamic Controls.</p>"},{"location":"releases/2021.01.15/#default-capsule","title":"Default Capsule","text":"<p>Ragdoll now defaults to the newer <code>Capsule</code> shape type for dynamic controls. It's faster and applies more generally to most rigs; even those that do have NURBS curves wrapping around the underlying character geometry.</p> <p>Before</p> <p></p> <p>After</p> <p></p>"},{"location":"releases/2021.01.15/#automatic-multiplier","title":"Automatic Multiplier","text":"<p>The previous release introduced Multiplier Nodes. This release add a multiplier to each new dynamic control chain per default, on the root control, which means you can now do stuff like this!</p> <p> </p>"},{"location":"releases/2021.01.15/#centralised-blend-simulation","title":"Centralised Blend Simulation","text":"<p>Previously, to blend between animation and simulation you needed to select the controls to blend and edit each individually. But it's rather uncommon (and probably not very useful) to want independent control over each blend.</p> <p>In this release, there is 1 central <code>Blend Simulation</code> attribute on the root dynamic control. This can be changed in the Options, but will probably disappear unless someone says they like it and wants to keep it!</p> <p></p>"},{"location":"releases/2021.01.15/#smart-tip-length","title":"Smart Tip Length","text":"<p>Previously, Ragdoll wasn't able to figure out how long to make the last control. Now it borrows length, radius and orientation from the parent capsule, which should be what you expect for the majority of cases.</p> <p>Meaning you can now expect this.</p> <p>Before</p> <p> </p> <p>After</p> <p></p> <p>You can change the shape type after creation, and modify the default value in the options dialog.</p> <p></p>"},{"location":"releases/2021.01.15/#transparent-root","title":"Transparent Root","text":"<p>The first selection of a dynamic control chain is passive, and it used to also collide with the first child. But, most of the time, that root isn't useful as a collider. It would be a global hip control or some particular shoulder/clavicle gizmo.</p> <p>So the root is now set to <code>Collide = False</code>, meaning this is now ok.</p> <p></p> <p>You can still enable it afterwards if you'd like.</p> <p></p>"},{"location":"releases/2021.01.15/#convert-and-restore","title":"Convert and Restore","text":"<p>I've merge the <code>Convert Rigid</code> and <code>Convert Constraint</code> buttons into the rigid and constraint creation buttons.</p> <p></p>"},{"location":"releases/2021.01.15/#convert-rigid","title":"Convert Rigid","text":"<p>Turn a passive into an active rigid, or vice versa.</p> <ol> <li>Select active rigid in viewport</li> <li>Click <code>Passive</code> to convert it into a passive rigid</li> </ol> <p></p> <p>If it's already passive, nothing happens. If you wanted to make a passive rigid active, you know what to do.</p>"},{"location":"releases/2021.01.15/#convert-constraint","title":"Convert Constraint","text":"<p>Turn a Socket Constraint into a Hinge Constraint, or any other type, on-the-fly.</p> <ol> <li>Select any constraint</li> <li>Click <code>Socket</code> to turn it into a socket constraint, regardless of what it was</li> </ol> <p></p>"},{"location":"releases/2021.01.15/#restore-constraint","title":"Restore Constraint","text":"<p>Sometimes you just want to start from scratch. And using the same convert feature you can also restore a constraint to its original settings.</p> <ol> <li>Select any constraint</li> <li>Click any constraint type</li> </ol> <p></p> <p></p>"},{"location":"releases/2021.01.15/#passive-grayscale","title":"Passive Grayscale","text":"<p>Spot passive rigids by their colors, now all passive rigids are gray.</p> <p>That means..</p> <ol> <li>Active rigids are multi-colored</li> <li>Passive rigids are gray</li> <li>Controls are blue</li> </ol> <p></p> <p></p>"},{"location":"releases/2021.01.15/#select-all","title":"Select All","text":"<p>Sometimes you want to make bulk changes to all rigids or all constraints at once. You could select each of them, or you could turn to Python and say..</p> <pre><code>cmds.select(cmds.ls(type=\"rdRigid\"))\n</code></pre> <p>Now there's a menu item for it too!</p> <ul> <li>With nothing selected, it'll select all rigids or constraints</li> <li>With something selected, it'll filter that selection for just rigids or constraints</li> </ul> <p>That means you can either find everything all at once and make great big changes, or you can zone in on a particular hierarchy or character and affect all rigids or constraints in just that hierarchy!</p> <p></p> <p>Fire Wolf rig courtesy of Truong CG Artist</p>"},{"location":"releases/2021.01.17/","title":"Hotfix","text":"<p>Minor maintenance release.</p> <ul> <li>FIXED userSetup.py More robust integration with some pipelines</li> <li>FIXED Two-chain Dynamic Control More able to deal with edge-cases</li> </ul> <p></p>"},{"location":"releases/2021.01.17/#usersetup","title":"userSetup","text":"<p>The startup code for Ragdoll since 2021.01.14 didn't play well with other <code>userSetup.py</code> files, like the ones you might have in a major production pipeline.</p> <p>If you were having any issues with the <code>os</code> module, then this is the fix for you.</p> <p></p>"},{"location":"releases/2021.01.17/#two-chain-dynamic-control","title":"Two-chain Dynamic Control","text":"<p>The previous release made it possible for the last selected Dynamic Control to inherit its size and orientation from the previously selected control.</p> <p>This only worked if you have 3 controls selected. This release makes it work on just 2 controls!</p>"},{"location":"releases/2021.01.27/","title":"Message Board","text":"<p>Focus of this release is Solver Iterations, and some UI additions too!</p> <ul> <li>ADDED Message Board Greater visibility of warnings and errors</li> <li>ADDED Solver Iterations Trade performance for precision</li> <li>ADDED Help Line The Help Line now displays a summary of what menu items do</li> <li>ADDED Delete from Selection Trim your setup more accurately with this new addition</li> <li>FIXED Locked Channels Now able to simulate even the most locked channel!</li> <li>FIXED Multiple cmdx You're now able to have Ragdoll running in conjunction with cmdx and vendors of cmdx.</li> <li>ADDED Animated Initial State A more adaptive initial state</li> <li>ADDED Worldspace Dynamic Control Dynamic Controls.. now in wordspace!</li> </ul> <p></p>"},{"location":"releases/2021.01.27/#message-board","title":"Message Board","text":"<p>Ever opened the Script Editor to find Ragdoll screaming for help? I've added a new Message Board to help Ragdoll stand out from the overall messy or hidden messages from rigs and Maya and all else.</p> <p></p> <p>Your goal then is to never have any messages appear in the Message Board.</p> <p>A silent Message Board means a happy simulation. :)</p> <p></p>"},{"location":"releases/2021.01.27/#solver-iterations","title":"Solver Iterations","text":"<p>Anything called <code>strength</code> in Ragdoll is a multipler for <code>stiffness</code> and <code>damping</code>. And currently there's a ceiling to how high <code>stiffness</code> and <code>damping</code> values can go, after which point they just stop having an effect.</p> <p>The values are limited by how many \"iterations\" you let the solver perform. Per default, they are set to <code>8</code> and can be found at <code>rdRigid.positionIterations</code>. This release sheds some more light on this somewhat obscure attribute by exposing it directly on the solver, right next to <code>Substeps</code>.</p> <p></p> <p>This value multiplies each <code>rdRigid.positionIterations</code> attribute, meaning a value of <code>2</code> yields a total iteration count for every rigid in the solver of <code>16</code> (i.e. <code>2 * 8</code>).</p> <p>Which means you can now do this!</p> <p></p> <p>You can further customise iteration counts per rigid, under the Advanced tab.</p> <p> </p> <p>There's no limit to how many iterations you can allow; more iterations means greater accuracy. However, I have found that values beyond 128 tend to get funky.</p> Iteration Count Strength Range Description <code>8</code> (default) 0-5 Default, sensible for most uses <code>16</code> 0-10 High <code>32</code> 0-500 Really, really high <code>64</code> 0-1000 Ultra Nightmare <p>For completeness, here's how <code>Iterations</code> differ from <code>Substeps</code>.</p> <ul> <li>Substep Divide each frame into smaller time steps</li> <li>Iterations Number of times a constraint is \"resolved\"</li> </ul> <p>They both provide accuracy in slightly different ways. With a greater amount of substeps, the solver is effectively working in slow-motion. Everything is easier in slow-motion. Resolving constraints is independent of time and a little more technical to describe, so you can instead kind of think of it a little bit like rubbing dirt of a silver platter. The first rub, you'll get most of it off. But the more you rub, the shinier it gets. There's no limit to how much you can rub, but eventually rubbing will stop having a visible effect.</p> <p></p>"},{"location":"releases/2021.01.27/#help-line","title":"Help Line","text":"<p>Hovering over any menu item now reveals a short description of what it does in the native Maya Help Line (typically at the bottom of the Maya window).</p> <p></p> <p>This is the same information as can be found in the Menu Reference.</p> <p></p>"},{"location":"releases/2021.01.27/#delete-from-selection","title":"Delete From Selection","text":"<p>The <code>Delete All Physics</code> menu-item has gotten an option box, now it can be used to limit deletion to currently selected nodes!</p> <p></p> <p></p>"},{"location":"releases/2021.01.27/#locked-channels","title":"Locked Channels","text":"<p>The previous release would bark at you whenever trying to turn any transform dynamic if it had any of its <code>translate</code> or <code>rotate</code> channels locked. This was a problem when you didn't necessarily care for some of them. For example, with a dynamic control, you really only cared for the <code>rotate</code> channels but would be prevented from simulating them if the sibling <code>translate</code> channels were locked. No longer!</p> <p>That said, the simulation does still produce both translate and rotate values. There's no way around it. And locked channels cannot be connected or edited. Even though you might want to. If the transform is referenced, then there's nothing you can do.</p> <p></p> <p>Warnings will be emitted (and made visible in the new Message Board!) if this happens, so it's still true that if your Message Board is silent, all is well.</p> <p></p>"},{"location":"releases/2021.01.27/#multiple-cmdx","title":"Multiple cmdx","text":"<p>This should only really affect users of WeightShift, which also uses <code>cmdx</code>. The previous release was adamant on being the one and only physics solver for Maya. But it has now become more lenient and accepting of other lifestyle choices. :D</p> <p></p>"},{"location":"releases/2021.01.27/#animated-initial-state","title":"Animated Initial State","text":"<p>Heads up! This got removed. Stay tuned for a re-appearance in a later release</p> <p>In the previous release, you could animate your dynamic controls, but you couldn't change the initial pose unless you explicitly called <code>Set Initial Pose</code> from the <code>Ragdoll | Rigging</code> menu. With this release, you can!</p> <p></p> <p>Limitations</p> <p>This currently only works reliably with strict FK control hierarchies.</p> <p>The animation is translated into an initial state, but in doing so we are effectively recreating the parent/child relationship between controls. And sometimes - perhaps a lot of times - this isn't a direct FK hierarchy.</p> <p></p> <p>Here you can see how the physics and animation controls disagree on what the pose should be. The animation controls aren't in a hierarchy, they are constrained in a complex manner. It isn't accurately reproduced in the initial state.</p> <p>So if you notice your the simulated initial state to differ from the first pose of your animation, it's the best you can get at the moment.</p> <p></p>"},{"location":"releases/2021.01.27/#worldspace-dynamic-control","title":"Worldspace Dynamic Control","text":"<p>Heads up! This got removed. Stay tuned for a re-appearance in a later release</p> <p>Guide forces in dynamic controls are all local. Which means it'll maintain a pose, even if that pose is upside down or sideways.</p> <p></p> <p>And since many versions ago, you've been able to append these \"Guide\" controls, that are in worldspace (per default). These look at the worldspace position and rotation of the control, and use that to line up the simulation. Much like IK!</p> <p></p> <p>Now these are built-in to each Dynamic Control (toggle in the option dialog).</p> <p></p> <p>These can help keep a character closer to an animated pose. But they are \"cheats\". Forces that appear out of nowhere, as opposed to the local forces which behave like muscles. Muscles can tense and relax whilst still appearing natural, but these are not natural. You can however use them to fake natural.</p> <p>One more thing; world spaces have strength in either translation or rotation, or both. A worldspace rotation could for example keep a head facing a certain direction, not unlike how IK works. Except physical!</p> <p></p> <p>Limitations</p> <p>This feature uses the same \"virtual hierarchy\" as the animated initial state and suffers from the same limitations.</p> <p></p>"},{"location":"releases/2021.02.07/","title":"Scale","text":"<p>Highlight of this release is Support for Scale!</p> <ul> <li>ADDED Support for Scale Ragdoll now works on scaled geometry and controls</li> <li>ADDED Support for NURBS Surfaces This hip new thing popularised in the 90s is now yours to reap!</li> <li>ADDED Visualise Output Attributes Gain insight into what comes out of the solver</li> <li>FIXED Zombie Attributes Delete All Physics didn't quite catch'em all</li> </ul> <p></p>"},{"location":"releases/2021.02.07/#scale","title":"Scale","text":"<p>This has been an epic challenge, but it finally happened!</p> <p>Up till now, any scale other than (1, 1, 1) at any level of a hierarchy would have either broken a simulation or refused to work outright. Not anymore! Now you can simulate scaled transforms, including scaled rigs and all of what it entails.</p> <p></p> <p>Here's a brief on what works and what doesn't.</p> Feature Example \u2714\ufe0f Uniform Scale <code>1.5, 1.5, 1.5</code> \u2714\ufe0f Non-uniform Scale <code>0.5, 0.6, 0.12</code> \u2714\ufe0f Scaled parent(s) Scaled root control \u2714\ufe0f Mixed Scale &amp; Constraints Scaled box to differently-scaled capsule \u2796 Zero Scale <code>0.0, 0.0, 0.0</code> \u2796 Mixed Zero Scale <code>1.0, 0.0, 1.0</code> \u2796 Negative Scale <code>-1.5, -1.5, -1.5</code> \u2796 Mixed Positive/Negative Scale <code>0.9, -1.5, -1.1</code> \u2796 Non-uniform Negative Scale <code>-1.0, 1.0, -2.0</code> \u274c Non Object-Space Scale Scale in <code>World</code> mode <p></p> <p>There are a few caveats.</p> <ul> <li>Avoid negative scale if possible, it works but can surprise you</li> <li>Negative non-uniform scale is more common, e.g. to mirror something across the X-axis, and may work but may surprise you</li> <li>Non object-space scale flat-out doesn't work, not even Maya can do that; it's here for completeness.</li> <li>Scale cannot be animated</li> <li>Scale is set on the start frame, and is part of the Initial State. It is also updated alongside the translate/rotate initial state.</li> </ul>"},{"location":"releases/2021.02.07/#negative-scale","title":"Negative Scale","text":"<p>Commonly found in parent hierarchies that attempt to mirror the behavior of a control or hierarchy of controls. I'd like to better support this, but it is currently limited by math. More specifically, in that a transformation matrix simply cannot distinguish between negative and positive scale.</p> <p>So this one is semi-supported. The problem is for Ragdoll to distinguish between scale and rotation. It's a bit mathy, but you know how you can achieve the same pose by either scaling something negatively or rotate it 180 degrees along one or more axes? Ragdoll currently cannot know which of the possible outcomes you wanted.</p> <p>Here's a visual to help illustrate this point. (Reference)</p> <p></p> <p>Here's what can happen in practice.</p> <p></p> <p>Notice how both the scale and rotation values changed, even though the object in the viewport remains in the same orientation. That's because these values are both correct scale and orientation for this particular transform.</p> <p>You might think..</p> <p>Well, whatever. So long as it's oriented right, why should I care?</p> <p>Well, what if you had animated a realistically looking horse locomotion, rotating around the X-axis?</p> <p></p> <p>Did you spot it? Both X and Z got their scale neutralised and X got 180 degrees steeper, compensating for the neutralised scale values. Also Z got flipped too! You can work around it, by accepting the new Z and offsetting your animation by 180 degrees.</p> <p>There's also the issue with it flying off for the first few frames. It's unclear why this happens, this may be a bug in the solver itself, trying to reconcile an orientation that is 180 degrees wrong.</p> <p>So, negative scale works, but it's painful. Avoid if possible.</p>"},{"location":"releases/2021.02.07/#zero-scale","title":"Zero Scale","text":"<p>This is \"supported\" in that it doesn't fatal crash your Maya session. Ragdoll is a 3D solver, it cannot operate on anything without volume and mass.</p> <p>Here's an example of what to expect should you find the need for zero scale.</p> <p></p>"},{"location":"releases/2021.02.07/#scaled-rotation","title":"Scaled Rotation","text":"<p>TLDR; if you animate something from 0-45 degrees, it will rotate 45 degrees, regardless of scale.</p> <p></p> <p>This should be what you expect and won't need remembering, but for completeness here's what happening under the hood.</p> <p>Ragdoll strips scale from most internal computations. It's kept mostly so that it can be outputted again, as well as for rendering. See, custom Maya nodes render in the space of the transform. So rendering a point at coordinate (0, 0, 0) ends up in the middle of the transform node. Even as you move that transform around with the translate tool. That's problematic if you need to draw something uniformly, like the limits and drive visualisations. Even more so when you attempt to draw a line from one transform to another.. at different scales!</p> <p>But stripping it early is beneficial for both readability of code, but also usability for you. Uniform scale normally doesn't affect rotation, but non-uniform scale could.</p> <p>Consider this.</p> <p></p> <p>Here, we've got a single angle of 45 degrees. If you were to scale this horizontally, you can see how the angle now changes! At a scale of 0, the angle has gone from 45 degrees to 90 degrees.</p> <p>This complicates things a lot, and Ragdoll saves you from that by not taking non-uniform scale into consideration for its rotations. A 45 degree angle will remain 45 degree regardless of scale; with the exception of negative scales which still flip the angle as you'd expect.</p>"},{"location":"releases/2021.02.07/#non-object-space-scale","title":"Non Object-Space Scale","text":"<p>You probably don't do this, but for completeness here's what doesn't work.</p> <p> </p> <p></p>"},{"location":"releases/2021.02.07/#nurbs-surfaces","title":"NURBS Surfaces","text":"<p>Ragdoll could translate polygon meshes and NURBS curves into collision meshes, and today I'm happy to announce that it now also supports the latest trend in computer graphics, heavily used in the 90s at Dreamworks for critically acclaimed feature animation films Antz and Shark Tale.</p> <p>Join the future!</p> <p></p> <p></p>"},{"location":"releases/2021.02.07/#output-attributes","title":"Output Attributes","text":"<p>The Attribute Editor now displays the output translate, rotate and scale attributes from each rigid body. In both local and world space coordinates.</p> <p></p> <p>These are the values that feed into your animation control, or any transform you're simulating.</p> <p></p>"},{"location":"releases/2021.02.07/#zombie-attributes","title":"Zombie Attributes","text":"<p>Minor bug fix.</p> <p>The <code>Delete All Physics</code> menu item didn't catch the last remaining <code>Local Strength</code> attribute created by <code>Create Dynamic Control</code>. This is all patched up!</p>"},{"location":"releases/2021.03.01/","title":"Automatic Initial State","text":"<p>It's been an epic month of problem-solving, but it finally happened. :D Highlight for this release is.. drumroll.. Automatic Initial State!</p> <ul> <li>ADDED Auto Initial State Start simulating in whatever pose your character is in</li> <li>ADDED Hierarchy Preservation Moving parents around now correctly moves children</li> <li>ADDED Worldspace Constraints Animate in both local- and world-space</li> <li>FIXED DG Viewport Bug Fix for rare cases of viewport going out of sync</li> <li>FIXED Unload plug-in The Ragdoll plug-in can now be loaded and unloaded using the native Maya plug-in manager</li> <li>ADDED New Commands Developer candy, return a JSON of physics for export and import into another application, like Unreal, Motion Builder or Blender!</li> </ul> <p>Tiger Rig courtesy of www.cgspectrum.com</p> <p></p>"},{"location":"releases/2021.03.01/#auto-initial-state","title":"Auto Initial State","text":"<p>Have you ever used the <code>Set Initial State</code> button? It's useful, isn't it? It's what enables you to turn something dynamic but then change your mind about where it should start simulating.</p> <p>With this release, that process is automatic! It's more or less what you expected would happen anyway. I mean, obviously the box should drop from where you left it, rather than where it was originally turned dynamic?</p> <p></p> <p></p>"},{"location":"releases/2021.03.01/#disable-feature","title":"Disable Feature","text":"<p>If you would rather have none of it, or if it gives you trouble, you can switch it off like this.</p> <p>NOTE: Changes take effect on next scene open and newly created rigids.</p> <p></p>"},{"location":"releases/2021.03.01/#parallel-only","title":"Parallel Only","text":"<p>That's right, automatic initial state will only work in Maya's Parallel Evaluation mode.</p> <p>It may end up getting support for DG later on, the trouble lies in the callback we use to read an edited initial state is not reliable in DG. It's possible we'll find another means of achieving the same goal in the future, although DG really is part of the past. Ragdoll works best under Parallel for other reasons too; primarily performance but also stability and robustness.</p>"},{"location":"releases/2021.03.01/#constraints-stay-behind","title":"Constraints Stay Behind","text":"<p>Constraints currently show you the true position of rigid bodies.</p> <p></p> <p>They stay behind because hierarchy preservation is \"artificial\". It's just for you and Maya. In a later release, I'll make rigids also stay behind, and only have your controls move with hierarchy, so that you get to visualise where rigid bodies really are (even when your controls have locked channels, like translate) whilst at the same time letting you move and see your controls and how they reflect that true position.</p>"},{"location":"releases/2021.03.01/#caveat","title":"Caveat","text":"<p>There's one known \"gotcha\" with the automated initial state.</p> <p>Namely, the initial state is \"recorded\" whenever you transition from the start time to the next frame. Evaluation on the next frame will automatically read whatever was evaluated previously, and store that as the initial state.</p> <p>However! It is possible to trigger evaluation without actually changing time. Maya loves doing that. You can do it by either scrubbing the timeline, or holding <code>K</code> and dragging (effectively scrubbing) the viewport. As you scrub, even if time isn't actually changing, Maya will go ahead and re-evaluated the time.</p> <p>When that happens, it won't actually record a new initial state, but instead restore the original value. Something to be aware of.</p>"},{"location":"releases/2021.03.01/#journey","title":"Journey","text":"<p>For the technically inclined, here you can witness last month's struggle first hand and all the kinks uncovered in Maya's API and evaluation graph.</p> <p></p> <p></p>"},{"location":"releases/2021.03.01/#hierarchy-preservation","title":"Hierarchy Preservation","text":"<p>Like in the real world, physics happens in worldspace. There are no \"children\" and no \"parents\". As a result, as soon as you turn any of your controls dynamic, they start acting that way. But we don't want that.</p> <p>With this release, you'll now get realism along with that familiar feeling of having children and being a parent!</p> <p>Before</p> <p></p> <p>After</p> <p></p>"},{"location":"releases/2021.03.01/#caveat_1","title":"Caveat","text":"<p>There is one known case to be aware of when it comes to children.</p> <p>Passive Rigids</p> <p>Hierarchy is currently preserved only if a rigid is active. The reason being.. well, I'll just show you.</p> <p></p> <p>In this case, the passive rigid bodies are driven by an external transform, those blue \"controls\". Hierarchy is coming from the blue rigids, so we wouldn't want the passive rigids to mess with that.</p> <p>But now when we move the rigids themselves (gray, in this example) we aren't getting our hierarchy preservation.. :(</p> <p>At the other extreme, if we do account for hierarchy then the problem pops up at the other end instead.</p> <p></p> <p>I trust experience and feedback will light the way here for a more intuitive experience working with external controls.</p> <p></p>"},{"location":"releases/2021.03.01/#worldspace-constraints","title":"Worldspace Constraints","text":"<p>If you thought automatic initial state was enough, think again! If your controls have animation already applied, Ragdoll will now translate it into physics in world- and local-space.</p>"},{"location":"releases/2021.03.01/#default-behavior","title":"Default Behavior","text":"<p>Local animation, like a rotated arm, are imbued with a \"local constraint\" to preserve the relative angle between it and its parent. World animation, like in this case where there is no parent, get imbued with a \"world constraint\".</p> <p></p>"},{"location":"releases/2021.03.01/#world-only","title":"World Only","text":"<p>Here's what you get when constraining the child to its worldspace pose. Notice how it assumes the angle you give it regardless of whatever the parent is doing.</p> <p></p>"},{"location":"releases/2021.03.01/#local-only","title":"Local Only","text":"<p>Conversely, with just the local constraint, it'll assume the relative angle and respects its parent.</p> <p></p>"},{"location":"releases/2021.03.01/#world-local","title":"World + Local","text":"<p>Things get interesting when you combine the two!</p> <p></p>"},{"location":"releases/2021.03.01/#world-world-local","title":"World + World + Local","text":"<p>..or combine the three! Here's the lower arm trying to adhere to both its worldspace and local orientation. Notice the constraint coming out of alignment at the root; the constraints are of equal strength per default so it'll end up averaging the desired poses.</p> <p></p> <p></p> <p>There's one more thing happening here that I'll touch on in an upcoming release, which is the concept of world space forces. Notice how the joint chain follows animation</p> <p></p>"},{"location":"releases/2021.03.01/#dg-viewport-bug","title":"DG Viewport Bug","text":"<p>If you've ever had the viewport \"remember\" old frames as you scrub the timeline, this fix is for you.</p> <p></p> <p></p>"},{"location":"releases/2021.03.01/#unload-plug-in","title":"Unload Plug-in","text":"<p>In the previous release, licencing was implemented as a Python binding. The trouble with compiled Python bindings in Maya is that they cannot be unloaded. As a result, Ragdoll could not be unloaded.</p> <p>Licencing is now implemented as a native Maya command, accessible as <code>ragdollLicence</code> from MEL and <code>cmds.ragdollLicence()</code> from Python.</p> <ul> <li>See ragdollLicence below</li> </ul> <p></p>"},{"location":"releases/2021.03.01/#new-commands","title":"New Commands","text":"<p>Three new commands was added in this release, they are primarily intended for TDs and technically minded folk.</p> <ul> <li><code>cmds.ragdollLicence()</code></li> <li><code>cmds.ragdollPeek()</code></li> <li><code>cmds.ragdollDump()</code></li> </ul>"},{"location":"releases/2021.03.01/#cmdsragdolllicence","title":"cmds.ragdollLicence","text":"<pre><code>Synopsis: ragdollLicence [flags]\nFlags:\n   -q -query\n   -a -activate     String\n   -d -deactivate  \n   -h -help        \n   -i -init        \n  -ia -isActivated \n  -ig -isGenuine   \n  -it -isTrial     \n  -iv -isVerified  \n  -md -magicDays   \n   -r -reverify    \n   -s -serial      \n  -td -trialDays   \n</code></pre> <p>You still typically interact with <code>ragdoll.licence</code>, as documented here. But under the hood, this is now the native Maya command being called.</p> <pre><code>from maya import cmds\ncmds.ragdollLicence(serial=True, query=True)\n# Your-Serial-Number-Here\n</code></pre>"},{"location":"releases/2021.03.01/#cmdsragdollpeek","title":"cmds.ragdollPeek","text":"<pre><code>Synopsis: ragdollPeek [flags]\nFlags:\n   -e -entity             UnsignedInt\n   -h -help              \n  -ps -physicsStatistics \n  -ss -sceneStatistics\n</code></pre> <p>Gain insight into what Maya sees in Ragdoll.</p> <pre><code>cmds.ragdollPeek(sceneStatistics=True)\n\n# Ragdoll Peek Scene\n ____________ ___________________________ _______________\n| Id         | Scene                     | Name          |\n|------------|---------------------------|---------------|\n| 71         | rSceneShape               | rSceneShape   |\n| 70         | rSceneShape               | rRigid18      |\n| 69         | rSceneShape               | rRigid17      |\n| 67         | rSceneShape               | rRigid        |\n| 65         | rSceneShape               | rRigid7       |\n| 63         | rSceneShape               | rRigid8       |\n| 61         | rSceneShape               | rRigid14      |\n| 59         | rSceneShape               | rRigid15      |\n| 57         | rSceneShape               | rRigid16      |\n| 55         | rSceneShape               | rRigid11      |\n| 53         | rSceneShape               | rRigid12      |\n| 51         | rSceneShape               | rRigid13      |\n| 49         | rSceneShape               | rRigid9       |\n| 46         | rSceneShape               | rRigid10      |\n| 44         | rSceneShape               | rRigid4       |\n| 42         | rSceneShape               | rRigid5       |\n| 40         | rSceneShape               | rRigid6       |\n| 38         | rSceneShape               | rRigid1       |\n| 36         | rSceneShape               | rRigid2       |\n| 34         | rSceneShape               | rRigid3       |\n| 15         | rSceneShape               | rRigid27      |\n| 14         | rSceneShape               | rRigid28      |\n| 13         | rSceneShape               | rRigid29      |\n| 12         | rSceneShape               | rRigid30      |\n| 11         | rSceneShape               | rRigid31      |\n| 10         | rSceneShape               | rRigid32      |\n| 9          | rSceneShape               | rRigid33      |\n| 8          | rSceneShape               | rRigid34      |\n| 7          | rSceneShape               | rRigid19      |\n| 6          | rSceneShape               | rRigid20      |\n| 5          | rSceneShape               | rRigid21      |\n| 4          | rSceneShape               | rRigid22      |\n| 3          | rSceneShape               | rRigid23      |\n| 1048576    | rSceneShape               | rRigid24      |\n| 1048578    | rSceneShape               | rRigid25      |\n| 1048577    | rSceneShape               | rRigid26      |\n|____________|___________________________|_______________|\n</code></pre> <pre><code>cmds.ragdollPeek(physicsStatistics=True)\n\n# Ragdoll Peek Solver\n- Number of scenes: 1\n- Number of shapes: 36\n- Number of materials: 36\n- Number of convex meshes: 0\n- scene[71]\n  - Number of dynamic actors: 35\n  - Number of static actors: 1\n  - Number of constraints: 18 # \n</code></pre>"},{"location":"releases/2021.03.01/#cmdsragdolldump","title":"cmds.ragdollDump","text":"<pre><code>Synopsis: ragdollDump\n   -h -help              \n</code></pre> <p>This is more of a teaser of what's to come, but let me tell you about it for completeness of these release notes.</p> <p><code>ragdollDumps</code> is the start of an integration effort of Ragdoll into any and all external software, like Unreal and Blender. Anything able to parse JSON. Including web-applications.</p> <p>What if you could rig and/or animate in Maya, but then export the physics setup into e.g. Unreal? I'm not talking about baking your animation and playing it back somewhere else. But of exporting the internal physics objects from Ragdoll, translating them to whatever the third-party software uses for physics, and re-using it there!</p> <p>With that, you could bypass all of the horrible authoring tools of those applications and transfer a physics scene or setup across applications.</p> <p>Later, you'll be able to load these into a standalone Ragdoll desktop and web-based application. Useful for sharing your creations and animations with others, and for debugging too!</p> <pre><code>import json\nfrom maya import cmds\n\ncmds.ragdollDump()\n# {\n#   \"scenes\": {\n#     \"0\": {\n#       \"id\": 0,\n#       \"name\": \"rSceneShape\",\n#       \"entities\": {\n#         \"0\": {\n#           \"id\": 0,\n#           \"components\": {\n#             \"NameComponent\": {\n#               \"type\": \"NameComponent\",\n#               \"members\": {\n#                 \"value\": \"rSceneShape\"\n#               }\n#             }\n#           }\n#         },\n#         \"1\": {\n#           \"id\": 1,\n#           \"components\": {\n#             \"NameComponent\": {\n#               \"type\": \"NameComponent\",\n#               \"members\": {\n#                 \"value\": \"rRigid\"\n#               }\n#             }\n#           }\n#         },\n#         \"2\": {\n#           \"id\": 2,\n#           \"components\": {\n#             \"NameComponent\": {\n#               \"type\": \"NameComponent\",\n#               \"members\": {\n#                 \"value\": \"rGuideConstraint\"\n#               }\n#             }\n#           }\n#         }\n#       }\n#     }\n#   }\n# }\n</code></pre> <p>Turn this string into json, with the native Python <code>json</code> module.</p> <pre><code>import json\nfrom maya import cmds\n\ndump = cmds.ragdollDump()\ndump = json.loads(dump)  # From string to dictionary\n\n# The format is internal and yet to be documented, stay tuned\nscene = dump[\"scenes\"][\"0\"]\nrigid = scene[\"entities\"][\"1\"]\nname = rigid[\"components\"][\"NameComponent\"][\"members\"][\"value\"]\nprint(name)\n# rRigid\n</code></pre> <p>Expect the output to grow throughout later releases as more internals get serialised to JSON.</p>"},{"location":"releases/2021.03.04/","title":"Passive to Active Transitions","text":"<p>Small fixes and tweaks, with one pretty cool new feature - the ability to animate the transition between active and passive mode for any rigid!</p> <ul> <li>ADDED Animated Transition Between Passive and Active It's now possible!</li> <li>ADDED More Scene Visualisation You can now visualise the internal rigid bodies at the scene level</li> <li>FIXED More Robust Passive Rigids The start frame now does a better job representing passive rigids</li> <li>FIXED Better Scaled Shape Rendering Shading on scaled shapes now render correctly</li> <li>FIXED Consistent X-axis for Sphere Radius Rather than the average of X and Y</li> </ul> <p></p>"},{"location":"releases/2021.03.04/#transition-between-passive-and-active","title":"Transition Between Passive and Active","text":"<p>Active rigid bodies can now be made passive interactively, and continue to be animated as passive, and then - here's the cool part! - once they transition from passive to active, they inherit the animated velocity you gave it!</p> <p></p> <p>Pay special attention to the fact that we can key the simulated values, such that we can continue animating from exactly where they left off. Making for a clean transition both to and from physics!</p> <p></p>"},{"location":"releases/2021.03.04/#more-scene-visualisation","title":"More Scene Visualisation","text":"<p>The <code>rdScene</code> node has been able to draw velocities, trajectories and constraints to help you track down problems or gain better insight into the inner workings of the solver. Now it can also draw the current position and orientation of rigids, regardless of where your animation controls are.</p> <p>This can be especially helpful if your controls have locked channels, such as translate, as they would be unable to show you the translation of the physical version of the control.</p> <p>Here's how it works.</p> <p></p> <p>See how the box as-seen from the scene falls down, whereas the original box doesn't? Because the translate channels were locked, they weren't able to fully represent the simulation.</p> <p>Here's a more practical example of a tail.</p> <p></p> <p>Notice that because the translate channels of the tail are locked, they remain positioned according to the rig. And the rig has some clever mechanics going on to keep the tail attached to the body even when the hip control moves away.</p> <p>Here's a close-up of that mechanic.</p> <p></p> <p>The solver shows you what is actually going on physically and can help track down controls that misbehave.</p> <p></p>"},{"location":"releases/2021.03.04/#better-scaled-shape-rendering","title":"Better Scaled Shape Rendering","text":"<p>Small, but important. When you scale things, rendering needs to keep up and descale the normals of the geometry.</p> <p></p>"},{"location":"releases/2021.03.11/","title":"Localspace Simulation","text":"<p>Highlight for this release is Local Space Simulation!</p> <ul> <li>ADDED Ragdog Tutorial Learn how to setup a \"ragdog\" from scratch</li> <li>ADDED Big Fish Showcase of the benefit of automated overlapping animation for a fish</li> <li>ADDED Local Space Simulation Robust simulated hierarchy whilst animating</li> <li>FIXED Rotate Order Warning More safeguards against unsupported aspects of Ragdoll</li> <li>FIXED Animated Rigid Attributes Minor bugfix</li> <li>FIXED Pre-Start Frame Pose is now reset prior to hitting the solver start frame</li> <li>FIXED Explosion on Initial State More robust detection of when to actually update the initial state</li> </ul> <p></p> <p>Sunny Side Up</p> <p>Just a wolf, for breakfast.</p> <p></p> <p>Waterproof Fire Fox</p> <p>If you squint, it almost looks like he's underwater!</p> <p></p> <p>Collision Volumes</p> <p>The automatically-generated colliders you get when turning animation NURBS controls dynamic.</p> <p></p> <p></p>"},{"location":"releases/2021.03.11/#ragdog-tutorial","title":"Ragdog Tutorial","text":"<p>That's no typo, this is a Ragdoll-dog! :D Learn about how to achieve the above simulation in this 2-part series on using Dynamic Control.</p> <ul> <li>Fire Wolf Rig</li> </ul> <p></p> <p></p> <p></p>"},{"location":"releases/2021.03.11/#big-fish","title":"Big Fish","text":"<p>Spotted an animation on LinkedIn the other day by Radovan Zivkovic, and wanted to see whether it would work with Ragdoll. Here's about 15 minutes of work from launch of Maya to final playblast.</p> <ul> <li>Reference</li> <li>Sea Beast Maya Rig</li> </ul> <p></p> <p></p>"},{"location":"releases/2021.03.11/#local-space-simulation","title":"Local Space Simulation","text":"<p>TLDR; This will keep simulation of children intact whilst manipulating parents.</p> <p>Up until this release, simulation has taken place in worldspace. The last few releases has tried translating worldspace into localspace to try and mimic that familiar feeling of moving the parent and having children follow.</p> <p>This release moves simulation altogether into local space which means a seamless integration with he parent/child hierarchy that your animation controls are normally in!</p>"},{"location":"releases/2021.03.11/#before","title":"Before","text":"<p>Pay special attention to how you can edit the master control mid-way through a simulation, but then have that change completely ignored as you return to frame 1.</p> <p></p>"},{"location":"releases/2021.03.11/#after","title":"After","text":"<p>Now, with simulation resting in the local space, it behaves as you would expect.</p> <p></p> <p></p>"},{"location":"releases/2021.03.11/#rotate-order-warning","title":"Rotate Order Warning","text":"<p>A while back, support was implemented for a custom <code>rotateOrder</code>, such as <code>ZYX</code> or <code>YXZ</code>. As it turns out, this support was rather incomplete. Solving for a custom rotate order is much more involved than I'd hoped it would be, so for the time being you are advised not to use them.</p> <p>If you do, you may run into issues such as this.</p> <p></p> <p></p>"},{"location":"releases/2021.03.11/#animated-rigid-attributes","title":"Animated Rigid Attributes","text":"<p>The previous release broke your ability to animate anything on a rigid, e.g. <code>rdRigid.linearDamping</code>. That's been all patched up!</p> <p></p>"},{"location":"releases/2021.03.11/#pre-start-frame","title":"Pre-Start Frame","text":"<p>A bug in a prior version caused frames ahead of the start frame to not reset correctly, unless you explicitly visited the start frame. E.g. skipping from frame 100 directly to 1 rather than from 2 to 1 wouldn't look right. Coupled with the next auto-initial-state feature, this could break a pose. This has now been patched up!</p> <p></p> <p></p>"},{"location":"releases/2021.03.11/#explosion-on-initial-state","title":"Explosion on Initial State","text":"<p>Ragdoll could mistakenly treat a broken simulated first frame as the new and correct initial state. Detecting that stuff is hard! Now it's doing a better job, but keep an eye out for when your start pose breaks, that should never happen.</p> <p>Also don't forget that this fancy new shiny feature can be disabled under Ragdoll -&gt; System -&gt; Ragdoll Preferences.</p> <p></p>"},{"location":"releases/2021.03.11/#shear","title":"Shear","text":"<p>The enemy of any animation, shear is scale's ugly brother. Ragdoll now accounts for shear, even though you are strongly advised never to introduce it willingly.</p> <p></p>"},{"location":"releases/2021.03.23/","title":"JSON Export","text":"<p>Highlight for this  release is JSON Export, this one's for you game developers out there!</p> <ul> <li>ADDED JSON Export Run your ragdolls in Unreal, Unity or your own custom game engine</li> <li>ADDED Active Chain Next generation \"Dynamic Control\" with \"chain\"</li> <li>ADDED Dynamic Constraint Attributes Stay focused on attributes that matter</li> <li>ADDED What'Z-Up? Is your up axis-Z? Ragdoll is now down with that.</li> <li>CHANGED Simplified Menu Less noisy, more focused menu</li> <li>CHANGED Dynamic Install Tighter integration into Maya's native Plug-in Manager</li> <li>CHANGED Greater Guide Strength Have simulation follow animation even closelier</li> <li>FIXED Less Crashes Kids, say no to crashes</li> <li>FIXED Custom Rotate Order Now works as expected</li> <li>FIXED Bad Initial State on Load Loading saved physics now works as expected</li> </ul> <p></p> <p>Important!</p> <p>This version won't self-install like the past releases, see Dynamic Install on how you need to load the plug-in via Maya's Plug-in Manager from now on.</p> <p></p> <p>Ragcar</p> <p>It's a ragcar allright. You can tell by how bouncy it is!</p> <p></p> <p>Knocking things around</p> <p>No obstacle is too tall for ragcar.</p> <p></p> <p>A look underneath</p> <p>The parts are all there, it's how it would work in real life if you put an engine in it. :D</p> <p></p> <p>Vehicle model from Mecabricks.</p> <p></p>"},{"location":"releases/2021.03.23/#json-export","title":"JSON Export","text":"<p>In 2021.03.01 we introduced <code>cmds.ragdollDump</code> to get a copy of all rigids in the form of a JSON dictionary.</p> <p>This release includes all initial state for the simulation, such that you can reproduce the results you see in Maya in a game engine, like Unreal, Unity, CryEngine or your own custom game engine. Or why not Houdini, Blender or 3dsMax?</p> <p>This enables you to use Maya as an authoring platform for physics anywhere.</p> <pre><code>from maya import cmds\ndump = cmds.ragdollDump()\n\n# Convert big string to structured dictionary\nimport json\ndump = json.loads(dump)\n\nfor entity, data in dump.items():\n    components = data[\"components\"]\n    name = components[\"NameComponents\"][\"members\"][\"path\"]\n    print(name)\n\n# |root|pelvis|rRigid1\n# |root|pelvis|spine|rRigid2\n# |root|pelvis|spine2|rRigid3\n# ...\n</code></pre> <p>Here's an example of what to expect from the output.</p> <ul> <li><code>output_example.json</code></li> </ul> <pre><code>{\n  \"entities\": {\n    \"10\": {\n      \"components\": {\n        \"NameComponent\": \"upperArm\",\n        \"ColorComponent\": [1.0, 0.0, 0.0],\n        \"GeometryDescriptionComponent\": \"Capsule\",\n        ...\n      }\n    },\n    \"15\": {\n      \"components\": {\n        \"NameComponent\": \"lowerArm\",\n        \"ColorComponent\": [0.0, 1.0, 0.0],\n        \"GeometryDescriptionComponent\": \"Box\",\n        ...\n      }\n  }\n}\n</code></pre> <p>See the new Serialisation documentation for an overview, examples and data reference.</p> <ul> <li>https://learn.ragdolldynamics.com/serialisation</li> </ul> <p></p>"},{"location":"releases/2021.03.23/#dynamic-install","title":"Dynamic Install","text":"<p>Previous releases shipped with a <code>userSetup.py</code> that triggered on launch of Maya. This made it easy to get setup, but made it challenging to uninstall without physically removing files off of the file system (hint: <code>~/Documents/maya/modules/Ragdoll.mod</code>).</p> <p>This release associates install with plug-in load.</p> <p>Install</p> <p></p> <p>Uninstall</p> <p></p> <p></p>"},{"location":"releases/2021.03.23/#active-chain","title":"Active Chain","text":"<p>Dynamic Control has been renamed <code>Active Chain</code>.</p> <p>Turns out, what Dynamic Control was really all about was a generic chain that can also be turned into hierarchies of chains - or \"branches\" - to form a tree. Even a literal one!</p> <p> </p> <p></p>"},{"location":"releases/2021.03.23/#dynamic-constraint-attributes","title":"Dynamic Constraint Attributes","text":"<p>Now whatever attributes are relevant show up in the Channel Box, and stay relevant as you make changes. Similar to how the <code>rdRigid.shapeType</code> attribute updates the <code>shapeExtents</code> and <code>shapeOffset</code> attributes!</p> <p></p> <p></p>"},{"location":"releases/2021.03.23/#whatz-up","title":"What'Z-up?","text":"<p>Ragdoll now understands when the up-axis is Z rather than the default Y.</p> <p></p> <p></p>"},{"location":"releases/2021.03.23/#simplified-menu","title":"Simplified Menu","text":"<p>Items have been re-arranged and grouped together to be easier to find and less cluttered.</p> <p></p> <p></p>"},{"location":"releases/2021.03.23/#greater-guide-strength","title":"Greater Guide Strength","text":"<p>The solver <code>Iterations</code> determines how high your <code>Guide Strength</code> attribute can go. Per default, <code>Iterations</code> was set to <code>1</code> which enabled strengths between <code>0-5</code> or so until their effect dimished.</p> <p>This release increases this default value to <code>4</code> for ranges between <code>0-100</code>, which means \"incredibly high!\". The change comes at a minor performance impact - estimated between 1-5% - so if you find the need to optimise, lower this value back to 2 or 1.</p> <p>Hint</p> <p>Bear in mind that the number of iterations are spread across all rigid in your scene. Meaning twice the number of rigids would half the amount of iterations dedicated to each one.</p>"},{"location":"releases/2021.03.23/#before","title":"Before","text":""},{"location":"releases/2021.03.23/#after","title":"After","text":""},{"location":"releases/2021.03.23/#crash-on-cleanup","title":"Crash on Cleanup","text":"<p>In rare cases, Ragdoll could crash Maya due to accessing memory it had no business accessing. Those have now been patched up and refactored for a more stable, crash-free experience!</p> <p></p> <p></p>"},{"location":"releases/2021.03.23/#bad-initial-state-on-load","title":"Bad Initial State on Load","text":"<p>In rare cases, opening a scene could lead to some controls being badly positioned. This could happen if the control you made dynamic was parented to a group with no values. That made the parent and local matrices cancel out, producing an identity matrix. Maya doesn't normally save attributes that are equal to their default values, and this includes matrices whose defaults are the identity matrix.</p> <p>This has now been fixed.</p> <p></p>"},{"location":"releases/2021.03.23/#rotate-order-improvement","title":"Rotate Order Improvement","text":"<p>In previous releases, any rotation order other than XYZ (the default) would make your rotations all whack. Ragdoll didn't know how to translate physics into any order other than XYZ, so it would put them in the wrong place.</p> <p>In the last release, I added a warning for that and in this release I've lifted that warning somewhat. Most rotation orders works well, but I have spotted rare instances of one axis flipping.</p> <p>Here's the problem.</p> <p></p> <p>See how arms and torso flips? It tends to happen around the 90 and 180 degree values, values below that normally look fine. This will be fixed in a future release, one way or another!</p>"},{"location":"releases/2021.03.25/","title":"Maya 2022","text":"<p>Highlight for this release is support for Maya 2022!</p> <ul> <li>ADDED Support for Maya 2022 It's out, and Ragdoll is game</li> <li>ADDED Ragdoll on GitHub Browse the source, contribute your own feaures and fixes</li> <li>FIXED Backwards Compatibility Last release broke our precious example scenes!</li> <li>FIXED Accurate Gravity The gravity indicator on the scene is now always truthful</li> <li>FIXED Ragdoll Explorer Visually browse the output of <code>cmds.ragdollDump()</code></li> </ul> <p></p>"},{"location":"releases/2021.03.25/#support-for-maya-2022","title":"Support for Maya 2022","text":"<p>Ready when you are, Python 3 and all!</p> <p></p> <p></p>"},{"location":"releases/2021.03.25/#ragdoll-on-github","title":"Ragdoll on GitHub","text":"<p>Ragdoll is a high-performance C++ plug-in with a flexible Python API.</p> <p>The API is what powers all user interfaces and all menu items, including the tools themselves. It's what generates Ragdoll nodes and hooks them up to other nodes, translating your selection into physics.</p> <p></p> <p>This API is now available on GitHub and will soon open for contributions too!</p> <ul> <li>https://github.com/mottosso/ragdoll</li> </ul> <p></p>"},{"location":"releases/2021.03.25/#backwards-compatibility","title":"Backwards Compatibility","text":"<p>What does breaking backwards compatibility of a dynamics solver look like?</p> <p>Original</p> <p></p> <p>Last Release</p> <p></p> <p>He's the same person! Only the circumstances have changed. :D This has now been fixed, and all previous examples now open and run as expected!</p> <p>Still pretty cool though I thought, that even though it's broken it still gives you an interesting result. Look at how he initially falls over, it looks like he's attempting to hold onto the seat for balance, and also takes a step back before landing on his butt. :D</p> <p></p>"},{"location":"releases/2021.03.25/#accurate-gravity","title":"Accurate Gravity","text":"<p>The indicator used to face in the Y-axis of wherever the node was facing. That wasn't true. It's now accurate no matter how you spin it around, including a potential Z-up axis!</p> <p>Before</p> <p></p> <p>After</p> <p></p> <p></p>"},{"location":"releases/2021.03.25/#ragdoll-explorer","title":"Ragdoll Explorer","text":"<p>Added an early version of a visual interface for the <code>cmds.ragdollDump()</code> command, something to inspect the internals of the solver. Mostly intended for game developers but also advanced users and techincal directors. Expect an Outliner-like appearance and use for this explorer, more to come!</p> <p></p> <p></p>"},{"location":"releases/2021.04.11/","title":"JSON Import","text":"<p>Highlight for this release is import of physics from one character to another!</p> <ul> <li>ADDED Import Animator-friendly export/import workflow for physics</li> <li>ADDED Edit Shape Edit shapes using normal Maya manipulators</li> <li>ADDED Logging Level Tune how chatty Ragdoll is</li> <li>IMPROVED Ragdoll Stability Rock-solid undo support, go nuts!</li> <li>IMPROVED Maya 2022 Stability Steer clear</li> <li>IMPROVED Explorer Next iteration of the Ragdoll Explorer</li> <li>CHANGED Proxy Attributes A small sacrifice for stability</li> <li>CHANGED Python API Consistency More to come</li> </ul> <p></p> <p>Head's up Game Developers</p> <p><code>NameComponent</code> was changed, and <code>entity</code> values are now a fully-fledged type.</p> <p>See Backwards Incompatibility for details.</p> <p></p> <p>Import onto Selected Character</p> <p></p> <p>Import onto the Ragcar</p> <p></p> <p>Import limbs of Tiger</p> <p></p> <p></p>"},{"location":"releases/2021.04.11/#import","title":"Import","text":"<p>Animators can now setup physics one character, export it, and then import onto another.</p> <p>The usecase is having spent time setting up a perfect ragdoll and then wanting to reuse this setup across multiple scenes, on multiple instances of the same referenced character, or on characters with similar naming scheme and anatomy. It can also be used to import parts of a character or individual objects.</p> <p>Demo</p> <p>Here's an 18 second run-down of the complete workflow, from authoring to import.</p> <p></p> <p></p>"},{"location":"releases/2021.04.11/#features","title":"Features","text":"<p>Anything you can apply physics to can be exported.</p> <p>The nodes onto which physics is imported..</p> <ul> <li>\u2714\ufe0f Can have a different namespace</li> <li>\u2714\ufe0f Can have a different naming convention</li> <li>\u2714\ufe0f Can have a different pose</li> <li>\u2714\ufe0f Can have a different scale</li> <li>\u2714\ufe0f Can be animated</li> <li>\u2714\ufe0f Can be referenced</li> <li>\u2714\ufe0f Can be imported in pieces, based on what is currently selected</li> </ul> <p>It will remember..</p> <ul> <li>\u2714\ufe0f All edited attributes, like <code>Guide Strength</code></li> <li>\u2714\ufe0f All edited constraints, like their limits and frames</li> </ul> <p>It will not remember..</p> <ul> <li>\u274c The convex hulls</li> <li>\u274c The original root of your chains</li> </ul> About those 'Convex Hulls'.. <p>Convex hulls, those triangulated versions of your Maya shapes - the <code>Mesh</code> shape type - are re-generated onto whatever character you import onto. This is probably what you want, and enables you to apply physics onto characters with different geometry from when you originally authored the physics. Although sometimes it's not, which is why this we be augmented in a future release.</p> About the 'Original Root'.. <p>The root in any chain is the first in your selection when creating the chain. If you build a network of chains - a \"tree\" - which is common for any character of more than 1 limb, the exported file will not remember which the original root was. It will figure out new roots procedurally based on their parent/child relationship which may or may not be the same as your original. For importing a full character, this makes no difference. Only for the advanced case of exporting a full character but then wanting to apply only the arm or leg of that character onto another character makes this problematic. This will be addressed in a future release.</p> <p>And that's about it! It doesn't even have to be a \"character\", any combination of Maya nodes you can apply physics to can have their physics exported. Like a (rag)car, or just a (rag)box.</p> <p></p>"},{"location":"releases/2021.04.11/#user-interface","title":"User Interface","text":"<p>In addition to import everything found in an exported file, there's a UI for more control.</p> <p></p> <p>The UI resembles native Maya and Ragdoll option dialogs, with two interesting bits.</p> <p></p> <p></p>"},{"location":"releases/2021.04.11/#1-file-browser","title":"1. File Browser","text":"<p>The top part displays other Ragdoll scene (<code>.rag</code>) files in the same directory as the selected file, along with the thumbnail stored during the time of export. The thumbnail currently isn't visible during export, it is captured from the currently active viewport. An Export UI with thumbnail preview (and more!) will be added in a future release.</p> <p></p> <p></p>"},{"location":"releases/2021.04.11/#2-content-preview","title":"2. Content Preview","text":"<p>This sections shows you the contents of the physics scene, ahead of actually importing it.</p> <p>It will visualise a number of things.</p> <ol> <li>Which Maya nodes will be \"physicalised\"?</li> <li>Which nodes present during export are not present in the currently opened scene?</li> <li>What was the original path of a node during export?</li> <li>What is the destination path of the node being imported?</li> <li>Is there a destination node?</li> <li>Is the destination already physicalised?</li> <li>What was the original node icon, e.g. <code>nurbsCurve</code> or <code>mesh</code>?</li> <li>What is the <code>Shape Type</code> of the exported rigid, e.g <code>Capsule</code>?</li> </ol> <p></p> <p></p>"},{"location":"releases/2021.04.11/#introduction","title":"Introduction","text":"<p>Did you see Snyder's Justice League? In it, they introduce and explain the \"mother box\" and how it is capable of turning the dust of a burnt house back into a house.</p> <p>This <code>Import</code> feature is the Mother Box of Ragdoll.</p> <p>The export format is identical to what game developers use to author physics in Maya and import it into their game engine. It contains all data managed by Ragdoll in full detail. Enough detail to reverse-engineer it back into a Maya scene, which is exactly what's going on here.</p> <p></p> <p>Example Files</p> <ul> <li><code>mytiger.rag</code></li> <li><code>mycharacter.rag</code></li> <li><code>ragcar.rag</code></li> </ul> <p></p>"},{"location":"releases/2021.04.11/#thumbnail","title":"Thumbnail","text":"<p>Each export captures the currently active 3d viewport for use as a thumbnail. So, whenever you export, remember to smile and wave! :D</p> <p></p> <p></p>"},{"location":"releases/2021.04.11/#context-sensitive","title":"Context Sensitive","text":"<p>The visualisations will update as you select different nodes and edit the various options in the UI.</p> <p>To illustrate this, let's import onto the same scene we exported.</p> <p>Export</p> <p>Only one character is physicalised and exported.</p> <p></p> <p>Import</p> <p>Notice that importing is not possible, since the character is already physicalised. Unless we replace the namespace, by selecting another character.</p> <p></p> <p></p>"},{"location":"releases/2021.04.11/#use-selection","title":"Use Selection","text":"<p>Import onto selected nodes with <code>Use Selection</code> toggled (it's the default).</p> <p></p> <p></p>"},{"location":"releases/2021.04.11/#search-and-replace","title":"Search and Replace","text":"<p>Every node is stored along with its full path, such as..</p> <pre><code>|root_grp|spine_grp|spine_ctrl\n</code></pre> <p>And in most cases can get quite long, with one or more namespaces and tens to hundreds of levels deep in hierarchy.</p> <pre><code>|_:Group|_:Main|_:DeformationSystem|_:Root_M|_:RootPart1_M|_:RootPart2_M|_:Spine1_M|_:Spine1Part1_M|_:Spine1Part2_M|_:Chest_M|_:Scapula_L|_:Shoulder_L|_:ShoulderPart1_L|_:ShoulderPart2_L|_:Elbow_L|_:ElbowPart1_L|_:ElbowPart2_L|_:Wrist_L|_:IndexFinger1_L\n</code></pre> <p>Here, the namespace is simply <code>_:</code></p> <p>The <code>Search and Replace</code> boxes of the UI can be used to replace parts of each path, to try and map the original path to whatever path is currently available in the scene.</p> <p></p> <p></p>"},{"location":"releases/2021.04.11/#auto-namespace","title":"Auto Namespace","text":"<p>One challenge with export/import it remapping names from the original scene onto your new scene. Ragdoll solves the typical case of only the namespace being different with \"Auto Namespace\".</p> <p></p> <p>\"Auto Namespace\" will replace any namespace in the original file with whatever namespace is currently selected. Neat! If there are multiple namespaces, it'll use the last namespace. Let me know how you find that, there's room left to explore here. Most often, you only ever have a single namespace, but Maya does allow you to tie yourself into a knot if you really wanted to.</p> <p></p>"},{"location":"releases/2021.04.11/#auto-scene","title":"Auto Scene","text":"<p>Locate and use the original physics scene from the original file, so as to preserve your multi-scene setups.</p> <p>For example, if your one character has 3 physics scenes - one for the right arm, one for the left and a single one for both legs - then \"Auto Scene\" will preserve these scenes for you.</p> <p>Performance Tip</p> <p>Using more than one scene can improve performance significantly, as Ragdoll will parallelise each invidual scene. The caveat is that rigids in different scenes cannot interact with each other.</p> <p></p>"},{"location":"releases/2021.04.11/#ragdoll-clean","title":"Ragdoll Clean","text":"<p>Here's a quick way you can use this feature to \"clean\" a physics scene.</p> <ol> <li>Export</li> <li>Delete All</li> <li>Import</li> </ol> <p>The resulting scene will be \"clean\" in that it will have been broken down into its componens and reassembled again, not taking into account anything Ragdoll doesn't know about.</p> <p></p> <p>(I may just add a menu item for this, called <code>Clean</code> to do this in one go :)</p> <p></p>"},{"location":"releases/2021.04.11/#roadmap","title":"Roadmap","text":"<p>A few things became apparent as I rounded off this feature</p> <ol> <li>Export UI -  You'll want control over what that thumbnail looks like, currently it'll take a snapshot but not show you what that snapshot looks like until you look at it from the importer</li> <li>Remember \"root\" of each chain - The importer will recognise what is a Rigid and what is a Chain, but it's having trouble distinguishing the root of each chain. For example, if you made the spine into a chain, followed by the two arms, odds are it'll think the hip leading out to the hand is one chain, and torso to head being another chain, and so on. This isn't an issue when importing a full character, but it'll keep you from being able to import only one of those chains. E.g. just the arm.</li> </ol> <p></p>"},{"location":"releases/2021.04.11/#import-python-api","title":"Import Python API","text":"<p>Anything the UI can do can be done via Python, using the new <code>dump.Loader</code> object.</p> <pre><code>from ragdoll import dump\nloader = dump.Loader()\nloader.read(r\"c:\\path\\to\\myRagdoll.rag\")\n\n# Search and replace these terms from the full node path\n# E.g. |root_grp|arm_left -&gt; |root_grp|arm_right\nloader.set_replace((\n    (\"_left\", \"_right\"),\n    (\"_ik\", \"_fk\"),\n))\n\n# An automatic method of search-and-replace, that replaces\n# any namespaces found in the file with this.\n# E.g. |char1:root_grp -&gt; |char2:root_grp\nloader.set_namespace(\"char2:\")\n\n# Limit imported nodes to those with an absolute path \n# starting with *any* of these\nloader.set_roots((\n    \"|char1:root_grp\",\n    \"|char2:root_grp\"\n))\n\n# Deconstruct the provided `.rag` file\n# (This is what is visualised in the UI)\n# (The exact layout of this data may change)\nanalysis = loader.analyse()\nassert isinstance(analysis, dict)\n\n# Print a brief human-readable summary of the current analysis\nloader.report()\n</code></pre> <p>Heads up</p> <p>Consider this a version 0.1 of the API, it will likely change in the future.</p> <p></p>"},{"location":"releases/2021.04.11/#ragdoll-stability","title":"Ragdoll Stability","text":"<p>Implementing import put a lot of strain on Ragdoll.</p> <p>Whereas before, authoring physics was a matter of calling one command at a time, playing around with the result, calling another. Maybe undoing every so often.</p> <p>Import on the other hand calls tens to hundreds of commands at once, undoing them en masse, redoing them en masse. It exposed a ton of flaws in the system that had gone unnoticed in all but the rarest of occasions. Crashes, a ton of them. The worst kind, the kind that doesn't tell you anyhing about why it crashes.</p> <p></p> <p>The above an example of:</p> <ol> <li>Authoring lots of physics in different ways</li> <li>Undoing all of it</li> <li>Redoing all of it</li> <li>With no problem!</li> </ol> <p>I'm happy to say these have all been resolved, and the automated test-suite has grown 10x since the last release. Every command is tested, and tested again with undo, and again with redoing an undone redo. It is rock solid, and fast.</p> <p>You can now undo any command as-one, any number of times, redo it any number of times, undo your redo any number of times. Ragdoll will not be the cause of any crashes.</p> <p></p>"},{"location":"releases/2021.04.11/#maya-2022-stability","title":"Maya 2022 Stability","text":"<p>Maya 2022 in its current state has proven incapable of reliably supporting Ragdoll.</p> <ul> <li>https://forums.autodesk.com/t5/maya-programming/maya-2022-dagitem-was-nullptr/td-p/10217589</li> </ul> <p>Maya 2022 may crash with Ragdoll</p> <p>That's right. Maya 2022 isn't quite baked yet, and needs a Service Pack. Until then, Ragdoll will run reliably so long as you don't delete anything, or try and open a new scene.</p> <p>In addition to that, the multiplier nodes didn't quite work with Maya 2022, or more specifically with Python 3.</p> <pre><code>from ragdoll import interactive as ri\nri.multiply_rigids()\n# Error: 'filter' object is not subscriptable\n# Traceback (most recent call last):\n#   File \"&lt;maya console&gt;\", line 2, in &lt;module&gt;\n#   File \"C:\\Users\\marcus\\Documents\\maya\\modules\\Ragdoll\\python\\ragdoll\\interactive.py\", line 2112, in multiply_rigids\n#     root = rigids[0].parent()\n# TypeError: 'filter' object is not subscriptable #\n</code></pre> <p>There were also crashes happening on deleting rigid bodies from your scene, these got swept away alongside a number of other fixes to the handling of nodes.</p> <p>So one step forward, one step back. :)</p> <p></p>"},{"location":"releases/2021.04.11/#edit-shape","title":"Edit Shape","text":"<p>A new menu item got added for manipulating shapes with a native Maya transform, as an alternative to fiddling with numbers in the Channel Box.</p> <p></p> <p></p>"},{"location":"releases/2021.04.11/#proxy-attributes","title":"Proxy Attributes","text":"<p>In Maya 2018 and 2020, the attributes added to your original animation controls that mirror those of Ragdoll were \"proxy attributes\". That is, they could be edited from either their original attribute, or the one connected to by your control.</p> <p>That's really convenient.</p> <p>Turns out, it is also really unstable. Most of the crashes happening so far, especially on deleting physics or starting a new scene, has come from proxy attributes messing everything up. It should't be surprising, even Maya struggles with them.</p> <pre><code>node = cmds.createNode(\"transform\")\nshape = cmds.createNode(\"nurbsCurve\", parent=node)\ncmds.addAttr(node, ln=\"proxyVisibility\", proxy=shape + \".visibility\")\nassert cmds.objExists(node + \".proxyVisibility\")\nassert cmds.getAttr(node + \".proxyVisibility\") == 1\n\n# What should happen to the proxy attribute? :O\ncmds.delete(shape)\n\ncmds.getAttr(node + \".proxyVisibility\")\n# RuntimeError: The value for the attribute could not be retrieved. # \n</code></pre> <p>The same thing applies with access from the API. It just doesn't know what's going on. If we're lucky - which we have been so far - it'll just fail and tell you about it. Other times it'll fail and take Maya down with it. That's just bad.</p> <p>In Maya 2019, the problem was so severe that proxy attributes were simply not used. With this release, no proxy attributes are used.</p> <p>I hope to reintroduce them at a later date, once I discover is a safe method (read: workaround) to using them.</p> <p></p>"},{"location":"releases/2021.04.11/#python-api-consistency","title":"Python API Consistency","text":"<p>The good news is, the Python API is maturing. The bad news is, this release introduces backwards incompatible changes.</p> <pre><code>from maya import cmds\nfrom ragdoll import api\n\ncube, _ = cmds.polyCube()\ncmds.move(0, 5, 0)\ncmds.rotate(0, 45, 45)\nscene = api.createScene()\nrigid = api.createRigid(cube)\n</code></pre> <p>So far so good.</p> <pre><code># Before\napi.socketConstraint(parent, child, maintain_offset=False)\n\n# After\napi.socketConstraint(parent, child, opts={\"maintainOffset\": False})\n</code></pre> <p>Here's the change. These behavior-like arguments have been moved into an <code>opts={}</code> argument, and is now consistent across any commands that take \"options\". It's to faciliate a large number of options, both from the UI and scripting and enhance compatibility over time; with a dictionary, you can test for availability of arguments at run-time, as opposed to suffer the consequences of not being able to call an update function.</p> <p>I'm still exploring ways of getting more options into commands, without polluting the argument signature, without changing their order when an argument is deprecated, or changing an argument name when jargon inevitably changes. Using a dictionary for options-like arguments enables us to pass arbitrary sized options to functions, they can also be passed to functions that don't necessarily need all contained options, meaning you can establish a single options dictionary up-front and pass that to all relevant functions.</p> <p>It's too soon to tell whether the cons of this approach outweighs the pros. This is one reason for the API still going through changes.</p> <p>The non-optional arguments are those that are never intended to change, like the <code>createRigid(node)</code> argument. Every rigid needs something to make rigid. (Or so you'd think, as you can now also create a rigid from a new empty transform).</p> <p>So, the API has changed and will continue changing for a while longer.</p> <p>Node/Attribute format</p> <p>The Ragdoll scene format is stable and has been for months. It will remain compatible with future versions of Ragdoll, which means anything you build today (or months ago) will continue to work identically.</p> <p>The Python API on the other hand is not yet refined and is still changing. So when you build tools ontop of Ragdoll, keep in mind that nodes, their attributes and their connections are stable, but the means of creating those connections are not. So if you need stability today, look at what nodes and connections are made by the API, and do it yourself.</p> <p></p>"},{"location":"releases/2021.04.11/#ragdoll-explorer","title":"Ragdoll Explorer","text":"<p>For developers</p> <p>Explorer has gotten an update, inching its way towards Outliner-like behavior and feel. Eventually maybe even an integration with the Outliner, similar to how USD slots into Maya 2022. That's quite neat!</p> <p></p> <p></p>"},{"location":"releases/2021.04.11/#logging-level","title":"Logging Level","text":"<p>You can now tune the way Ragdoll communicates with you.</p> <ul> <li><code>Off</code> means it won't tell you anything, not even warnings</li> <li><code>Default</code> is what you've gotten used to so far</li> <li><code>Less</code> only shows you important messages that require you to take action</li> <li><code>More</code> is the full monty, performance metrics, detailed messages, you name it</li> </ul> Programmer Jargon <p>These are animator-friendly jargon for the native <code>logging.INFO</code> and <code>logging.WARNING</code> levels. \"Off\" means <code>logging.CRITICAL</code> since Ragdoll does not emit any critical messages.</p> <p></p> <p></p>"},{"location":"releases/2021.04.11/#developer-updates","title":"Developer Updates","text":"<p>A few things has been improved for those using Ragdoll as an authoring platform for other software like Unreal and general game engines.</p> <p></p>"},{"location":"releases/2021.04.11/#new-components","title":"New Components","text":"<p>The export format has been graced with new components to accommodate for the import feature. As the name suggests, these are stricly related to UI and aren't required for reproducing the physics in another application or engine.</p> <p>They are meant to cover user elements in Maya such that they can be accurately reproduced on re-import back into Maya.</p> <p>New Components</p> <ul> <li><code>RigidUIComponent</code></li> <li><code>ConstraintUIComponent</code></li> <li><code>LimitUIComponent</code></li> <li><code>DriveUIComponent</code></li> <li><code>RigidMultiplierUIComponent</code></li> <li><code>ConstraintMultiplierUIComponent</code></li> </ul> <p>Here's what the new components may look like in your exported file.</p> <pre><code>{\n    \"type\": \"RigidUIComponent\",\n    \"members\": {\n        \"shaded\": false,\n        \"airDensity\": 1.0,\n        \"shapeIcon\": \"transform\",\n        \"multiplierEntity\": {\n            \"type\": \"Entity\",\n            \"value\": 0\n        }\n    }\n},\n{\n    \"type\": \"ConstraintUIComponent\",\n    \"members\": {\n        \"multiplierEntity\": {\n            \"type\": \"Entity\",\n            \"value\": 0\n        },\n        \"childIndex\": 2\n  }\n},\n    \"type\": \"LimitUIComponent\",\n    \"members\": {\n        \"strength\": 1.0,\n        \"angularStiffness\": 1000000.0,\n        \"angularDamping\": 10000.0,\n        \"linearStiffness\": 1000000.0,\n        \"linearDamping\": 10000.0\n  }\n},\n    \"type\": \"DriveUIComponent\",\n    \"members\": {\n        \"strength\": 0.5,\n        \"angularStiffness\": 10000.0,\n        \"angularDamping\": 1000.0,\n        \"linearStiffness\": 0.0,\n        \"linearDamping\": 0.0\n  }\n}\n</code></pre> <p></p> <p>There's also an added section for \"ui\" related data, most interestingly a base64-encoded QPixmap of a <code>thumbnail</code>.</p> <pre><code>    \"ui\": {\n        \"description\": \"\",\n        \"filename\": \"C:/scenes/demo/advancedskeleton5.rag\",\n        \"thumbnail\": \"iVBORw0KGgoAAAAN ... lots more characters ...\"\n    }\n</code></pre> <p>That can be converted like this.</p> <pre><code>from ragdoll import ui\nqpixmap = ui.base64_to_pixmap(data[\"ui\"][\"thumbnail\"])\n</code></pre> <p></p>"},{"location":"releases/2021.04.11/#backwards-incompatibility","title":"Backwards Incompatibility","text":"<p>The export format has changed slightly, here's what you need to know.</p> <ol> <li><code>NameComponent.path</code> was changed from the full path + Ragdoll node to just full path.</li> <li>Entity values are now types instead of plain integers</li> </ol> <p>Example</p> <pre><code># Before\n|root_grp|spine1_ctrl|upperArm_ctrl|rRigid3\n\n# After\n|root_grp|spine1_ctrl|upperArm_ctrl\n</code></pre> <p>Some values were entities themselves, but there wasn't any way of knowing unless you explicitly new that <code>JointComponent.parent</code> is in fact an entity. This has now been addressed, and all entities now carry a <code>[\"type\"]</code> signature.</p> <pre><code># Before\n{\n    \"type\": \"JointComponent\",\n    \"members\": {\n        \"disableCollision\": true,\n        \"parent\": 16\n        \"child\": 15\n    }\n}\n\n# After\n{\n    \"type\": \"JointComponent\",\n    \"members\": {\n        \"disableCollision\": True,\n        \"parent\": {\n            \"type\": \"Entity\",\n            \"value\": 16\n        },\n        \"child\": {\n            \"type\": \"Entity\",\n            \"value\": 15\n        }\n    }\n}\n</code></pre>"},{"location":"releases/2021.04.23/","title":"No Limits and Improved Performance","text":"<p>Highlight for this release is No Limits and Greater Performance!</p> <ul> <li>ADDED No Limits No rig is now too complex for Ragdoll!</li> <li>ADDED 30% Greater Performance You're welcome!</li> <li>ADDED Offline Activation For the poor souls without an internet connection</li> <li>ADDED Auto-cleanup Shape and Constraint editors now vanish alongside the rest of physics</li> <li>ADDED Return To Start More intuitive creation of new rigid bodies</li> <li>ADDED Cycle Protection Avoid running into cycle warnings with this early-warning mechanism</li> <li>ADDED Hard Pin Tell a rigid body exactly where to be in worldspace, no exceptions</li> <li>ADDED Soft Pin Guide a rigid body towards a worldspace position and orientation</li> <li>ADDED Animation Constraint Convert translate/rotate to a guide constraint</li> <li>ADDED Character Multiplier Characters now get a default multiplier</li> <li>IMPROVED Simulated Attribute Active Chains and Trees are now more animator-friendly</li> <li>FIXED Import Bugs Ironed out a few quirks with the new import feature</li> <li>FIXED User Attributes Names and default values of user attributes wasn't quite up to the task</li> <li>FIXED Looped Playback Bug This could under rare circumstances look off</li> <li>FIXED Qt Bug In rare cases this could pollute your Script Editor whenever selection changed</li> <li>FIXED Low-DPI Cosmetics More eye-candy for those still using a low resolution display</li> <li>FIXED Z-up Worldspace Guides Worldspace guides now play nice with a re-oriented world</li> <li>FIXED Tree Multipliers Complex active chains weren't multiplied correctly</li> </ul> <p></p> <p>10 Second Ragdoll</p> <p>Here's the absolute quickest way to turn a fresh mesh into a full ragdoll.</p> <p></p> <p>And here's a more practical example of using this feature to clean up a bad mocap clip.</p> <p></p> <p> </p> <p>It'll endure changes to the environment too, with little to no modification of the physics settings or the original animation.</p> <p></p> <p></p>"},{"location":"releases/2021.04.23/#no-more-limits","title":"No More Limits!","text":"<p>That's right!</p> <p>It used to be the case that if your character had a non-default <code>Rotate Order</code>, or a tweaked <code>Rotate Pivot</code> or maybe made use of the handy <code>Rotate Axis</code> or the joints you were using had a non-zero <code>Joint Orient</code>, then you were out of luck! Ragdoll just couldn't handle those. It would aggressively reset those to their defaults, or flat-out refuse to work.</p> <p>This release adds support for these missing members, which just so happens to be the very last major limitations of Ragdoll when used with your everyday character rigs!</p> <ul> <li>\u2714\ufe0f Rotate Pivot</li> <li>\u2714\ufe0f Rotate Axis</li> <li>\u2714\ufe0f Rotate Order</li> <li>\u2714\ufe0f Joint Orient</li> </ul> <p>From now on, if it doesn't work with your rig, that's a bug (let me know!).</p> <p></p>"},{"location":"releases/2021.04.23/#rotate-pivot","title":"Rotate Pivot","text":"<p>This release introduces support for both the <code>.rotatePivot</code> and <code>rotatePivotTranslate</code> attributes, letting you do things like..</p> <p></p> <p>I've also added an option to actually use the rotate pivot (for greater good?) such that you can do this.</p> <p></p> <p></p> <p></p>"},{"location":"releases/2021.04.23/#rotate-axis","title":"Rotate Axis","text":"<p>The advanced rigger will know of his lesser-known feature of Maya transform nodes, with the ability to modify the axis around which the <code>Rotate XYZ</code> channels operate.</p> <p></p> <p></p>"},{"location":"releases/2021.04.23/#rotate-order","title":"Rotate Order","text":"<p>Finally cracked this one, it has been far too long and is a far-too used feature of Maya transform nodes to not support. But it's done! You should now be able to pick any rotate order and experience no flipping or issue of any kind. Don't even bother getting in touch if you do, because I will not believe you. xD</p> <p>This tiger (courtesy of www.cgspectrum.com) has a different rotate order on nearly every control.</p> <p>Before</p> <p></p> <p>After</p> <p></p> <p>Hold on a second!</p> <p>That final flip of the spine is coming from the rig itself, the joints driven by the controllers we're simulating. Ragdoll isn't the only one having issues with flipping. :)</p> <p></p>"},{"location":"releases/2021.04.23/#joint-orient","title":"Joint Orient","text":"<p>When simulating joints, it can be important to retain the original <code>jointOrient</code> values. Especially if those joints are later used for IK or if you want or need to zero out those rotate values. But it is perhaps most important for an already-animated skeleton, like what you get out of motion capture.</p> <p>Some motion capture libraries, like Rokoku, do a good job not having any <code>jointOrient</code> in which case they would already work well with Ragdoll. But for animated skeletons with a non-default <code>jointOrient</code> you would have been out of luck..</p> <p>Until now!</p> <p></p> <p></p>"},{"location":"releases/2021.04.23/#30-greater-performance","title":"30% Greater Performance","text":"<p>Ragdoll used to be really really fast, and is now really really really fast!</p> <p>Rendering is one of two areas where Ragdoll spends time computing (the other being simulating), and rendering performance has been improved by 400%, making Ragdoll 30% faster overall!</p> <p></p> <p>Here you can see the improvement up-close, notice how much time was spent simulating versus rendering each frame in the previous version; almost half the time was spent just rendering!</p> <p></p> <p>And if you're wondering...</p> <p>Ok, but what features did you remove?</p> <p>On the contrary! Rendering now includes..</p> <ul> <li>\u2714\ufe0f Specular</li> <li>\u2714\ufe0f Shadows</li> <li>\u2714\ufe0f Ambient Occlusion</li> <li>\u2714\ufe0f Depth of Field</li> <li>\u2714\ufe0f With more to come!</li> </ul> <p></p> <p>Even More Performance?</p> <p>You'll notice that the rendering square isn't entirely gone.</p> <p>If 4 ms just to render is too much to ask, you'll get even more of a performance jolt by simply hiding anything Ragdoll related, in particular the <code>rdRigid</code> and <code>rdConstraint</code> nodes. The simulated result is independent of whether or not it is visible in the viewport.</p> <p>If you are a rigger, this can be handy for your animators once you've finished setting things up, as they may not benefit from seeing these things anyway and could use all of the performance you can give.</p> <p></p>"},{"location":"releases/2021.04.23/#simulated-attribute","title":"Simulated Attribute","text":"<p>Whenever you make a new chain, an attribute is created on the root of that chain to control whether or not the chain should be <code>Simulated</code> or animated.</p> <p>With this release, <code>Simulated = Off</code> means:</p> <ul> <li>\u2714\ufe0f Disabled Solver - meaning no more warnings on skipping frames!</li> <li>\u2714\ufe0f Hidden Drawing of Physics - For a less distracting animation experience</li> </ul> <p></p> <p></p>"},{"location":"releases/2021.04.23/#return-to-start","title":"Return To Start","text":"<p>Additions to the physics solver can only happen on the start frame, and if you in previous version created anything on any other frame Ragdoll would yell at you.</p> <p>This release aids in this process, in that rather then telling you you are wrong, it helps you make it right by automatically returning to the start frame when necessary.</p> <p></p> <p></p>"},{"location":"releases/2021.04.23/#cycle-protection","title":"Cycle Protection","text":"<p>Cycle warnings are generally bad but especially bad for Ragdoll. Understanding when they happen and where they come from can be difficult, especially in complex setups.</p> <p>Ragdoll now includes Cycle Protection to help you spot potential cycles before they happen!</p> <p></p> <p>Notice how making a passive rigid here would have resulted in it becoming a child of an otherwise active hierarchy. That would have been bad!</p>"},{"location":"releases/2021.04.23/#protected-commands","title":"Protected Commands","text":"<p>These commands will try and protect your from cycles.</p> <ul> <li>\u2714\ufe0f Active Rigid</li> <li>\u2714\ufe0f Active Chain</li> <li>\u2714\ufe0f Convert Rigid</li> </ul> <p>All other commands is already safe to use and shouldn't cause any cycles.</p>"},{"location":"releases/2021.04.23/#faq","title":"FAQ","text":"<p>These are some of the things you might want to learn more about.</p> How does it work? <p>Whenever a new Passive Rigid or Active Chain (with passive root) is being created, Ragdoll is asked to evaluate the world transformation of the node you are attempting to make dynamic. The solver should not be bothered to simulate anything during this encounter, because if it did then that would mean a cycle is about to happen.</p> <p>Why?</p> <p>Because passive rigids pass data into the solver. Namely, the position and orientation of the node you are attempting to turn into a passive rigid. It cannot both pass and receive data. If it is to receive translate/rotate from the solver, then that's an active rigid.</p> Is it accurate? <p>Very.</p> <p>Character rigs can get very complex; how can Ragdoll distinguish between an actual parent being active, and a node acting like a parent via something like Maya's Parent Constraints (i.e. a \"broken rig\")?</p> <p>The answer is that the feature builds on Maya's own evaluation mechanism to figure out whether a node is dependent on the solver or not. The mechanism is surprisingly simple.</p> <pre><code>def is_dynamic(transform, scene):\n    \"\"\"Does `transform` in any way affect `scene`?\"\"\"\n    scene[\"clean\"] = True\n\n    # Pull, but do not bother actually serialising it\n    transform[\"worldMatrix\"].pull()\n\n    return not scene[\"clean\"].read()\n</code></pre> <p>By pulling on <code>worldMatrix</code> we ensure all hierarchy and constraints is taken into account, and by not actually retrieving value we limit the computational cost to dirty propagation only - as opposed to actually reading and serialising the 16 values that make up the matrix.</p> Can it be disabled? <p>Yes.</p> <p>The protection is only happening when interacting with Ragdoll via the UI menu items. The API remains unaffected and there is an option in the Preferences to disable it in the UI as well.</p> <p></p> <p></p>"},{"location":"releases/2021.04.23/#new-constraints","title":"New Constraints","text":"<p>Have more fun with more control. \ud83d\ude18</p> <p></p> <p>These were previously available under a different names and less intuitive usage</p> <p></p>"},{"location":"releases/2021.04.23/#hard-pin","title":"Hard Pin","text":"<p>When you want a rigid to be at an exact place at an exact time, use Hard Pin.</p> <p></p> <p>Limitations</p> <ul> <li>A rigid can currently have 1 Hard Pin each. This will be addressed in a future release.</li> <li>These cannot currently be exported, they are primarily intended for use interactively by the animator</li> </ul> <p>Previously called <code>Passive Control</code>.</p> <p></p>"},{"location":"releases/2021.04.23/#soft-pin","title":"Soft Pin","text":"<p>When you want a rigid to be at an approximate place at an approximate time, whilst still respecting the laws of physics including contacts and gravity, use Soft Pin.</p> <p></p> <p>Soft pins are nothing more than a constraint with a guide position towards the newly created transform.</p> <p>Limitations</p> <ul> <li>These cannot currently be exported, see Hard Pin for rationale</li> </ul> <p>Previously called <code>Guide Control</code>.</p> <p></p>"},{"location":"releases/2021.04.23/#animation-constraint","title":"Animation Constraint","text":"<p>In the the previous releases I've been experimenting with the idea of turning the Maya translate/rotate channels directly into a guide constraint.</p> <p>There are three possible scenarios with subtle differences.</p> <ul> <li>\u2714\ufe0f Non-dynamic Parent E.g. the first rigid in a new scene with an animated character</li> <li>\u2714\ufe0f Passive Parent E.g. a prop attached to a passive body</li> <li>\u2714\ufe0f Active Parent E.g. what you normally get out of chains</li> <li>\u2796 Dynamic Grandparent A less-supported special case, see below</li> </ul> <p></p> <p>In the above, the parent of the newly created rigid with an animation constraint is non-dynamic, it's got nothing to do with Ragdoll. Just your everyday (boring) Maya transform. In this case, the channel is successfully converted to a worldspace position and orientation from your translate/rotate channels.</p> <p></p> <p>Here on the other hand, the immediate parent is a <code>Passive Rigid</code> which is a little more flexible, and gives you an option to actually collide with the parent.</p> <p></p> <p>Finally, the parent is active. This is also OK and quite fun. Now the new rigid will affect the parent, since it adds weight onto it. Like a backback.</p> <p>Dynamic Grandparent</p> <p>Here's where things get less predictable. If the parent of the control you want physics to follow along with your translate/rotate channels is non-dynamic, but one or more of its parent are active rigids, then the channel box values no longer align.</p> <p></p> <p>This will be addressed in a future release.</p> <p></p>"},{"location":"releases/2021.04.23/#character-multiplier","title":"Character Multiplier","text":"<p>Making a new character now includes a default multiplier for all constraints (just like chains do!), meaning you can more easily create effects like this!</p> <p></p> <p></p>"},{"location":"releases/2021.04.23/#import-bugs","title":"Import Bugs","text":"<p>Two issues were found with the importer introduced in the last version.</p> <ol> <li>It wasn't able to distinguish between a passive and active rigid</li> <li>It wasn't able to correctly identify a chain with only 2 links</li> </ol> <p>Passive versus Rigid</p> <p>When importing a passive rigid, odds are it got imported as a active rigid instead. This could get very messy, as it could end up creating passive rigids as children of active ones, which could reak all kinds of havoc, including cycle warnings.</p> <p></p> <p>2-link chains</p> <p>Any \"chain\" with more than one child (head) is a special case of each chain only having 1 rigid each, as opposed to longer chains like arms and legs. Now these can be imported too!</p> <p></p> <p>Export is Unchanged</p> <p>This and the above import fix were only related to importing of physics, both your existing Maya scenes and exported <code>.rag</code> files are unchanged and were already in good condition. Yay!</p> <p></p>"},{"location":"releases/2021.04.23/#user-attributes","title":"User Attributes","text":"<p>Whenever you make a rigid or chain, some attributes are forwarded onto your animation controls. These attributes are called \"User Attributes\" and the previous release changed these from Maya proxy-attributes to plain-attributes.</p> <p></p> <p>In doing so, they lost their nice names and default values. :( This has now been fixed!</p> <p></p> <p></p>"},{"location":"releases/2021.04.23/#looped-playback-bug","title":"Looped Playback Bug","text":"<p>If you've ever had both passive and active rigids and let playback run on a loop, you might have encountered something like this.</p> <p></p> <p>Whereas if you rewound and playback without looping, everything would be allright. This bug got squashed in this release, letting you loop things to your hearts content!</p> <p></p>"},{"location":"releases/2021.04.23/#auto-cleanup","title":"Auto-cleanup","text":"<p>Whenever you <code>Delete All Physics</code> anything created by Ragdoll disappears, including User Attributes. What wasn't included however was the handles that appears when you <code>Edit Constraint Pivot</code> and <code>Edit Shape</code>.</p> <p>These now also vanish with delete-all, making your life just a little bit better!</p> <p>Thanks to Remi Comtois for pointing this out!</p> <p></p> <p></p>"},{"location":"releases/2021.04.23/#offline-activation","title":"Offline Activation","text":"<p>Activation is streamlined by happening inside of Maya at the paste of a serial and press of a button. Unless you are one of those without access to the internet, in which case we'll need to do a little dance. :)</p> <p>Step 1 - Generate Request</p> <pre><code>from ragdoll import licence\nkey = \"YOUR-VERY-LONG-KEY-HERE\"\nfname = r\"c:\\ragdoll_activation_request.xml\"\nlicence.activation_request_to_file(key, fname)\n</code></pre> <p>Step 2 - Email Request</p> <p>Send this file to licencing@ragdolldynamics.com. We'll abrakadabra this file before you can say Taumatawhakatangi\u00adhangakoauauotamatea\u00adturipukakapikimaunga\u00adhoronukupokaiwhen\u00aduakitanatahu.</p> <p>Step 3 - Activate</p> <p>Once you've got a response, activate your licence like this.</p> <pre><code>from ragdoll import licence\nfname = r\"c:\\ragdoll_activation_response.xml\"\nlicence.activate_from_file(fname)\n</code></pre> <p>Linux users, you'll know what to do about that Windows-like path.</p> <p>Full documentation</p> <ul> <li>https://learn.ragdolldynamics.com/licencing/#offline-activation</li> </ul> <p></p>"},{"location":"releases/2021.04.23/#qt-bug","title":"Qt Bug","text":"<p>The last release included a callback for synchronising the Import Options UI with the Maya selection. As a result, a bug slipped in which could - in rare cases - produce the following error messages in your Script Editor whenever you changed selection.</p> <pre><code>../ragdoll/vendor/qargparse.py line 654: Internal C++ object (WidgetHoverFactory) already deleted. //\n</code></pre> <p>This has now been patched up, but do shout out if this or anything like it happens to you!</p> <p>Thanks to Rafael Villar for finding this bug!</p> <p></p>"},{"location":"releases/2021.04.23/#low-dpi-cosmetics","title":"Low-DPI Cosmetics","text":"<p>The Import Options UI didn't quite live up to the hype at 720p and 1080p, now it does!</p> <ul> <li>Preview properly resizes to fit content</li> <li>Thumbnail properly fits the square</li> <li>Thumbnail and file listing lines up nicely</li> <li>Spacing between widgets are consistent across high and low DPI settings</li> </ul> Before After <p></p>"},{"location":"releases/2021.04.23/#z-up-worldspace-guides","title":"Z-up Worldspace Guides","text":"<p>Whenever you make a Guide control (now called <code>Soft Pin</code>) you are technically creating a constraint between a rigid and the world. That's what makes it worldspace. </p> <p>Until now, constraints assumed the world didn't move. But you z-up folks out there know that, sometimes, it does! Ragdoll is now OK with that.</p> <p>Before</p> <p></p> <p>After</p> <p></p> <p>Thanks to Jason Snyman for finding this bug!</p> <p></p>"},{"location":"releases/2021.04.23/#tree-multipliers","title":"Tree Multipliers","text":"<p>There was a minor bug with multipliers for any chain branching off of another chain (e.g. an arm from a spine) which caused the default multiplier to not correctly affect every link in those chains.</p> <p>This has now been fixed!</p> <p></p>"},{"location":"releases/2021.04.23/#known-issues","title":"Known Issues","text":"<p>At the time of this release, these are the known issues that will be addressed in a future release.</p> <p></p>"},{"location":"releases/2021.04.23/#evaluation-graph-controllers","title":"Evaluation Graph Controllers","text":"<p>If you use \"controllers\" in your rig, there is a possibility Ragdoll will be drawing things incorrectly.</p> <p></p> <p>This can be addressed by either not (1) using controllers, (2) disabling controllers in the evaluation or (3) awaiting a future update. The problem appears visual-only and should have no effect on the simulation itself.</p> <p></p> <p></p>"},{"location":"releases/2021.04.23/#scale-pivot","title":"Scale Pivot","text":"<p>When you hold the <code>D</code> key and move the pivot, there are 4 attributes being edited.</p> <ul> <li>Rotate Pivot</li> <li>Rotate Pivot Translate</li> <li>Scale Pivot</li> <li>Scale Pivot Translate</li> </ul> <p>If <code>scalePivot</code> and <code>scalePivotTranslate</code> result in zero change to a nodes position (the default) then all is well. But, if you edit these independently then that will in turn affect the final position of the node, in which case Ragdoll will struggle to simulate it.</p> <p></p>"},{"location":"releases/2021.04.23/#auto-key","title":"Auto Key","text":"<p>I've narrowed down a particularly annoying behavior (likely a bug) in Maya that can affect users of auto-key and Ragdoll.</p> <ul> <li>https://forums.autodesk.com/t5/maya-animation-and-rigging/bug-with-pairblend-and-auto-key/td-p/10258735</li> </ul> <p></p> <p>This will be fixed in a future release, and if anyone knows of any workaround please let me know!</p> <p></p>"},{"location":"releases/2021.04.23/#joint-orient-non-linear-hierarchy","title":"Joint Orient &amp; Non-linear Hierarchy","text":"<p>When joints do not immediately follow each other, the rotate channel isn't entirely accurate.</p> <p></p> <p>Notice how there is a joint inbetween the two rigids? Avoid this edge case for now, or zero out the <code>jointOrient</code>.</p> <p></p>"},{"location":"releases/2021.04.23/#soft-passive-guides","title":"Soft Passive Guides","text":"<p>Solved</p> <p>Solved in 2021.04.28</p> <p>Guiding the <code>translation</code> of an <code>Active Rigid</code> with a <code>Passive Rigid</code> is currently problematic and creates an unrealistic increase of acceleration.</p> <p></p> <p>The current workaround is to swap solvers under the Advanced tab of the scene.</p> <p></p>"},{"location":"releases/2021.04.28/","title":"Solver Upgrade","text":"<p>This release introduces more robustness, in exchange for changes to the default values for any <code>Stiffness</code> and <code>Damping</code> parameters.</p> <ul> <li>ADDED Solver Upgrade More realistic guides, at the expense of new default values</li> <li>ADDED Frameskip Protection Does what it says on the tin!</li> <li>ADDED Clear Initial State Return to a better time</li> <li>ADDED Passive Visualisation Understand which and when rigids are passive</li> <li>FIXED Start Frame Explosion Fixed a rare case overly eager passive rigids</li> <li>FIXED Negative Scale 2.0 Greater support for negative scale</li> <li>FIXED Rotate Order 3.0 Greater support for custom Rotate Order.</li> <li>FIXED Draw Shaded Rigids can now once again be wireframed, for less clutter whilst animating</li> </ul> <p></p>"},{"location":"releases/2021.04.28/#solver-upgrade","title":"Solver Upgrade","text":"<p>The solver has been upgraded for more accuracy and stability. Unfortunately, this changes the default values <code>Stiffness</code> and <code>Damping</code> attributes, which may require changes in your scene.</p> <p>ATTENTION: Backwards Incompatibility</p> <p>Ragdoll takes backwards compatibility very seriously. At no point should a scene you have created break because of an update. This however is an exception to that rule, one that I expect never to happen again.</p> <p></p>"},{"location":"releases/2021.04.28/#what-has-changed","title":"What has changed?","text":"<p><code>Stiffness</code> and <code>Damping</code> need higher values.</p> <p>So far, we've used the <code>Iterations</code> value on the solver to control how strong our constraints could be. As it happens, this isn't right. Iterations shouldn't control strength, it should only control how close the solution is to the true analytical solution.</p> <ul> <li>In the previous release, increasing this value produced an entirely different result based on how many iterations you used. At no point would it \"converge\" onto a true solution.</li> <li>In this and future releases, only stiffness and damping will affect the behavior of physics, with <code>Iterations</code> optionally bringing it closer to the true solution.</li> </ul> <p>In practice, not much has changed. You should still increase stiffness/damping when relevant, and still increase <code>Iterations</code> if you find the values aren't being respected.</p>"},{"location":"releases/2021.04.28/#what-can-i-do","title":"What can I do?","text":"<ul> <li>\ud83d\udc49 Increase <code>Stiffness</code> by 3-10x</li> <li>\ud83d\udc49 Increase <code>Damping</code> by 3-10x</li> </ul> <p>That is, if <code>Stiffness</code> was previously 1'000, make it 10'000.</p> <p>Exceptions</p> <ul> <li>For anything created with this version, no action is needed.</li> <li><code>Projected Gauss-Seidel</code> (Advanced) remains unchanged.</li> </ul> <p>It's not an exact science, in some cases you only need 3x, like in this case here.</p> <p></p> <p>Where the <code>Yellow</code> line is from the previous version at 1'000 stiffness and 100 damping, the <code>Blue</code> line has 3'000 stiffnes and 300 damping.</p>"},{"location":"releases/2021.04.28/#why-did-this-change","title":"Why did this change?","text":"<p>The previous version was subtly faulty, so this was inevitable. In practice however, under a very particular - but useful - circumstance the solver would struggle to obey.</p> <p>Circumstance</p> <ol> <li>An <code>Active Rigid</code></li> <li>Constrained to a <code>Passive Rigid</code></li> <li>Limits turned off</li> <li>Translate Guide turned <code>On</code></li> </ol> <p>Use Cases</p> <ul> <li>Dynamic muscles attached to an animated skeleton</li> <li>Dynamic props attached to an animated character</li> <li>Dynamic cloth attached to a passive collider</li> <li>Basically anything that isn't a fully-dynamic character</li> </ul> <p>Here was the result.</p> <p></p> <p>Notice how the active rigid does what the active rigid does, but is a little too excited? One workaround was to use \"Projected Gauss-Seidel\" in place of the default \"Temporal Gauss-Seidel\", however that solver isn't as accurate or fast.</p> <p>You might be thinking..</p> <p>Well that's an awefully specific case, when would I even hit that?</p> <p>Which is when you realise..</p> <p></p> <p>This was previously only possible with Projected Gauss-Seidel which is less performant and less able to handle large networks of constraints like a full ragdoll.</p> <p>Result</p> <p>This behavior was due to a subtle bug in how constraints were solved, a deeply rooted bug that once sorted out was what caused this change to the overall behavior of <code>Stiffness</code> and <code>Damping</code> values.</p> <p>In this release, the bug has been squashed and muscles and props now follow their passive counterpart much more accurately and without surprises.</p> <p></p> <p></p>"},{"location":"releases/2021.04.28/#frameskip-protection","title":"Frameskip Protection","text":"<p>The simulation is like a train running on a train track. It absolute must not miss a stop, else it can't realistically figure how how to get to the subsequent stop.</p> <p>Allow me to demonstrate.</p> <p></p> <p>Notice how everything falls apart when skipping just a handful of frames? It's trying to catch up, but the time difference is just too great to produce accurate values.</p> <p>This release adds support for pausing the solver whenever a frame is skipped, meaning you either get a (A) good solve or (B) a patient solver, awaiting your return.</p> <p></p> <p>The behavior can be disabled in the Preferences.</p> <p></p>"},{"location":"releases/2021.04.28/#why-should-i-care","title":"Why should I care?","text":"<p>Consider your everyday situation of adding dynamics to a tail.</p> <p></p> <p>Whenever a frame is skipped, the result is garbage. This can get even more extreme during more extreme movements. But, what's worse, this garbage is expensive! It's still simulating, and trying to solve these skipped frames is more expensive than non-skipped frames. That's a bad deal.</p> <p>Here what happens with frameskip protection.</p> <p></p> <p>See how it just stays put? It'll remember the last simulated frame, awaiting your return.</p> <p></p>"},{"location":"releases/2021.04.28/#clear-initial-state","title":"Clear Initial State","text":"<p>Setting the initial state can be used to relax a physics character or scene.</p> <p></p> <p>But once relaxed, you had no way to returning to its original creation state, until now!</p> <p></p> <ul> <li>The set and cleared state are both saved with the scene</li> <li>This can rescue the initial state from breaking due to Automatic Initial State</li> </ul> <p></p> <p>Thanks to Jason Snyman for this suggestion!</p> <p></p>"},{"location":"releases/2021.04.28/#passive-visualisation","title":"Passive Visualisation","text":"<p>Rigids will now turn gray when made passive, making it easier to understand what's going on visually.</p> <p></p> <p></p> <p></p>"},{"location":"releases/2021.04.28/#start-frame-explosion","title":"Start Frame Explosion","text":"<p>In a specific and rare circumstance, a passive rigid body could appear to have velocity on the start frame.</p> <p></p> <p>Notice here how animation starts immediately from the start frame, giving it an upwards velocity? The active rigids connected to the root on the other hand gets an even stronger velocity, for some reason.</p> <p>If we move the animation to just one frame after the start frame, all is well.</p> <p></p> <p>A subtle bug, having to do with the rigid body being created on the second frame of the simulation, which in this case had a position the was different from the start frame. However! The animation started at the start frame, so the velocity got inherited from there instead. Yes, it's complicated. :)</p> <p>And is now fixed!</p> <p></p>"},{"location":"releases/2021.04.28/#negative-scale","title":"Negative Scale","text":"<p>Ragdoll has supported scale, but negative scale has been unreliable. This release extends this support to negative scale used to mirror controls and behavior across a rig.</p> <p>Before</p> <p>This whole arm has a negative scale in the X-axis, from when it was mirrored across from the other side. Notice here how it look like the arm is about to move forwards, and instead move backwards.</p> <p></p> <p>After</p> <p>This has now been fixed.</p> <p></p> <p>It also means you can flip entire performances with a little more ease. :)</p> <p></p>"},{"location":"releases/2021.04.28/#caveat","title":"Caveat","text":"<p>Avoid negative scale on the control you are animating.</p> <ul> <li>\u2714\ufe0f Global negative scale</li> <li>\u274c Local negative scale</li> </ul> <p></p> <p>You are still better off not having any negative scales in your rig, as there is still at least one special case I found that might jump up and bite you.</p> <p>And that is if the animated control itself has negative local scale.</p> <p>Typically, one or more of the parents have negative scale, so as to mirror a whole hierarchy of controls. And that is \u2714\ufe0f. But if the control you are animating also have negative scale, you might experience this.</p> <p></p> <p>Notice how on rewind, it twitches at the start of playback every other time? That's because it cannot tell the whether the control has negative scale or whether it is rotated 180 degrees.</p> <p>This will be addressed in a future release.</p> <p></p>"},{"location":"releases/2021.04.28/#rotate-order","title":"Rotate Order","text":"<p>The animation constraint is what translates your keyframes into physics and with the introduction of support for Rotate Order in the previous few releases it has been possible for Ragdoll to output rotations onto any control with a custom rotate order.</p> <p>This release now includes support for input of custom rotate order into the simulation.</p> <p>Before</p> <p>Notice how changing the rotate order should have changed the axis around which the Y-animation was happening, but didn't?</p> <p></p> <p>After</p> <p>Now it does!</p> <p></p> <p></p>"},{"location":"releases/2021.04.28/#draw-shaded","title":"Draw Shaded","text":"<p>The previous release revamped the rendering system in Ragdoll, but left out a the convenience attribute to disable shading when rigid bodies were used alongside animation controls.</p> Before After <p>Manual Override</p> <p>The behavior can be manually adjusted to taste via the Attribute Editor.</p> <p></p>"},{"location":"releases/2021.05.10/","title":"Mimic","text":"<p>Highlight for this release is Mimic!</p> <ul> <li>ADDED Mimic Clean separation between simulation and animation</li> <li>ADDED Bake Simulation Fresh out the oven!</li> <li>ADDED Import Additions More control over the import process</li> <li>ADDED Sleep Greater performance by putting rigids to sleep</li> <li>ADDED Textures Visualise mass, friction and restitution</li> <li>ADDED Vertex Limit Less vertices, more performance</li> <li>IMPROVED Collide Off Improved handling of disabled collisions</li> <li>IMPROVED Quality of Life Can never have too much of these</li> <li>FIXED Startup Crash Were you one of the 2% of users having Maya crash on startup?</li> <li>FIXED Scene Drawing in 2018 Maya 2018 and 2019 were acting up, no more!</li> <li>FIXED Initial State One less thing to worry about</li> <li>FIXED Qt Another less to worry about</li> </ul> <p></p> <p>Some awesome simulations, courtesy of Jason Snyman, a.k.a. The Wizard. xD</p> <p>Facial Rigging</p> <p>Move lips, pull muscles. Collides with the teeth too!</p> <p></p> <p>Ragdolls have feelings too</p> <p>Zilla is nothing with Kong, Kong is nothing without Zilla.</p> <p>Wreck-it Zilla</p> <p>Old recovered footage from the 60s!</p> <p>Wreck-it Warm-up</p> <p>Ever wondered how Zilla prepares for world domination?</p> <p></p>"},{"location":"releases/2021.05.10/#mimic","title":"Mimic","text":"<p>Transition in and out of physics, in both pose-space and world-space, with the newly added Mimic.</p> <p>Options In-Depth</p> <p>A step-by-step guide on what each option mean, there's quite a few of them!</p> <p></p> <p>Production Rig Example</p> <p>A closer look at the Fire Wolf.</p> <p>Courtesy of Truong CG Artist</p> <p></p> <p></p>"},{"location":"releases/2021.05.10/#multiple-mimic","title":"Multiple Mimic","text":"<p>Mimic is a replica of your control hierarchy, and there's no limit to the number of replicas you can make. The final force applied to your rigid bodies is the sum of constraints applied.</p> <p></p> <p></p>"},{"location":"releases/2021.05.10/#order-independent","title":"Order Independent","text":"<p>The controls in character rigs typically don't form a linear hierarchy. They're in some offset group, or in a different part altogether hanging together with constraints. That are animated, for space switching and what not.</p> <p>Mimics don't mind.</p> <p></p> <p></p>"},{"location":"releases/2021.05.10/#partial-chain","title":"Partial Chain","text":"<p>Sometimes you only want a little bit of control.</p> <p></p> <p></p>"},{"location":"releases/2021.05.10/#bake-simulation","title":"Bake Simulation","text":"<p>You can now convert physics into keyframes with <code>Bake Simulation</code>.</p> <p></p> <p>I did not edit this GIF, it really was that fast! :D</p> <p></p> <p>Tutorial</p> <p></p> <p></p> <p>Bake Duration</p> <p>It'll tell you how much time was spent baking too.</p> <p></p> <p>Bake Options</p> <p>There are a few more options to choose from, with more to come.</p> <p></p> <p></p>"},{"location":"releases/2021.05.10/#import-additions","title":"Import Additions","text":"<p>The import mechanic got an upgrade, you're now able to choose whether or not to re-apply changes to attributes and more finely import onto part of a larger chain hierarchy.</p> <p></p>"},{"location":"releases/2021.05.10/#preserve-attributes","title":"Preserve Attributes","text":"<p>You now have the option to preserve attributes when importing, for when you'd rather stick with the default values.</p> <p></p> <p></p>"},{"location":"releases/2021.05.10/#preserve-roots","title":"Preserve Roots","text":"<p>Exported files now remember what their original roots were.</p> <p>The original root of chains aren't important to Ragdoll. Whether the spine was a chain followed by the left and right arm, or whether the spine and left arm were part of one chain followed by the neck and right arm makes no difference.</p> <p>Consider these two characters.</p> <p></p> <p>Notice how in the front character, one chain starts at the hip and goes out into the arm, whereas in the back character the spine is a single chain as you may expect?</p> <p>Regardless of how you authored it, to Ragdoll these characters are identical. Ragdoll doesn't bother with hierarchies, everything happens in worldspace. The hierarchy is between you and Maya.</p> <p>However</p> <p>What if you wanted to import just one of the roots? You can import only onto the selected controls, but you can't import part of a network of chains like a full ragdoll. It's either a complete character, or no character at all.</p> <p>In the case of the foreground character, you could import the screen-left arm, but not the screen-right. Not without importing the whole spine.</p> <p>This release preserves the original root, such that you can isolate an import onto the same chain you originally authored.</p> <p></p>"},{"location":"releases/2021.05.10/#sleep","title":"Sleep","text":"<p>It is now possible to reap additional performance benefits in situations where one or more rigids remain immobile for a given number of frames.</p> <p>The behavior can be tuned via two attributes on each <code>rdRigid</code> node.</p> Attribute Description <code>Wake Counter</code> How many frames of inactivity before I fall asleep? <code>Sleep Threshold</code> How low of a force should be applied before I start counting? <p>In practice, you'll likely only want to tweak the Wake Counter to some reasonable value like 5 or 20 frames of immobility. The default value of 0 means they'll never fall asleep. Like a proper insomniac or new parent.</p> <p>Caveat</p> <p>Currently, the wake counter is not reset when you rewind, so it's possible to have them fall asleep on frame 20, rewind to frame 19 and have the counter reset and keep them awake past frame 20. It's unlikely to affect you, and will be addressed in a later release.</p> <p></p> <p></p>"},{"location":"releases/2021.05.10/#textures","title":"Textures","text":"<p>As you author your ragdolls, the distribution of mass can play a big role. But it can be tricky to balance something you cannot see, smell or touch.</p> <p>With this release, you're able to see (but not smell, I promise) the masses in each rigid using the handy new <code>Texture</code> attribute and when your viewport is set to Textured mode (the <code>6</code> key on your keyboard).</p> <p>Thanks to Jason Snyman for the idea!</p> <p></p> <p>Normalised Distribution</p> <p>Notice how the colors even out to always give you pure white for the maximum weight in any of the rigids in the scene they are part of, and approaching black for anything less. No need to manually specify min/max values!</p> <p></p> <p>Friction and Restitution</p> <p>These can be visualised too.</p> <p></p> <p>Maya 2018 Caveat</p> <p>In Maya 2018, consolidation is disabled to facilitate this shader. It shouldn't affect anything of value, you probably don't even know what it is. But if you'd rather it didn't do that, untick the \"Maya 2018 Consolidate World Fix\" in the Ragdoll Preferences and reload the plug-in or restart Maya.</p> <p></p>"},{"location":"releases/2021.05.10/#vertex-limit","title":"Vertex Limit","text":"<p>Meshes are the slowest to compute and have an upper-limit of 256 vertices. You can now lower this limit for meshes that would normally result in 256 for greater performance.</p> <p></p> <p></p>"},{"location":"releases/2021.05.10/#collide-off","title":"Collide Off","text":"<p>Rigids have always been able to ignore contacts with <code>Collide: Off</code></p> <p></p> <p>The problem here is subtle, but has been present since the beginning of Ragdoll. It mostly makes itself known once there is a constraint between a rigid with <code>Collide: On</code> and a rigid with <code>Collide: Off</code>.</p> <p></p> <p>Notice how with <code>Collide: Off</code> the upper part of the \"creature\" is more wobbly? As if the effect of the constraint has somehow dimished? That's not right. Unless there are contacts involved, disabling them shouldn't have an effect on the simulation.</p> <p>With this release, it behaves as you would expect.</p> <p></p> <p></p>"},{"location":"releases/2021.05.10/#quality-of-life","title":"Quality of Life","text":"<p>A number of improvements were made to make working with Ragdoll more pleasant!</p> <p></p> <p></p>"},{"location":"releases/2021.05.10/#translate-limit-rendering","title":"Translate Limit Rendering","text":"<p>The translate limit is making an appearance!</p> <p>This should make it just a tiny bit easier to work with, now that it's clear which axes are actually free. Letting you see whether they are constrained in 3D, 2D or 1D. All the D's!</p> <p></p> <p>Edit Limit</p> <p>Using the same method as editing rotate limits, they can be rotated (and moved!).</p> <p></p> <p>Soft Limit</p> <p>Like rotate limits, these can also be made soft!</p> <p></p> <p></p>"},{"location":"releases/2021.05.10/#constraint-rendering","title":"Constraint Rendering","text":"<p>Have you ever noticed constraints looking real nervous?</p> <p>You now needn't lose any more sleep over it, as they now render flicker-free. :D</p> <p>Before</p> <p></p> <p>After</p> <p></p>"},{"location":"releases/2021.05.10/#constraint-interactivity","title":"Constraint Interactivity","text":"<p>You may also have noticed how when you edit one of two constrained rigids, how things get all whack?</p> <p>Before</p> <p></p> <p>Best case you'd at least get constraints to stick together as you make changes.</p> <p></p> <p>After</p> <p>And oh golly how ugly it was. No more! Yay! \ud83e\udd29</p> <p></p> <p></p> <p></p>"},{"location":"releases/2021.05.10/#constraint-colors","title":"Constraint Colors","text":"<p>When rigids have multiple constraints, it can be hard to tell them apart visually given they all share the same red/green colors. And if you're amongst the colorblinds things are even more challenging.</p> <p>This release enables you to give some extra flare to your constriants, by editing the <code>Twist</code> (X-axis) and <code>Swing</code> (YZ-axes).</p> <p> </p> <p></p>"},{"location":"releases/2021.05.10/#trajectory-on-selected","title":"Trajectory on Selected","text":"<p>There's now an option to isolate trajectories to selected rigids only.</p> <p></p> <p></p>"},{"location":"releases/2021.05.10/#less-explosive","title":"Less Explosive","text":"<p>Overlaps are resolved by moving one or both rigids away from each other. The force with which that resolution happens could be infinite, resulting in what looks like explosions.</p> <p>This release addresses this, by compromising between realism and aesthetics.</p> <p>Before</p> <p></p> <p>After</p> <p></p> <p>Editable</p> <p>The behavior can be restored or tweaked further by adjusting the <code>Max Depenetration Velocity</code> attribute of the rigid.</p> <p></p> <p></p>"},{"location":"releases/2021.05.10/#load-on-file-open","title":"Load on File Open","text":"<p>There are 3 ways to load Ragdoll.</p> <ol> <li>Maya's Plug-in Manager</li> <li>Python's <code>cmds.loadPlugin(\"ragdoll\")</code></li> <li>Opening a file with Ragdoll in it</li> </ol> <p>When Ragdoll is loaded, it appends to a special environment variable Maya uses to look for icons in the Outliner called <code>XBMLANGPATH</code>. Because of course that's what it is called, why do you have that look on your face?</p> <p>Anyway, as it happens, if the Outliner was given a chance to draw icons before Ragdoll added this variable then it'd go ahead and draw a generic, non-pleasant-looking icon like this.</p> <p>This release fixes that. \ud83e\udd70</p> Before After <p></p>"},{"location":"releases/2021.05.10/#upgrade-on-file-open","title":"Upgrade on File Open","text":"<p>Like above, there was another issue when loading the plug-in alonside opening of scenes, which had to do with upgrades.</p> <p>Normally, what happens is this.</p> <ol> <li>Scene is opened</li> <li>Ragdoll checks to see if any nodes are older than the version you use</li> <li>If they are, it then checks to see whether any of them need upgrading</li> <li>If any are, it upgrades those</li> <li>Scene open complete</li> </ol> <p>But since the plug-in is loaded during scene open, Ragdoll wasn't given a chance to check it first.</p> <p>This has now been fixed.</p> <p>Install on Idle</p> <p>This changes the initialisation mechanism somewhat, if this causes any issues for you, set the <code>RAGDOLL_INSTALL_ON_IDLE</code> environment variable to revert to the old behavior. It won't be able to upgrade on scene open unless you load the plug-in first, but that's the only thing you're missing out on.</p> <p></p>"},{"location":"releases/2021.05.10/#node-editor-icons","title":"Node Editor Icons","text":"<p>Our precious icons now appear in the node editor too!</p> Before After <p></p>"},{"location":"releases/2021.05.10/#passive-initial-state","title":"Passive Initial State","text":"<p>Here's a subtle one.</p> <p>In previous releases, the initial state is automatically updated on the 2<sup>nd</sup> frame of the simulation to wherever a rigid was on the 1<sup>st</sup> frame. Even if you modified the position interactively with manipulators, or via curves in the Graph Editor, or the channel box, and so on.</p> <p>It even updated when a rigid was affected by passive input, like a Hard Pin, which meant you lost track of the original initial state whenever you disabled the hard pin.</p> <p>This release addresses that by only automatically updating the initial state if a rigid is active on the start frame.</p> <p></p> <p>Notice how I can disable Hard Pin and have the rigids return to where they were before they got pinnned? It's what you would expect.</p> <p></p>"},{"location":"releases/2021.05.10/#passive-to-active-and-back-again","title":"Passive to Active and Back Again","text":"<p>Ragdoll tries to clean up after itself by removing constraints no longer in use. When a rigid is passive, it can no longer be affected by constraints, so those constraints are deleted.</p> <p>However, active rigids can still be influenced by a passive rigid, and Ragdoll was a little too aggressive in removing those constraints too.</p> <p>This release fixes that.</p> <p></p> <p></p>"},{"location":"releases/2021.05.10/#undo-and-attribute-order","title":"Undo and Attribute Order","text":"<p>Whenever you delete physics and undo, the order in which proxy attributes would appear on your controllers would go all whack.</p> <p>This is basic-Maya, it loves doing this. But now love goes both ways, and we are much happier. \ud83e\udd70</p> <p>Before</p> <p> </p> <p>After</p> <p></p> <p></p>"},{"location":"releases/2021.05.10/#control-rendering","title":"Control Rendering","text":"<p>Controls give you a preview of what the rigid they control look like.</p> <p>These are special in that Maya doesn't actually need them. Ragdoll doesn't actually need them either. They are exclusively for-your-eyes-only.</p> <p>And due to Maya only updating things it absolutely needs to whenever rendering anything, these won't get updated unless Ragdoll explicitly tells them to. So far, they've been told to update whenever the selection changed, which can end up looking bad.</p> <p>This has now been improved!</p> <p>Before</p> <p></p> <p>After</p> <p></p> <p></p>"},{"location":"releases/2021.05.10/#fixed-startup-crash","title":"Fixed Startup Crash","text":"<p>On plug-in load, Ragdoll would check your licence. Under rare circumstances (2 out of 100 users reported it happening) this would be enough to put Maya under, instantly and without warning.</p> <p>This has now been fixed.</p> <p></p>"},{"location":"releases/2021.05.10/#fixed-initial-state","title":"Fixed Initial State","text":"<p>An error was introduced between 2021.04.23 and 2021.04.28 leading to an issue with updating the initial pose via the Channel Box or Graph Editor.</p> <p>This got addressed on the same day and released unofficially as 2021.04.30, and is now officially part of the latest version.</p> <p>Thanks to Niels Dervieux for reporting this bug!</p> <p>Before</p> <p></p> <p>After</p> <p></p> <p></p>"},{"location":"releases/2021.05.10/#fixed-qt","title":"Fixed Qt","text":"<p>Whenever you clicked <code>Import Physics</code> in the Import Physics Option Window, it would needlessly shout at you.</p> <pre><code># RuntimeError: Internal C++ object (WidgetHoverFactory) already deleted.\n</code></pre> <p>No more!</p> <p></p>"},{"location":"releases/2021.05.10/#scene-drawing-in-2019","title":"Scene Drawing in 2019","text":"<p>Maya was misbehaving in 2018-2019, refused to draw the scene visualisation correctly. No longer!</p> <p>Before</p> <p></p> <p>After</p> <p></p>"},{"location":"releases/2021.05.17/","title":"Floating Licence Support","text":"<p>Highlight for this release is support for Floating Licences!</p> <ul> <li>ADDED Floating Licence Server Convenient big-studio licencing</li> <li>ADDED Mimic IK Turn mimic into a joint hierarchy, for IK and such</li> <li>IMPROVED Quality of Life More joy for you</li> <li>TIP Bulk Edits Some tips for a happier life</li> </ul> <p></p>"},{"location":"releases/2021.05.17/#floating-licence-server","title":"Floating Licence Server","text":"<p>So far, Ragdoll has been activated on a per-machine basis. It's been node-locked.</p> <p>But in many cases, you are a studio with a team of artists using Ragdoll. That's when it becomes impractical for each artist to manage their own licences, or for licences to become associated with a single machine.</p> <p>Floating licences solve this problem. With it, you register a fixed amount of licences with a server somewhere on your network, and then have Maya \"lease\" licences off of it. For example, with 10 floating licences, 10 artists can use Ragdoll in parallel. On Maya shutdown or plug-in unload, the lease is \"dropped\" meaning it can be picked up by another artist, on some other machine.</p> <p>Heads-up SysAdmins</p> <p>On Windows, the floating licence mechanism is currently a dedicated DLL.</p> <p></p> <p>This will be merged into the plug-in like on Linux in a future release.</p> <p>See also</p> <ul> <li>Floating Licence Documentation</li> </ul> <p></p>"},{"location":"releases/2021.05.17/#mimic-ik","title":"Mimic IK","text":"<p>The Mimic introduced in the last release generated a clean hierarchy of transforms.</p> <p>This release introduced \"mimik\", which is a joint hierarchy suitable for skinning and IK. It's got a proper Joint Orient too, irregardless of what the original animation controls looked like.</p> <p></p> <p>They're great if IK is what you want, but they do make the overall hierarchy more complex and introduce an additional <code>jointOrient</code> offset onto the joints themselves. For that reason, <code>Transform</code> is the default node type and is currently the most simple mimic to work with.</p> <p>Room for Improvement</p> <p>There's still room for improvement, the user attributes remain on the blue control nodes rather than the joints themselves for now. This will be addressed in a future release.</p> <p></p>"},{"location":"releases/2021.05.17/#quality-of-life","title":"Quality of Life","text":"<p>More quality, less problems. Hacuna matata!</p> <p></p>"},{"location":"releases/2021.05.17/#constraint-outliner-style","title":"Constraint Outliner Style","text":"<p>You can now choose how constraints appear in the outliner.</p> Style Result <code>nConstraint</code> At the root of the outliner, as its own transform <code>Maya Constraint</code> As a child transform <code>Ragdoll</code> As a shape <p>The <code>rRigid</code> node appears as a shape of any node you apply physics to, and normally constraints appear alongside them. But normal Maya constraints do not, and neither does the constraints you get with nCloth and nHair. So which do you prefer?</p> <p>Ragdoll Style</p> <p>As a shape, alongside the <code>rRigid</code> node.</p> <p></p> <p>Maya Constraint Style</p> <p>As a child, similar to native Maya constraints.</p> <p></p> <p>nConstraint Style</p> <p>As a new transform at the root of the scene, similar to nCloth and nHair constraints. Group them, hide them; if you can imagine it, you can achieve it!</p> <p></p> <p>Subjective</p> <p>Whichever you prefer, it has no effect on the simulation and is strictly related to the Outliner only. They can also be re-parented after being created, it really doesn't matter where they are. So organise away!</p> <p></p>"},{"location":"releases/2021.05.17/#constraint-scale-rendering","title":"Constraint Scale Rendering","text":"<p>The last release made constraints render poorly if the node they were parented to was scaled. The simulation was still fine, but you couldn't see what you were doing.</p> <p>Before</p> <p></p> <p>After</p> <p></p> <p></p>"},{"location":"releases/2021.05.17/#constraint-maintain-offset","title":"Constraint Maintain Offset","text":"<p>Constraints typically maintain their offset on creation, such that rigids do not abruptly snap together on simulation start.</p> <p>But it's optional, and if you don't maintain offset then they would snap together. With this release, the default behavior is now soft as opposed to infinitely strong.</p> <p></p> <p></p>"},{"location":"releases/2021.05.17/#installer-improvements","title":"Installer Improvements","text":"<p>On Windows, the MSI installer can now be used to install multiple versions of Ragdoll simultaneously, with a dedicated uninstall option each.</p> <p></p> <p>This should also help clear out issues with upgrading using the MSI, which has been problematic in the past since the installer really didn't like overwriting files.</p> <p>On all platforms, multiple Maya module files now co-exist, which means that if you want to disable or switch versions you can do that by removing the offending version - rather than editing the text file itself like in previous versions of Ragdoll.</p> <p></p> <p></p>"},{"location":"releases/2021.05.17/#rigid-scale-rendering","title":"Rigid Scale Rendering","text":"<p>Rendering of non-uniformly scaled rigid bodies has been improved and now respond interactively to scale changes. Notice in particular how scale is translated into sphere radius only along the X-axis. For non-uniform scale of a sphere, switch to <code>Shape Type = Mesh</code>.</p> <p>Before</p> <p></p> <p>After</p> <p></p>"},{"location":"releases/2021.05.17/#scene-scale","title":"Scene Scale","text":"<p>The default distance unit in Maya is centimeters. Meaning <code>Translate X=5.0</code> means \"5 centimeters along the X axis\". And in some cases, characters get modeled by this unit too, to an average height of 160-190cm.</p> <p>But often this unit is ignored and now Ragdoll can too.</p> <p>Default Value</p> <p>Ragdoll has assumed a scene scale of 0.1 so far, meaning 10 centimeters meant 1 meter. That's the typical scale of most rigs, some having smaller - like the Fire Wolf at 0.01 - and some larger - like a real-world scale of 1.0.</p> <p>This value used to be reflected in <code>Gravity Y</code> as <code>98.2</code> meaning <code>98.2 cm/s2</code>. Which means that an object falling for 1 second would reach a velocity of 98.2 cm/s and keep increasing by the amount each second until reaching terminal velocity.</p> <p>It is now reflected in Scene Scale instead as 0.1. For a real-world scale, simply set this value to 1.0 and leave gravity unchanged.</p> <p></p> <p></p> <p></p>"},{"location":"releases/2021.05.17/#quick-select","title":"Quick Select","text":"<p>The quick-select commands now feature an option to ignore whatever is currently selected.</p> <ul> <li>Either select all of a certain type, like <code>rdRigid</code></li> <li>Or filter current selection by type, like <code>rdRigid</code></li> </ul> <p>Filtering grows more useful as your scenes grow large. When you have e.g. 2 characters and want to edit all constraints in one of them, then filtering is what you're looking for.</p> <p></p> <p></p>"},{"location":"releases/2021.05.17/#bulk-edits","title":"Bulk Edits","text":"<p>The Maya Channel Box is great for editing multiple nodes at once.</p> <p>Select two or more nodes, change an attribute in the Channel Box, and the change is applied to each of the selected nodes at once. Win!</p> <p>But what about attributes that aren't in the Channel Box?</p> <p>Here are 3 ways in which you can bulk-edit a class of Ragdoll nodes in one-go. In each case, I'm using the <code>Ragdoll -&gt; Select</code> menu item to bulk-select all rigid bodies in the scene.</p> <p></p>"},{"location":"releases/2021.05.17/#1-attribute-editor","title":"1. Attribute Editor","text":"<p>Also known as \"the slow way\". Simply edit each attribute, one at a time. Like watching paint dry. It's slow.</p> <p></p> <p></p>"},{"location":"releases/2021.05.17/#2-channel-editor","title":"2. Channel Editor","text":"<p>All attributes found in the Attribute Editor are also available in the Channel Editor. The most-commonly used ones are already exposed, but you can expose more.</p> <p></p> <p></p>"},{"location":"releases/2021.05.17/#3-attribute-spreadsheet","title":"3. Attribute Spreadsheet","text":"<p>For total control, irregardless of the Channel Box and with searchability amongst attributes, you can also try the lesser-known Attribute Spreadsheet.</p> <p></p>"},{"location":"releases/2021.06.07/","title":"Minor Bugfixes","text":"<p>Highlight for this release is minor bugfixes, in preparation for launch.</p> <ul> <li>FIXED Broken Scale The arch-nemesis has been slain once again</li> <li>FIXED Zero Length Spheres On rare occasions could your chain tips end up with a zero size</li> <li>FIXED Crash on Playback No more of these, be gone!</li> <li>IMPROVED Referenced Dynamics More visual aids when working with referenced physics</li> </ul> <p></p>"},{"location":"releases/2021.06.07/#development-status","title":"Development Status","text":"<p>It's been almost a month, and this is all you have to show for it?</p> <p>Yes! The past few weeks has been \"Less C++, more HTML\". The website is getting an overhaul, along with documentation and tutorials. Stay tuned, and for early access users: keep on reporting any issues you encounter!</p> <p></p>"},{"location":"releases/2021.06.07/#broken-scale","title":"Broken Scale","text":"<p>Sometimes, when animation controls has been scaled the default values and drawing of rigids and constraints did not look right. This has now been fixed.</p> <p>Before</p> <p></p> <p>As you can see, the rigids are far away from their control, and the constraint visualisation is all whack. These are exactly 10x wrong, which is how scaled the top-level group is.</p> <p>After</p> <p></p> <p>Thanks to @mariia for reporting this issue!</p> <p></p>"},{"location":"releases/2021.06.07/#zero-length-spheres","title":"Zero Length Spheres","text":"<p>When making a chain for a tail, there was a specific circumstance that could trip-up Ragdoll when trying to figure out how large to make the tip of that tail, resulting in a rigid body of zero length and width.</p> <p>These don't simulate well and didn't communicate that it had happened. This has now been fixed!</p> <p>Thanks to Amedeo Beretta for reporting this issue!</p> <p></p>"},{"location":"releases/2021.06.07/#crash-on-playback","title":"Crash on Playback","text":"<p>The previous release intoduced interactive re-generation of rigid body meshes when scaling. It was really neat! Unfortunately, the Maya feature used to support this feature had a critical fault in Maya 2020.</p> <p>Leaving mention of the culprit here should anyone surf the interwebs and arrive to at similar fate.</p> <ul> <li><code>MDagMessage::addWorldMatrixModifiedCallback()</code></li> </ul> <p>As such, in order to scale a rigid body of <code>Shape Type = Mesh</code> you must trigger a rebuild. The simplest way of doing that at the time of this writing is to jiggle the vertex limit.</p> <p></p> <p>Other options include:</p> <ol> <li>Edit the geometry, e.g. move a vertex</li> <li>Edit the topology, e.g. subdivide and undo</li> <li>Disconnect/reconnect mesh from the <code>rdRigid</code> node</li> <li>Delete the rigid and undo</li> <li>Re-open the scene</li> </ol> <p></p>"},{"location":"releases/2021.06.07/#referenced-physics","title":"Referenced Physics","text":"<p>When referencing another file, the nodes are \"locked\". Meaning they have some restrictions on what you can do with them, like not being able to delete them.</p> <p>Ragdoll would happily attempt to delete these but not tell you that it had failed. It simply isn't allowed to do it.</p> <p>This release communicates this to you.</p> <p></p> <p>It also applies to deletion happening indirectly, such that when you want physics removed after baking.</p> <p></p>"},{"location":"releases/2021.06.10/","title":"Telemetry","text":"<p>Highlight for this release is telemetry.</p> <ul> <li>ADDED Telemetry Anonymous usage statistics for focused development</li> <li>FIXED Fractional Start Time This could cause a nasty crash</li> <li>FIXED Suspend on Bake Faster baking now that this works!</li> <li>FIXED More Resilient Constraint Rendering Optimised and less noisy</li> </ul> <p></p>"},{"location":"releases/2021.06.10/#telemetry","title":"Telemetry","text":"<p>Ragdoll is now able to gather usage statistics so that I can strip menu items that aren't used, pay more attention to the ones that are and get an overall understanding of how Ragdoll performs out in the wild.</p>"},{"location":"releases/2021.06.10/#faq","title":"FAQ","text":"<p>What is telemetry?</p> <p>It's the term coined for gathering anonymous usage statistics and send it to a product vendor for a greater understanding of how their product is used.</p> <p>Do I need it?</p> <p>No, this won't help you. Not directly. But it will help you and others indirectly, in that it allows me to spend more time on features you use, and less time on those you don't.</p> <p>What does it collect?</p> <p>Mostly performance numbers, nothing personal. See Data below.</p> <p>How is it collected?</p> <p>Mostly through C++, but some of it through Python. You can read about exactly what it does in <code>telemetry.py</code></p> <p>What if I'm offline?</p> <p>Then the file will still be written to your home directory, and you'd be welcome to email it at your own leisure to telemetry@ragdolldynamics.com</p>"},{"location":"releases/2021.06.10/#opt-in","title":"Opt-in","text":"<p>It is currently opt-in while I work out the kinks, so if you're interested in helping out put this in your <code>maya.env</code> or type it into your script editor before loading the plug-in.</p> <p>Maya.env</p> <pre><code>RAGDOLL_TELEMETRY = Yes\n</code></pre> <p>Script Editor</p> <pre><code>os.environ[\"RAGDOLL_TELEMETRY\"] = \"Yes\"\n</code></pre>"},{"location":"releases/2021.06.10/#data","title":"Data","text":"<p>Data is gathered and stored in 2 places.</p> <ul> <li>Locally at <code>~/.ragdoll/telemetry_10-06-2021-100402.json</code></li> <li>Remotely at the Ragdoll database</li> </ul> <p>It is gathered and stored when Maya closes. Or more precisely, when the plug-in is unloaded.</p> <p>Here's what the complete data currently looks like.</p> <p><code>~/.ragdoll/telemetry_10-06-2021-100402</code></p> <pre><code>{\n    \"maya\": {\n        \"crashed\": false,\n        \"version\": 20200200,\n        \"errors\": 0,\n        \"warnings\": 0\n    },\n    \"system\": {\n        \"time\": \"10-06-2021, 10:04:39\",\n        \"memory_cpu\": \"31010.8 MB\",\n        \"machine\": \"AMD64\",\n        \"memory_gpu\": \"24576 MB\",\n        \"gpu\": \"GeForce RTX 3090/PCIe/SSE2\",\n        \"os\": \"win32\",\n        \"processor\": \"AMD64 Family 23 Model 49 Stepping 0, AuthenticAMD\",\n        \"render_api\": \"OpenGL V.4.6\"\n    },\n    \"ragdoll\": {\n        \"simulationTimeMax\": 1.2327,\n        \"computeTimeMax\": 1.6763,\n        \"setupTimeMin\": 0.301,\n        \"computeTimeMin\": 0.7595,\n        \"setupTimeMax\": 0.4756,\n        \"simulationTimeMin\": 0.4697,\n        \"rigidCountMax\": 15,\n        \"constraintCountMax\": 16,\n        \"version\": 20210606,\n        \"computeTimeAvg\": 0.949111823737213,\n        \"simulationTimeAvg\": 0.597494786145304,\n        \"setupTimeAvg\": 0.25006875,\n        \"rigidCountMin\": 15,\n        \"constraintCountMin\": 16\n    }\n}\n</code></pre> <p>This was generated from that throbbing heart simulation above.</p> <p>There are currently 3 categories of data gathered.</p> <p>\"maya\"</p> <p>As you can see, it'll capture how many errors and warnings were emitted from the plug-in whilst the plug-in was loaded. It'll also include whether Maya crashed the last time Ragdoll was loaded. Ragdoll's goal is to keep crashes at 0.</p> <p>\"system\"</p> <p>It'll also include system information such that I know how restrained to keep Ragdoll, both in terms of memory and CPU power. If everyone's running on an integrated Intel chip, then Ragdoll simply wouldn't try to benefit from the GPU that much. These numbers also help put the next category into perspective.</p> <p>\"ragdoll\"</p> <p>The <code>ragdoll</code> category is perhaps the most interesting, as it sheds light on how much you are willing to suffer haha! Ragdoll is a real-time solver and is designed to be operated without waiting. So if I see these numbers climb too high, I'll crank up the number of optimisations to bring them back down again. Simple!</p>"},{"location":"releases/2021.06.10/#roadmap","title":"Roadmap","text":"<p>There will be a publicly available website for this information - with graphs and charts - such that we can all witness just how fast Ragdoll is and get some perspective on the kind of workload it typically deals with. From this overview, development can then focus on exactly those.</p> <p></p>"},{"location":"releases/2021.06.10/#fractional-start-time","title":"Fractional Start Time","text":"<p>You wouldn't normally set your start time to <code>0.8</code> or <code>16.351</code>, but it can happen whether you like it or not if e.g. physics was made in one scene and later referenced into another with differing frame rates. Such as 24 fps in one, and 30 fps in another.</p> <p>If that happened, then best case your simulation flickers on the first frame, worst case you're looking at a fatal crash.</p> <p>Why?</p> <p></p> <p>In this illustration, you can see how the simulation (blue) progresses alongside time (red). As we reach just beyond a whole frame, such as 1.1, you'll notice how the simulation immediately fills in that whole frame; even though we haven't actually reached the end yet!</p> <p>The result is a simulation that operates on incomplete information. Your animation at frame <code>1.1</code> is not where it is at frame <code>2</code>.</p> <p>In this release, here's what happens instead.</p> <p></p> <p>Now we're only simulating once we've actually reached a whole frame step. Your animation has reached the full pose at that frame and that's what will be used to compute the simulation. As you would expect.</p> <p>Does this mean I can playback in fractional frames?</p> <p>Not yet, simulation happens on whole frames and won't output anything until the next whole frame. At a later date, fractional frames will be automatically interpolated, similar to when you bake a simulation and set keys to <code>linear</code>.</p> <p>This isn't typically useful for animation, but can help with motion blur during the rendering of fast-moving objects; especially spinning objects like propellers and wheels.</p> <p>That said, you can achieve some pretty surreal effects with this. :D</p> <p></p> <p></p> <p>Stay tuned for real-time interpolation, and do let me know if this is something you're interested in.</p> <p>Thanks to Amedeo Beretta for spotting this issue!</p> <p></p>"},{"location":"releases/2021.06.10/#suspend-on-bake","title":"Suspend on Bake","text":"<p>Baking is fast and light with the default option for disabling the viewport as it runs, but should you also opt to delete physics once baking is complete you would find suspension to have no effect. :(</p> <p>This was due to deletion of physics also suspending the viewport as it deletes things and - wanting to be helpful - went ahead and resumed rendering of the viewport before baking got a chance to get started.</p> <p>This has now been fixed.</p> <p></p> <p>Speed!</p> <p>0.51 seconds versus 0.13 seconds, a 4x speedup!</p> <p></p>"},{"location":"releases/2021.06.10/#more-resilient-constraint-rendering","title":"More Resilient Constraint Rendering","text":"<p>You are unlikely to end up with zero scaled things, but if you do you could also run into visual flicker like this.</p> <p>Before</p> <p></p> <p>After</p> <p></p> <p>Not only is this gone, it's fast too. It is as fast as though the constraints were never visible to begin with, giving you another option for hiding them. Scaling them down. Hah!</p>"},{"location":"releases/2021.07.02/","title":"Quality of Life","text":"<p>Highlight for this release is quality of life.</p> <ul> <li>ADDED Replace Mesh Swap one mesh for another</li> <li>ADDED Freeze Evaluation Optimise performance by excluding nodes from evaluation</li> <li>ADDED Scene Management Extract, move and merge rigids across scenes</li> <li>ADDED Ignore Contact Constraint Surgical control over which rigid two interacts with each other</li> <li>ADDED Bake Selected Scenes Limit bake to one or more scenes</li> <li>ADDED Multi-mesh Shapes Mesh, Curve and Surface, as one?</li> <li>FIXED Edit Constraint and Chain Connection to Pose Strength is now preserved</li> <li>FIXED Constraints and Focus F-key no longer blows you away</li> <li>FIXED Skinweight Painting No long an issue!</li> <li>FIXED Referenced Physics Can now be mixed with new physics</li> <li>FIXED Two Users, One Machine More capable of rare production occurrences</li> <li>FIXED Export Initialisation You can now export without first playing back</li> <li>FIXED Center Of Mass Visualisation This vanished, and is now back!</li> <li>FIXED Something Went Wrong Less of these pesky errors</li> <li>FIXED More Accurate Auto Mass 1x1x1m = 1,000kg, as god intended</li> </ul> <p></p>"},{"location":"releases/2021.07.02/#showcase","title":"Showcase","text":"<p>In preparation for the upcoming website, there are 4 new animations in progress. Here's just a taste. :)</p> <p></p>"},{"location":"releases/2021.07.02/#replace-mesh","title":"Replace Mesh","text":"<p>When you turn a mesh dynamic, the vertices are plugged into the rigid node.</p> <ul> <li><code>mesh</code> nodes plug into <code>rdRigid.inputMesh</code></li> <li><code>nurbsCurve</code> nodes plug into <code>rdRigid.inputCurve</code></li> <li><code>nurbsSurface</code> nodes plug into <code>rdRigid.inputSurface</code></li> </ul> <p>But what if you wanted a different mesh? What if there was no mesh, such as for a joint or empty transform?</p> <p>I give you, <code>Replace Mesh</code>. \ud83d\udc4f</p> <p></p> <p>Here's a more practical example, of a dynamic joint being replaced with the mesh of a car wheel.</p> <p></p> <p></p>"},{"location":"releases/2021.07.02/#freeze-evaluation","title":"Freeze Evaluation","text":"<p>Rigid bodies have an <code>Enabled</code> state to exclude it from a simulation, but it will still partake in most evaluation and still cost precious CPU cycles.</p> <p>In Maya 2016, an attribute was introduced for exclude nodes from Parallel Evaluation called <code>.frozen</code>. Ragdoll now supports this attribute to a limited extent.</p> <p>This operation is completely non-destructive and affects nothing but the nodes you select.</p> <p>Important</p> <p>The more you freeze, the more performance you gain, and that includes Maya's native nodes. So go ahead and freeze the controls as well.</p> <p>Caveat</p> <p>The optimisations are coming from deep within Maya and is mostly outside of our control. And it isn't perfect. How Maya chooses to evaluate nodes is sometimes a mystery, and sometimes even frozen nodes get included in evaluation. For the technically minded, you can read more about the attribute and behavior here.</p> <ul> <li>https://download.autodesk.com/us/company/files/UsingParallelMaya/2020/UsingParallelMaya.html#frozen-evaluator</li> </ul> <p></p>"},{"location":"releases/2021.07.02/#scene-management","title":"Scene Management","text":"<p>Sometimes, you find yourself with rigid bodies that could run separately, in parallel. Either for performance, or because they could benefit from independent solver settings like iterations and substeps, or time scale and more.</p> <p>Now you can extract rigid bodies from one scene into a new scene, akin to extracting polygons from one mesh into another.</p> <p>Extract</p> <p>Move one or more rigids out of one scene, and into another.</p> <p>Move</p> <p>Move one rigid between two scenes.</p> <p>Merge</p> <p>Collapse two or more scenes into the first-selected scene.</p> <p>Constraints</p> <p>For constraints to work, both rigids must be in the same scene and currently extracting only one rigid from a constrained pair would break the constraint. In a later version, the rigid will automatically become a Passive rigid in the extracted scene, such that it can still be constrained albeit indirectly.</p> <p>This will enable you to extract parts of a simulation, like muscle and cloth, from an overall dynamic character without breaking anything.</p> <p></p>"},{"location":"releases/2021.07.02/#ignore-contact-constraint","title":"Ignore Contact Constraint","text":"<p>You can now select two rigids and say \"Hey, ignore each other, ok?\"</p> <p>Technically, this is just a constraint but with both the <code>Limit</code> and <code>Guide</code> disabled, and <code>Allow Overlap</code> kept enabled.</p> <p></p>"},{"location":"releases/2021.07.02/#bake-selected-scenes","title":"Bake Selected Scenes","text":"<p>The Bake Simulation tool now allows you to bake either all or selected scenes.</p> <p></p> <p></p>"},{"location":"releases/2021.07.02/#multi-mesh-shapes","title":"Multi-mesh Shapes","text":"<p>The <code>rdRigid</code> node has an attribute called <code>.inputMesh</code> which takes a normal Maya mesh, like a polyCube, and turns it into a volume suitable for simulation. It's also got a <code>.inputCurve</code> and <code>.inputSurface</code> attribute, to treat NURBS curves and surfaces in the same way.</p> <p>Until now, only one of these could be connected at a time. Connecting to one when another was already connected would lead to undefined behavior. In this release, the behavior is defined! If you want two meshes, you can have'm!</p> <p></p>"},{"location":"releases/2021.07.02/#edit-constraint-and-chain","title":"Edit Constraint and Chain","text":"<p>When you make a chain, attributes from rigids and constraints are mapped to the original animation control as attributes. When you then want to edit the constraint pivot of any of those constraints, it would overwrite that connection so as to make it easier/possible to edit values directly from the locators that appear representing the pivots.</p> <p>This no longer breaks your connections, at the expense of having to edit values on the original constraints instead. This will be addressed in a future release, once we get a proper manipulator in place instead of the makeshift Maya transform.</p> <p></p>"},{"location":"releases/2021.07.02/#constraints-and-focus","title":"Constraints and Focus","text":"<p>The F-key zooms and centers and object in the viewport. But trying that on constraints would have you flying through the cosmos until <code>NaN</code> appears in your channel box.</p> <p>Before</p> <p></p> <p>After</p> <p></p> <p></p>"},{"location":"releases/2021.07.02/#skinweight-painting","title":"Skinweight Painting","text":"<p>Any joint with a shape causes the right-click menu to stop working. It's typical Maya, and has been the case for years.</p> <p>Ragdoll nodes are mostly shapes of the control they drive, including joints. As a result, you weren't able to right-click on a dynamic joint to select its skinweights..</p> <p>Before</p> <p></p> <p>After</p> <p></p> <p></p>"},{"location":"releases/2021.07.02/#referenced-physics","title":"Referenced Physics","text":"<p>The previous releases tried adding any new physics added to a referenced physics scene, but was unable to! This release fixes that.</p> <p></p>"},{"location":"releases/2021.07.02/#two-users-one-machine","title":"Two Users, One Machine","text":"<p>When Ragdoll starts for the first time, a file is written into your temp-directory. The undo plug-in for <code>cmdx</code>. The file is written using the permissions of the currently logged on user and cannot be touched by anyone else.</p> <p>When another user logs in to the same machine, Ragdoll will attempt to overwrite this file but cannot! It doesn't have permission! The result is a limit of 1 user able to leverage Ragdoll per machine. And that's no good.</p> <p>This release fixes that!</p> <p></p>"},{"location":"releases/2021.07.02/#export-initialisation","title":"Export Initialisation","text":"<p>If you author physics and immediately export, without playing back, the results could be incomplete. \ud83e\udd14 The reason is that Maya only evaluates what it has to, and until you actually run the simulation a lot of things are left unevaluated. To Ragdoll, it's as if they never existed in the first place.</p> <p>This has now been fixed.</p> <p></p>"},{"location":"releases/2021.07.02/#center-of-mass-visualisation","title":"Center Of Mass Visualisation","text":"<p>With the recent upgrade and performance improvements to rendering, a small but necessary visualisation feature of the rigid bodies was the COM or center of mass.</p> <p>This has now been restored!</p> <p></p>"},{"location":"releases/2021.07.02/#something-went-wrong","title":"Something Went Wrong","text":"<p>The order in which Maya evaluates Ragdoll nodes is important, and whenever it tries doing that in some unexpected way it'll tell you.</p> <pre><code># Warning: ragdoll._on_cycle() - Something is not right!\n</code></pre> <p>The reason it happens is difficult to say. The evaluation order is something Maya dynamically generates on the first frame of your animation, and it's based on the way nodes are connected. Cycles are the most common culprit. Ragdoll cannot stand cycles.</p> <p>But another reason was discovered in this release which was that when you constrain A to B but then delete B, A is left constrained to a broken constraint. This could throw off evaluation, and break the scene.</p> <p>This particular situation has now been fixed!</p> <p></p>"},{"location":"releases/2021.07.02/#more-accurate-auto-mass","title":"More Accurate Auto Mass","text":"<p>Rigid bodies have an option to have their masses automatically computed from their initial shape. This value was 10,000x wrong, and is now roughly 1-2x wrong. It is 100% accurate for boxes, but diverges from there as it does not take into account the negative volume within its bounding box.</p> <p>Choose Density</p> <p>Be like water, my friend.</p> <p>Responds to Scale</p> <p>The computed mass will respect the size of the object, and the overall scene scale.</p> <p>Important</p> <p>Remember that large mass differences between two rigids that interact can result in instabilities.</p> <p>In the real world, an object with the density of air under a much heavier object with the density of water would crumble. However, it cannot do that here. Instead, it will bounce around and act unnaturally.</p> <p>The recommended max difference is 10x. E.g. one rigid can weigh 10 kg, whereas the other can weigh 100 kg. That's at the edge of what the solver (and the real-world) considers manageable.</p>"},{"location":"releases/2021.07.15/","title":"Launch Tweaks","text":"<p>Highlight for this release is improved Rotate Pivot support.</p> <ul> <li>FIXED Rotate Pivot Now smooth like butter!</li> <li>FIXED Re-scale Scaling after making something dynamic</li> <li>FIXED Single Joint Shapes Rare edgecase of dynamic solo joints</li> <li>FIXED Passive Constraints Another rare edgecase in complex animations now fixed</li> <li>FIXED Bake Static Rigids Annoying mistake by Mr. Baker now fixed</li> <li>FIXED Unique Names Regression from previous release, squashed!</li> <li>ADDED Scene Tolerance Support for mega-tiny and super-massive simulations</li> <li>IMPROVED Limit Visualisation Now with colors!</li> </ul> <p></p>"},{"location":"releases/2021.07.15/#rotate-pivot","title":"Rotate Pivot","text":"<p>In a previous release support for the <code>.rotatePivot</code> attribute was added. But it was only partial. It only applied to solo rigid bodies, like the one in that example.</p> <p>Once rigids form a hierarchy, things get more complex, but also more realistic. A lot of character rigs make use of it, some even going as far as to leave NURBS controls at the origin, moving the CVs to where the character is and compensating with the <code>.rotatePivot</code> to make it appear in the right place.</p> <p>This didn't gel with Ragdoll, who uses the center of a control to determine how to draw chains.</p> <p>What is this \"rotate pivot\"?</p> <p>Just so we're all on the same page, here's me creating a control by moving the rotate pivot and CVs rather than translating/rotating the node.</p> <p></p> <p>Notice how I'm not actually moving it to the hip, but rather hold the <code>D</code>-key and move the rotate pivot. Then I'm moving the CVs to where the rotate pivot is to make it both act and appear at the hip.</p> <p>Why would anyone do this?</p> <p>Hah! Yes that was my thought too!</p> <p>As you can see, to make this work you really have to work at it. My guess is this isn't something riggers do by hand but rather via scripting. Done that way, you don't really notice how odd it is.</p> <p>Either way, there are rigs out there that works like this and it shouldn't limit your use of Ragdoll.</p> <p>Next, I'll repeat this process for each of my controls.</p> <p></p> <p>Pay special attention to how all of my controls are still technically at the origin. Their rotate/translate channels are all zero.</p> <p>Let's have a look at what the current version of Ragdoll does in this situation.</p> <p>Before</p> <p></p> <p>Notice how nothing appears! That's because Ragdoll tried figuring out where to generate capsules and how large to make them based on the center of each control. But! The controls are all at the origin. They lie there, right on top of each other, with zero distance from each other.</p> <p>So Ragdoll does what it thinks you want. It generates a series of rigid bodies at the origin with 0 size. When what you really meant was for it to use the center plus this \"rotate pivot\".</p> <p>After</p> <p>This release recognises this, here's what it looks like now.</p> <p></p> <p>Win!</p> <p></p>"},{"location":"releases/2021.07.15/#re-scale","title":"Re-scale","text":"<p>Sometimes you're experimenting and aren't quite sure that the scale of an object is what you'd like it to be until you see it in action.</p> <p>Currently, whenever you make something dynamic it'll use the current scale of the NURBS curve or mesh as part of the collision geometry. But! If you change the size after making it dynamic, Ragdoll won't know about that.</p> <p>This was especially damning for geometry that needed to be tesselated, namely the <code>Mesh</code> shape type. The most convenient way of refreshing that was to edit the <code>.shapeVertexLimit</code> attribute, forcing a re-tesselation.</p> <p>That's because Ragdoll cannot know when you resize something. You have to explicitly say you did. That is, until now.</p> <p></p> <p>Caveat</p> <p>It still isn't perfect.</p> <p>Ragdoll still cannot know when you scale the object. Instead, it queries the current scale on the 1<sup>st</sup> frame of the simulation, which means it won't actually recognise a new scale until the 2<sup>nd</sup> playthrough.</p> <p>That's because once the simulation starts, the initial state is automatically set. Only then can it know that scale has changed, but by then it is too late! Simulation has already begun. So instead, the change is picked up on the next playthrough.</p> <p>Of course manually setting the initial state (via the Rigging sub-menu) or re-opening the scene will have the same effect so you really shouldn't have to struggle with this in practice.</p> <p></p>"},{"location":"releases/2021.07.15/#scene-tolerance","title":"Scene Tolerance","text":"<p>Ragdoll assumes you're working with human characters in centimeters, meaning a value of 170 means 170 cm and 0.1 cm is a small distance. If that's true, then you typically won't have to worry about \"tolerances\".</p> <p>But if you're characters are 17,000 units tall or 0.017 units short odd things start to happen.</p> <p></p> <p>Notice how it initially slides around for no apparent reason? In this case, the cube is much smaller than Ragdoll expects and we can address this by decreasing the global scene scale.</p> <p>Likewise, for very large cubes you will notice similar artifacts. For that, you'd increase the scale.</p> <p></p> <p>Currently, there exists a <code>Scene Scale</code> on the solver node, which is saved in your scene, and a <code>Scene Scale</code> in the global preferences which is not. The intention is for global scene scale to rarely change, to change alongside a studio's or project's convention, whereas the solver scene scale is more flexible.</p> <p>The default value is <code>10.0</code> but it's possible smaller values such as <code>0.1</code> is better suited. It's also possible they both belong under global preferences. Give this a try and let me know what you think.</p> <p></p>"},{"location":"releases/2021.07.15/#limit-visualisation","title":"Limit Visualisation","text":"<p>There are two kinds of limits; twist and swing.</p> <p></p> <p>Twist is great for hinge-like limits, like knees and elbows, whereas swing is great for more complex 2D limits like shoulders and hips. The current position of a rigid body in terms of swing and twist have always been drawn as a green/red line, but it could sometimes be hard to know which was which. If the red line starts out in the twist limit, then Ragdoll will promptly snap it back into the swing limit.</p> <p>This release colors the twist and swing shapes using the same colors as the current twist and swing axes, making it just a tad easier to see which belongs where.</p> <p>Before</p> <p></p> <p>After</p> <p></p> <p>Also notice how the twist axis is now confined into the twist shape itself, making it just a bit more clear how close it is to colliding with that limit.</p> <p>Here's a more complete example of a full set of constraints.</p> <p></p> <p></p>"},{"location":"releases/2021.07.15/#unique-names","title":"Unique Names","text":"<p>Prior to a recent release, all new nodes generated by Ragdoll was given a unique name. That really shouldn't matter to Maya, as nodes are distinguished by their parent. For the most part. But sometimes not!</p> <p>For example, cycle warnings produce a message only containing the name of the node itself, not its hierarchy. So you wouldn't be able to tell which of the many rigid nodes were at the root of any cycle by merely looking at this message. And don't get me started on the connection editor. It's perfectly capable of making and breaking connections, but refuses to auto-fill the currently selected nodes if they happen to have the same name as any other node in the scene!</p> <p>In any case, this has now been fixed and all nodes are once again unique. Automated tests have also been put in place to prevent this slip-up from happening again; but do let me know if you find any duplicates as Ragdoll generates a lot of nodes, and it's possible one may have yet slipped through!</p> <p></p>"},{"location":"releases/2021.07.15/#passive-constraints","title":"Passive Constraints","text":"<p>Select two rigid to create a constraint.</p> <p>But if one of those rigids was passive, or even animated between passive and active, and had a different passive animation than the initial state, and your constraint could end up like this.</p> <p>Before</p> <p></p> <p>Especially notice how the passive pose differs from the initial active pose. The active pose was used to compute how to draw the constraint, whereas the passive pose was used during the simulation.</p> <p>After</p> <p>This has now been fixed!</p> <p></p> <p></p>"},{"location":"releases/2021.07.15/#single-joint-shapes","title":"Single Joint Shapes","text":"<p>In the rare case of turning solo-joints dynamic, you could end up with results like this.</p> <p>Before</p> <p></p> <p>After</p> <p>This has now been fixed!</p> <p></p> <p></p>"},{"location":"releases/2021.07.15/#bake-static-rigids","title":"Bake Static Rigids","text":"<p>There was a bug when baking simulation for any rigid what started out passive, e.g. it was hard pinned, but animated active. The Bake Simulation command would mistake these later-simulated rigids as passive, and simply not bake them.</p> <p>This has now been fixed!</p>"},{"location":"releases/2021.07.27/","title":"Launch","text":"<p>Highlight for this release is the Launch of 1.0!</p> <ul> <li>ADDED Website Welcome aboard!</li> </ul> <p></p>"},{"location":"releases/2021.07.27/#website","title":"Website","text":"<p>Out with the old, in with the new. As they say! Ragdoll is finally here!</p> Read Announcement Try it <p></p>"},{"location":"releases/2021.07.27/#evolution","title":"Evolution","text":"<p>For the fun of it, here's a look at how the website has evolved since day 0.</p> <p></p>"},{"location":"releases/2021.07.27/#september-2020","title":"September 2020","text":"<p>Soil was fresh, seeds planted.</p> <p></p>"},{"location":"releases/2021.07.27/#january-2021","title":"January 2021","text":"<p>Flowers were blossoming, sun was shining.</p> <p></p>"},{"location":"releases/2021.07.27/#july-2021","title":"July 2021","text":"<p>Fruits were ripe, table is set.</p>"},{"location":"releases/2021.08.06/","title":"New Documentation","text":"<p>Highlight for this release is new documentation!</p> <ul> <li>META LinkedIn Keep up with the latest news by following along on LinkedIn</li> <li>ADDED Menu Documentation Less mystery, more tips and tricks</li> <li>ADDED Non-commercial telemetry Scene statistics for non-commercial users</li> <li>FIXED Add to Referenced Scene Annoying bug related to referenced physics scene</li> <li>FIXED Maya 2022.1 Ragdoll is now fully compatible with Maya 2022</li> <li>FIXED Import Physics in Maya 2022 Minor Python 3-related bug got squashed</li> </ul> <p></p>"},{"location":"releases/2021.08.06/#showcase","title":"Showcase","text":"<p>Put together this example of animating a Pinocchio-like character recently, which is trending on LinkedIn. :D</p> <p></p> <p></p>"},{"location":"releases/2021.08.06/#linkedin","title":"LinkedIn","text":"<p>The Ragdoll page on LinkedIn is getting some more attention since launch - keep refreshing that page if you'd like to stay up to date with the latest and greatest, including new version releases and cool simulations to inspire and delight.</p> <ul> <li>https://www.linkedin.com/company/ragdolldynamics</li> </ul> <p></p> <p>3,000% haha, let's see if we can keep that up!</p> <p></p>"},{"location":"releases/2021.08.06/#menu-documentation","title":"Menu Documentation","text":"<p>Items from the Ragdoll menu are getting some spotlight in the new <code>Documentation</code> section in the learning material!</p> <p>In it, you'll find basic tutorials, basic information and tips and tricks on how to use each item, such as the Active Rigid. Along with supplementary information such as Debugging Tips and details about the Cycle Protection.</p> <p>\ud83d\udc48 See new navigation to the left</p> <p></p> <p></p> <p></p>"},{"location":"releases/2021.08.06/#non-commercial-telemetry","title":"Non-Commercial Telemetry","text":"<p>Opt-in telemetry was added to Ragdoll a few releases ago via the environment variable <code>RAGDOLL_TELEMETRY</code>. This behavior is now default for Trial and Personal licences of Ragdoll, and remains opt-in for Complete and Unlimited licences.</p> <ul> <li>See details</li> </ul> <p></p>"},{"location":"releases/2021.08.06/#bug-fixes","title":"Bug Fixes","text":"<p>The following bugs were harmed in the making of this release.</p> <p></p>"},{"location":"releases/2021.08.06/#add-to-referenced-scene","title":"Add to Referenced Scene","text":"<p>A minor but critical bug was discovered whereby you couldn't add a new rigid body to a referenced Ragdoll scene. It had to do with Ragdoll needing to know which scenes are present whenever a new rigid is made, something it keeps track of by listening to an event for \"Maya Open Scene\". But this wasn't triggered for \"Reference Scene\" which led to some confusion.</p> <p>This has now been fixed!</p> <p></p>"},{"location":"releases/2021.08.06/#maya-20221","title":"Maya 2022.1","text":"<p>Finally that service pack was released for Maya, addressing a critical but which led many users to experience fatal crashes when attempting to delete rigids from their scene.</p> <p>This has now been fixed (by Autodesk!).</p> <p></p>"},{"location":"releases/2021.08.06/#import-physics-in-maya-2022","title":"Import Physics in Maya 2022","text":"<p>A Python 3-related error was discovered in Maya 2022, meaning you couldn't use the UI to browse for Ragdoll files. :(</p> <p>This has now been fixed!</p> <p></p>"},{"location":"releases/2021.08.28/","title":"New Tutorials","text":"<p>Highlight for this release is new tutorials!</p> <ul> <li>ADDED Tutorials Three new tutorials covering basics up to anatomical correctness!</li> <li>ADDED Pivot Editor Faster wheels and knees with this new UI</li> <li>ADDED Personal UI More accurate licence information in the Ragdoll UI</li> <li>ADDED Social Media We're everywhere now!</li> <li>FIXED Worldspace Trajectories Now drawn correctly, in worldspace</li> <li>FIXED Sphere Rendering Minor tweak to the look of the <code>Sphere</code> shape type</li> <li>FIXED Floating Server Details Minor bug fix for floating licence users</li> </ul> <p></p>"},{"location":"releases/2021.08.28/#new-tutorials","title":"New Tutorials","text":"<p>Three new tutorials from basics to intermediate, with more to come!</p> <p></p>"},{"location":"releases/2021.08.28/#bouncing-ball","title":"Bouncing Ball","text":"<p>Learn the fundamentals of Ragdoll in this classic animation tutorial. </p> <p></p> View Tutorial <p></p>"},{"location":"releases/2021.08.28/#rally-car","title":"Rally Car","text":"<p>Build upon the skills learnt with a bouncing ball to combine several rigids into a car (with an engine!)</p> <p></p> View Tutorial <p></p>"},{"location":"releases/2021.08.28/#manikin","title":"Manikin","text":"<p>Construct a full ragdoll from any rig, even your own custom one!</p> <p></p> View Tutorial <p></p>"},{"location":"releases/2021.08.28/#personal-ui","title":"Personal UI","text":"<p>The Licence Window at the bottom of the Ragdoll menu now accurately displays your current licence, including Personal, Complete, Unlimited and Batch, along with the licence type - <code>Floating</code> or <code>Node Locked</code>.</p> <p></p> <p></p>"},{"location":"releases/2021.08.28/#social-media","title":"Social Media","text":"<p>Can you believe it. A clear sign of success, not everyone is on Twitter! If you're one of the lucky few, you can now follow along with updates to the project, documentation and general company news from there!</p> <ul> <li>https://twitter.com/ragdolldynamics</li> <li>https://facebook.com/ragdolldynamics</li> <li>https://reddit.com/user/ragdolldynamics</li> <li>https://youtube.com/c/RagdollDynamics</li> </ul> <p>The only question is, who's going to be the first to follow? \ud83d\ude31</p> <p></p> <p></p>"},{"location":"releases/2021.08.28/#pivot-editor","title":"Pivot Editor","text":"<p>In making he tutorials, the main bottleneck in terms of time taken was editing constraints. They are both complex and difficult to manage.</p> <p>This release addresses this problem with the Pivot Editor GUI.</p> <p></p>"},{"location":"releases/2021.08.28/#basics","title":"Basics","text":"<p>Here's how to use it to tune a broken knee.</p> <p></p> <p></p>"},{"location":"releases/2021.08.28/#spin-swap","title":"Spin &amp; Swap","text":"<p>One of the main reasons to want to edit constraint pivots is to align the Twist axis with the main rotation of a knee or elbow. </p> <p></p> <p></p>"},{"location":"releases/2021.08.28/#mirror","title":"Mirror","text":"<p>If the pivots face in opposite directions, orientations can be un-mirrored with the <code>Mirror</code> option.</p> <p></p> <p></p>"},{"location":"releases/2021.08.28/#channel-box-co-op","title":"Channel Box Co-op","text":"<p>Tuning limits alongside pivots works well too, middle-click drag attributes from the Channel Box like you normally would, whilst dragging in the UI to compensate.</p> <p></p> <p></p>"},{"location":"releases/2021.08.28/#snap","title":"Snap","text":"<p>Use the snap option to make precise adjustment to specific angles.</p> <p></p> <p></p>"},{"location":"releases/2021.08.28/#worldspace-trajectories","title":"Worldspace Trajectories","text":"<p>Trajectories used to follow the scene wherever it went. Now they'll stay put, where they belong.</p> <p>Before</p> <p></p> <p>After</p> <p></p> <p></p>"},{"location":"releases/2021.08.28/#sphere-rendering","title":"Sphere Rendering","text":"<p>This fixes a minor annoyance you may have noticed, of the outline of spheres visible in shaded mode.</p> <p>Before</p> <p></p> <p>After</p> <p></p> <p></p>"},{"location":"releases/2021.08.28/#floating-server-details","title":"Floating Server Details","text":"<p>When you first lease a licence from your licence server, the IP and port details are stored on the local machine for quicker access the next time.</p> <p>However, if you then later needed to change those details, then any local machine previously leasing a licence would not be able to update their details.</p> <p>This has now been fixed!</p>"},{"location":"releases/2021.09.27/","title":"Animation Capture pt. 1/4","text":"<p>Highlight for this release is Animation Capture.</p> <ul> <li>ADDED Animation Capture AnimCap, a.k.a. Reverse Motion Capture</li> <li>ADDED Self-Collision Overlapping shapes, begone</li> <li>ADDED Lollipop Controls Clarity where there was none</li> <li>IMPROVED Quality of Life Less clutter, more joy</li> <li>IMPROVED No Graph Editor Mess Clean Graph Editor, clean mind</li> <li>IMPROVED No More Cycles Clean Graph Editor, clean mind</li> <li>IMPROVED No Initial State Less is more</li> <li>FIXED Multiple Floating Licences Now behaves as one would expect</li> </ul> <p></p>"},{"location":"releases/2021.09.27/#showcase","title":"Showcase","text":"<p>Let's start with some eye-candy, thanks to Jason Snyman for the gorilla rig! :)</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"releases/2021.09.27/#introduction","title":"Introduction","text":"<p>Lighter, faster, stronger. This release introduces a new way of thinking about physics, and is part \u00bc.</p> <ul> <li>Skip Intro</li> </ul> # Release Date Description 1 Workflow Today At least 100% faster, but primarily much easier to work with 2 Render Performance 2 weeks later The current bottleneck, expect a 50-100x boost 3 Recording Performance 2 weeks later Currently written in Python, to be written in optimised C++ 4 Interactive Tools 2 weeks later No more fiddling with offsets in the channel box, viewport manipulators galore! <p>Something amazing has happened.</p> <p></p> <p>Since release only a few weeks ago, Ragdoll is now used in production across the globe in over a dozen countries at the most major of studios, several dozens of mid-sized studios wanting to gain an advantage and hundreds of independent animators and riggers alike.</p> <p>And that is amazing, it is. But something even more amazing has happened; Ragdoll has leaped forward. And that will be what the next 4-part release is about.</p> <p>See, since launch I've had conversations with animators using Ragdoll for the very first time. One of those animators made a request that at first glance didn't look like much.</p> <p>Quote</p> <p>\"I don't like working with green channels, as it is not ideal for animating. Is there a way to I can overcome this?\" - Christopher Page</p> <p>Here's what he was referring to.</p> <p></p> <p>Notice how the nodes with physics applied got green channels? The reason they are green is because Ragdoll is driving them. They are green rather than yellow because you can still edit them, at the same time as Ragdoll is editing them. Your changes will be reflected in the simulation, this is how you control the simulation as it is running.</p> <p>Can we get rid of that connection? Well.. No? This is Ragdoll's connection to your controls. Without those.. there is no physics.</p> <p>I quickly dismissed the idea and carried on with my day.. But then something clicked.. What if..?</p> <p></p> <p>In the next section, I'll dive into how this works and why this change goes far beyond just getting rid of green channels.</p> <p>Benefits at a glance</p> <ul> <li>\u2714\ufe0f 10,000% greater performance (or more!)</li> <li>\u2714\ufe0f No more graph editor mess</li> <li>\u2714\ufe0f No more initial state</li> <li>\u2714\ufe0f No more cycles</li> <li>\u2714\ufe0f No more clutter in the Outliner</li> <li>\u2714\ufe0f No more clutter in the Viewport</li> <li>\u2714\ufe0f Support for interactive scale</li> <li>\u2714\ufe0f Support for overlapping shapes</li> <li>\u2714\ufe0f Support for IK/FK</li> <li>\u2714\ufe0f Support for space switching</li> <li>\u2714\ufe0f Support for follicles</li> <li>\u2714\ufe0f Support for native Maya constraints</li> <li>\u2714\ufe0f Support for ...</li> </ul> <p>From here, this list has no end, because anything capable of affecting the worldspace position and orientation of your controls is natively supported with this workflow. Anything.</p> I'm a techy, gimme the deets <p>The reason this works is because Ragdoll will consider the <code>.worldMatrix</code> attribute of any control and this is the same attribute Maya itself uses for just about anything.</p> <p></p>"},{"location":"releases/2021.09.27/#animation-capture","title":"Animation Capture","text":"<p>Inspired by Motion Capture - Animation Capture is a new way to think about and work with physics in Maya. To learn about it, let's first understand how Motion Capture generally works.</p> <p></p> <p>Here is a typical data pipeline for motion capture, from real-life actor to final character animation.</p> # Description 1 Markers are attached to an actor 2 Markers are \"captured\" 3 A pointcloud is generated 4 A hierarchy of joints is generated 5 Joints drive a typical character rig 6 Rig drives final geometry for render <p>Each \"marker\" is a dud. Nothing of any complexity. Something for the camera(s) to recognise and track as it moves through space. Once tracked, it's able to translate this marker from a 2D image into a 3D position, and continues to do so for each marker, for the real processing to take place inside software.</p> <p>Once the capture is complete, the human actor can remove the markers and go enjoy the rest of their day. The rest is up to the computer.</p> <p>With 3D positions generated, software takes over to translate these points into a hierarchy; the FK joint hierarchy you may be familiar with if you've ever worked with mocap. The joint hierarchy can then be used to either drive the final geometry, or to drive a more complex character rig which in turn drives the final geometry.</p> <p>Animation Capture is just like that, but in reverse. Instead of capturing a person, it captures your character rig.</p> <p></p> # Description 1 Markers are attached to a character rig 2 Markers are \"captured\" 3 A rigid is generated for each marker 4 A hierarchy of constraints is generated 5 Simulation is recorded back onto the original character rig <p>Unlike motion capture, we'd like the result mapped back onto our character rig again, which is how animators iterate with physics.</p> <p></p>"},{"location":"releases/2021.09.27/#demo-1-basics","title":"Demo 1 - Basics","text":"<p>Ok, enough prelude, let's dive in.</p> <p>Before</p> <p>Here's what life was like before, with <code>Active Rigid</code>.</p> <p></p> <p>After</p> <p>And here's life with <code>Markers</code>.</p> <p></p> <p>Notice how the channels are left alone?</p> <p>This is the key difference between <code>Marker</code> and <code>Rigid</code>. Although you still provide Ragdoll with controls, Ragdoll no longer drives your controls directly. Instead, it shows you what they would look like if they were driven with physics.</p> <p>Once you're happy with what you see, you <code>Record</code>.</p> <p></p> <p></p>"},{"location":"releases/2021.09.27/#demo-2-ragdoll","title":"Demo 2 - Ragdoll","text":"<p>Let's have a look at how <code>Markers</code> work with a full ragdoll.</p> <p>1. Setup hierarchy</p> <p>The first step is nothing new, you've seen it before.</p> <p></p> <p>2. Edit shapes</p> <p>This too, it's second nature by now.</p> <p></p> <p>Except!</p> <p>Notice how the shapes overlap? That's ok! No longer will you have to worry about self-intersecting shapes. Unless you want it to, with the new <code>Self Collide</code> attribute. :D I'll touch on this a bit more below, under #self-collide</p> <p>Double Except!</p> <p>Release 4/4 in this series will deal with the channel box, and make editing these values interactive in the viewport for a superior experience and a lot less clicks and fiddling with numbers.</p> <p>3. Animate</p> <p>Now things are getting interesting. To keep our viewport clean, we can offset the simulation slightly. The offset is purely visual and won't affect the simulation or subsequent recording.</p> <p></p> <p>4. Record</p> <p>Finally, and this is what separates <code>Markers</code> from <code>Rigids</code>, we record our simulation back onto our controls.</p> <p></p> <p></p>"},{"location":"releases/2021.09.27/#demo-3-inverse-kinematics","title":"Demo 3 - Inverse Kinematics","text":"<p>That last example was contrived. No rig is without IK, so how does <code>Markers</code> work here?</p> <p>1. No IK</p> <p>Since we put markers on the FK controls, Ragdoll doesn't know about what the IK controls are doing.</p> <p></p> <p>2. Reassign</p> <p>So let's put markers on the joints driven by both IK and FK, such that when you switch between the two, Ragdoll knows how to follow along. So let's <code>Reassign</code>.</p> <p></p> <p>3. Retarget</p> <p>But recording still targets our original FK controls, and what we want is to record our IK controls. So we can <code>Retarget</code>.</p> <p></p> <p>4. Record Translation</p> <p>Unlike FK, IK isn't just rotation, but translation too. So let's tell Ragdoll to record the translation from these markers too.</p> <p></p> <p>And there you have it! This works with IK, SpineIK, Follicles, Geometry Constraints; anything you can throw at it.</p> <p></p>"},{"location":"releases/2021.09.27/#demo-4-real-world-example","title":"Demo 4 - Real World Example","text":"<p>Here's a work-in-progress animation from Christopher Page (thanks for lending it to me!) Let's see how we can use Ragdoll to help improve upon it.</p> <p>1. The Problem</p> <p>Notice how the elbow intersects the table as he moves his torso around? A difficult problem and moving target as you need to keep tweaking both the torso and hand IK handle to tune your animation.</p> <p></p> <p>2. Isolate Timeline</p> <p>Since this animation is over 600 frames, we'll isolate our work to a small portion of it. For both performance and cleanliness; Ragdoll will only record onto the current timeline (or selected portion of it).</p> <p></p> <p>3. Assign Markers</p> <p>Like before, we'll assign markers to the underlying skeleton to respect what the IK solver does. We'll also make the hand <code>Kinematic</code> to respect the original animation exactly. The clavicle is also <code>Kinematic</code> per default, as it was the first assigned control - and is thus the \"root\" of our dynamic hierarchy.</p> <p></p> <p>4. Include Table</p> <p>Since we're interacting with the table, we'll include this too. Also <code>Kinematic</code>, no dynamics will be affecting it, and also as a <code>Box</code> shape to speed up and improve the stability of the simulation.</p> <p></p> <p>5. Tune Shapes</p> <p>Next we'll isolate contacts with just the elbow area, to respect the hand and lower arm animation.</p> <p></p> <p>6. Tune Material</p> <p>In this case, we'd like for the elbow to slide across the table, no friction.</p> More Realism? <p>In the real world, there would be friction and it could come in handy here too. But what should we expect from the elbow rubbing against the table? We should include the torso for this as well, which you absolutely can (and maybe should!). But to keep things simple, we'll let the clavicle preserve it's original animation exactly.</p> <p></p> <p>7. Retargeting</p> <p>Ragdoll will record onto the nodes you originally assign, but like before we want recording to go elsewhere; from joints to IK controls.</p> <p></p> <p>8. Record Translation</p> <p>Likewise, we'd also like translation included. And we don't care for the shoulder and clavicle animation; all we want is the IK handle and Pole Vector.</p> <p></p> <p>9. Record Simulation</p> <p>We're all set! Let's hit <code>Record</code>!</p> <p></p> <p>10. Before And After</p> <p>And there we go! 2 minutes or less, and you've got a reusable setup for correcting the elbow whenever the animation changes. IK is intact and you can keep working with keyframes. Keeping Ragdoll attached to your rig has zero impact on performance (as you can see by looking at the fps counter near the bottom of the two comparisons), and once hidden it has no impact on your Outliner either. All clean!</p> <p></p> <p>Here's one more I couldn't find room for, an earlier version of the animation with stepped keys and finger simulation. Look at all that juicy finger interaction with the table. \ud83d\ude0a</p> <p></p> <p>Rig and Model courtesy of Ramon Arango - Apollo Rig</p> <p></p>"},{"location":"releases/2021.09.27/#new-menu","title":"New Menu","text":"<p>Let's take a moment to reflect on what we've just seen. There are 3 new nodes in Ragdoll.</p> # Node Description <code>rdSolver</code> The \"camera\" that monitors \"Markers\" and performs all heavy-lifting. <code>rdMarker</code> A tracking marker, something to monitor an individual control. <code>rdGroup</code> A collection of markers, with high-level control over many markers. <p>Here's the new menu. If all goes well, it will completely replace the <code>Active Rigid</code> and <code>Active Chain</code> menu items, along with <code>Controls</code> including <code>Mimic</code>. All of those things are made possible in a much easier and performant way using Markers.</p> <p></p> <p>The most important elements are at the top.</p> # Item Description <code>Assign Single</code> Monitor a single object in the Maya scene. Use this for props, environment and other free-falling things. <code>Assign Group</code> Monitor a series of connected objects, like a limb. <code>Record</code> Transfer simulation to marked objects <p>Like <code>Active Chain</code>, the order of selection determines the order in which markers assume your objects are connected. And adding more markers to a group is done by starting your selection from any point in an existing group and working your way outwards. Just like <code>Active Chain</code>.</p> <p>Limitations</p> <p>You currently cannot create multiple <code>rdSolver</code> nodes, but can work around it by importing one from another Maya scene file.</p> <p>The <code>Guide Space</code> is somewhat complicated. The group has one too that affects all markers, and per default it's set to <code>-1</code> for <code>Localspace</code>. The benefit is that you can quickly change the space for all markers by changing this one attribute. The downside is that if you want to change it for just one marker, you first need to reset this attribute to <code>0</code>.</p> <p>These will be addressed in the upcoming few releases.</p> <p></p>"},{"location":"releases/2021.09.27/#recording","title":"Recording","text":"<p>Markers can be recorded all together, or independently. For example, say you wanted animation from frame 1-100, simulate 101-150 and return to animation from 151-200. You can do that.</p> <p>Furthermore, say you liked what the simulation was doing, but only on one half of the body. Or only on the hip, driving the main trajectory in a physically-plausible way. Keeping the rest of your animation intact.</p> <p>Record All</p> <p>With nothing selected, Ragdoll will record all marked controls to the current Maya playback range.</p> <p></p> <p>Record Selected Markers</p> <p>Select a few controls to control what gets recorded.</p> <p></p> <p>Record Range</p> <p>Limit the Maya playback range for control over when recording takes place.</p> <p></p> <p>Record Selected Range</p> <p>Or, select an explicit range interactively.</p> <p></p> <p>Intelligent Range</p> <p>A <code>Kinematic</code> marker is entirely animated, so there's no need to actually record those. Ragdoll will ensure only non-kinematic frames are recorded, so you can do things like this.</p> <p></p> <p>Record to Animation Layer</p> <p>Ragdoll will record to whichever layer is currently active.</p> <p></p> <p></p>"},{"location":"releases/2021.09.27/#input-type","title":"Input Type","text":"<p>In the above examples, I mentioned <code>Kinematic</code> and you probably spotted a few other options too, like <code>Inherit</code> and <code>Guide</code>. What are those?</p> <p>The <code>Input Type</code> is how Ragdoll should interpret the controls you assign. Did you mean for them remain animated, i.e. <code>Kinematic</code>? Or should they follow the control around, i.e. <code>Guide</code>? Or should they just fall with gravity, ignoring the original control altogether, i.e. <code>Off</code>?</p> <p>The <code>Input Type</code> can be set either for a whole group of markers, or each marker individually.</p> Type Description Inherit Do whatever the group is doing, or <code>Kinematic</code> if there is no group Off Do nothing, just fall under gravity Kinematic Follow the input exactly, physics need not apply Guide Follow the input approximately, with some <code>Stiffness</code> and <code>Damping</code> <p>Off</p> <p>Treat the input as a starting position, but nothing else.</p> <p></p> <p>Kinematic</p> <p>Follow the input exactly, no exceptions. Not even collisions.</p> <p></p> <p>Guide Space -1</p> <p>Follow the local angles of the input.</p> <p></p> <p>Guide Space +1</p> <p>Follow the world position and orientation of the input.</p> <p></p> <p></p>"},{"location":"releases/2021.09.27/#retarget","title":"Retarget","text":"<p>We've talked a lot about \"retargeting\". But what is that?</p> <p>Per default, markers are recorded onto the controls you assigned, this is called <code>Rig to Rig</code>.</p> <p></p> <p>But often times, rigs are more complicated and what you want is for the simulation to look at one set of nodes, but record onto another. This is called <code>Joint to Rig</code>, but can be from any source. Even other controls (like FK to IK).</p> <p></p> <p>The Old Days</p> <p>Think about how you would accomplish this using the <code>Active Rigid</code> or <code>Active Chain</code> commands. That would be a huge pain, but not with markers!</p> <p></p>"},{"location":"releases/2021.09.27/#reassign","title":"Reassign","text":"<p>Over in Demo 2 - Ragdoll we \"reassigned\" already marked controls. What does that mean?</p> <p>In that example, we've assigned our FK controls directly, which means Ragdoll would grab the translation and rotation from those controls during simulation. But what we really wanted was the IK controls.</p> <p>But! We couldn't just assign to the IK controls directly, since they are indirectly rotating a characters limbs. So instead, we <code>Reassign</code> the markers previously made onto the underlying joints that follow IK around.</p> <p>We then also <code>Retarget</code> them, since they would have otherwise been recorded onto the original FK controls.</p> <p></p>"},{"location":"releases/2021.09.27/#reparent","title":"Reparent","text":"<p>Sometimes, you change your mind.</p> <p></p> <p>Success!</p> <p></p> <p></p>"},{"location":"releases/2021.09.27/#guide-space","title":"Guide Space","text":"<p>Now let's talk about a few things you haven't seen yet.</p> <p></p> <p>Look, it's Ragdoll Blaine!</p> <p>So what's happening here? Well, it looks like a Soft Pin to his head, along with a slight <code>Guide Strength</code> on the rest of his body. But unlike the <code>Rigid</code>, another significant advantage to <code>Markers</code> is their ability to capture both local and worldspace position and orientation of your controls. And because of this, you are able to interactively choose whether a marker should look at the Worldspace or Localspace position of your controls.</p> <p></p> <p>Notice how with a <code>Guide Space = -1</code> the controls arms remain relative the torso. And with <code>Guide Space = 1</code> they instead follow the worldspace orientation of the controls. Just like a Soft Pin.</p> <p>This attribute is also animatable, and is how you can transition from animation into simulation and back again.</p> <p></p> <p>Here's a more complete example:</p> <p></p> Frame Transition 100 Starts as a regular animated character 125 Transitions into physics as he jumps, for a physically-correct trajectory 155 Transitions back to animation once he rolls over on that cabinet 160 Transitions back to physics until he stands up 170 Transitions back into animation to match an exact pose 200 Partially transitions into physics, for secondary motion in the upper body as his arm is raised. <p></p>"},{"location":"releases/2021.09.27/#transitions","title":"Transitions","text":"<p>Let's have a look at how you would use markers to transition between simulation and animation.</p> <p></p> <p>Notice how we're animated up until the jump, and then Ragdoll takes over. Once he approaches that box, we turn our <code>Guide Space</code> from <code>-1</code> to <code>1</code> and have him reach the target pose in worldspace. Once he's close, we switch <code>Input Type</code> to <code>Kinematic</code> and kinematically move him until we once again transition to <code>Guide</code>, this time with a <code>Guide Space</code> or <code>-1</code> for pose space.</p> <p></p> <p></p>"},{"location":"releases/2021.09.27/#self-collision","title":"Self Collision","text":"<p>Previously, it was very important that your shapes did not overlap any shape other than it's immediate neighbour. If they did, chaos ensued.</p> <p>Before</p> <p>Clavicles intersect their parent spine, but also each other!</p> <p></p> <p>After</p> <p>With the new <code>Self Collision = Off</code>, this is no longer a problem.</p> <p></p> <p>This can be taken into the extreme!</p> <p></p> <p>And here's a another example to fill out a large volume in the center of a character.</p> <p></p> <p>Attention</p> <p>Notice how the spine is made up of many shapes, some of which cover the width of the body, others the depth. An overlapping mess that would never have simply not have been possible without self-collision support!</p> <p></p> <p>Original asset created by Mehmet Tayfur T\u00fcrkmeno\u011fluwe and Dr. Reel, licensed by The Rookies.</p> <p></p>"},{"location":"releases/2021.09.27/#no-graph-editor-mess","title":"No Graph Editor Mess","text":"<p>Because <code>Rigids</code> were children of your controls, Maya had a funny way of including them in the Graph Editor that rightly drove animators, myself included, absolutely mad.</p> <p>Before</p> <p>Just look at this; why-oh-why would I want channels from a completely unrelated node when working with the hip?</p> <p></p> <p>After</p> <p>Contrast that to this, whereby only the nodes you actually select are made visible. You can even select <code>Markers</code> via the Channel Box and deselect your controls to get up real close.</p> <p></p> <p></p>"},{"location":"releases/2021.09.27/#no-initial-state","title":"No Initial State","text":"<p>A significant effort was made to make the simulation start where you expected it to.</p> <p>Under the hood, simulation and animation were at odds with one another. Ragdoll needed to know where to start, but it was also telling your controls where to start. It's an inherent cycle, which was finally broken.</p> <p>Read More</p> <p>You can read all about the month-long journey in the release notes from March</p> <p>Nowadays, you barely have to think about it, but it does occasionally rear its ugly head. It is a hack.</p> <p>With <code>Markers</code> there isn't any cycle to begin with. Ragdoll only reads from your controls, it doesn't write to anything. Under the hood, recording is a 2-step process; first it simulates, and then it writes animation back onto the controls. That's how this cycle is broken, without having any effect on the overall workflow.</p> <p></p>"},{"location":"releases/2021.09.27/#no-more-cycles","title":"No More Cycles","text":"<p>With the previous version, because <code>Rigids</code> both read and wrote to each control, you could sometimes run into a situation where the parent depends on a child.</p> <p>Before</p> <p>Here, I'll try and make a second chain in the opposite direction of how the controls are laid out hierarchically. This cannot work; because in order for Ragdoll to figure out where the Passive hand should be, it would first need to consult the upper arm, which is both dynamic and a child of the spine, which is also dynamic. It's a lovely cycle. \u2764\ufe0f</p> <p></p> <p>After</p> <p>With <code>Markers</code>, this isn't a problem because to Ragdoll every limb can now be independently evaluated, in parallel.</p> <p></p> <p></p>"},{"location":"releases/2021.09.27/#lollipop-controls","title":"Lollipop Controls","text":"<p>Sometimes, markers are added to an already busy control with tons of Channel Box entries. Lollipop controls can help organise things a little better.</p> <p></p> <p>These can be moved around and scaled to suit your needs, and will provide access to the same marker node in the channel box, so you can select and edit the marker from either the originally marked control or this lollipop control.</p> <p></p>"},{"location":"releases/2021.09.27/#rotate-pivot","title":"Rotate Pivot","text":"<p>Use the default Maya rotate pivot to control where to pin a simulation, both in worldspace and localspace.</p> <p></p> <p></p> <p>Attention</p> <p>Take care about scale, especially the scale pivot. Ragdoll can sometimes struggle when the scale pivot differs from the rotate pivot. This will be addressed in a future release.</p> <p></p>"},{"location":"releases/2021.09.27/#quality-of-life","title":"Quality of Life","text":"<p>Some minor things to brighten your day.</p> <p></p>"},{"location":"releases/2021.09.27/#real-ground","title":"Real Ground","text":"<p>With <code>Rigids</code>, the ground was embedded into the scene. With <code>Markers</code>, an actual ground is created to for more stability and more control over its physical parameters. Something that can also be animated, and that dynamically appears right underneath your markers.</p> <p></p> <p></p>"},{"location":"releases/2021.09.27/#joints-and-the-attribute-editor","title":"Joints and the Attribute Editor","text":"<p>The Attribute Editor doesn't show you <code>Rigids</code> related to Maya joints because of a Maya UI quirk.</p> <p>With <code>Markers</code>, this is no longer a problem!</p> <p></p> <p></p>"},{"location":"releases/2021.09.27/#hidden-solver","title":"Hidden Solver","text":"<p>Hiding the solver completely removes all overhead of having Ragdoll in your scene. Previously, with <code>rdScene</code> and <code>rdRigid</code>, because they were directly connected to your controls, hiding things made little difference. But now, because we no longer have this direct connection, all computations come from explicitly seeing the <code>rdSolver</code> node.</p> <p>No visible <code>rdSolver</code> node, no computations. Period.</p> <p></p>"},{"location":"releases/2021.09.27/#enhanced-determinism","title":"Enhanced Determinism","text":"<p>TLDR</p> <p>Sometimes, re-opening the scene could lead to different results. This has now been fixed.</p> <p>Each time you play a simulation starting from the beginning, the results are the same. This is an important characteristic of any simulation and is called \"determinism\". It used to be the case however that when you re-opened the scene, there was a small chance the results would differ from when you last saved it.</p> <p>This has now been fixed. The determinism is now dependent on the order in which rigid bodies connect to the <code>rdSolver</code> node. It's an array attribute, whose order is saved with the Maya scene.</p> <p></p>"},{"location":"releases/2021.09.27/#multiple-floating-licences","title":"Multiple Floating Licences","text":"<p>Whenever a machine connected to your floating licence server, the host and IP were stored on the machine in an effort to speed up subsequent connections made. However, this also meant that you weren't able to update those details.</p> <p>Despite providing new details, Ragdoll would favour the already-stored details. Worse yet, the Ragdoll UI would lie to you, by repeating the connection details provided in the <code>RAGDOLL_FLOATING</code> environment variable, despite those not actually being used.</p> <p>This release addresses this by always using the details you provide, and not bother reusing any previously provided details. In addition, you now have the option to explicitly query and set server details directly.</p> <pre><code># Will query the *actual* server used by Ragdoll, rather\n# than return the environment variable you provided\ncmds.ragdollLicence(getServer=True)\n\n# Will manipulate the currently-in-use key, meaning it will\n# try and drop a licence from this address as well\ncmds.ragdollLicence(setServer=(\"localhost\", 1313))\n</code></pre> <p></p>"},{"location":"releases/2021.09.27/#next-release","title":"Next Release","text":"<p>This release is part \u00bc, for next 2/4 release you can expect Performance Improvements.</p> <p>In this release, simulation and overall Maya scenegraph performance has seen a 200x performance boost, the performance is already there. You'll notice it as you try them on your rigs.</p> <p>However, rendering performance has dropped significantly, cancelling out most of that performance gain. Here's what performance looks like now.</p> <p></p> <p>Rendering mostly Maya default shading, rendeing its own things. Unrelated to Ragdoll. The Rig Evaluation on the other hand is almost entirely Ragdoll. It's connected to every control in this rig, forcing each control to be evaluated in serial; one after the other.</p> <p>Here's what it looks like with <code>Markers</code>.</p> <p></p> <p>Notice the huge pile of lines to the left? Those are all running parallel and almost entirely default Maya evaluations; things your rig would do without Ragdoll. Rendering on the other hand is almost entirely Ragdoll, it is very slow.</p> <p>To properly compare performance between <code>Rigids</code> and <code>Markers</code>, here's what you should be looking at.</p> <p></p> <p>This is the only thing Ragdoll does to your rig. This is the entire overhead, the added load onto your rig. 16 microseconds. That's <code>0.016 ms</code>. For a rig to run at 30 fps, it'll need <code>1,000/30 = 33 ms</code> per frame. This overhead, <code>0.016 ms/frame</code> is all Ragdoll needs to solve an entire character, contacts and constraints and forces, all of it. In this particular profiling, that's 430x faster than <code>Rigids</code>, which not only took longer to solve but made everything else slower by just being connected to your controls.</p> <p>So how about we get this rendering performance sorted, shall we?</p> <p></p>"},{"location":"releases/2021.09.27/#limitations","title":"Limitations","text":"<p>These are some of the things lacking from <code>Markers</code> in this release that we'll be working on for subsequent releases.</p> <ul> <li>Selecting rigids interacively</li> <li>Manipulating shapes interactively</li> <li>Manipulating constraints interactively</li> <li>Toggle between previous animation and recorded simulation</li> <li>Support for recording onto an animation layer</li> <li>No \"live-mode\", where physics drives a control interactively</li> <li>Markers cannot be exported</li> <li>Markers cannot have additional constraints</li> </ul>"},{"location":"releases/2021.10.07/","title":"Animation Capture pt. 2/4","text":"<p>Highlight for this release is Performance, and is part 2/4 of the new Markers.</p> <ul> <li>ADDED Performance Less work, greater parallelism and more GPU</li> <li>ADDED Overlap Groups Fine control over what overlaps with what</li> <li>ADDED Asleep Start simulating on first contact</li> <li>ADDED Ignore Gravity Because sometimes, you don't want to play by the rules</li> <li>ENHANCED Quality of Life Automated clean-up, support for Z-up and more!</li> </ul>"},{"location":"releases/2021.10.07/#showcase","title":"Showcase","text":"<p>You know the drill, we'll start with some eye candy. \ud83c\udf6c</p> <p>New Shading</p> <p>Now more like actual candy. Nom nom nom!</p> <p></p> <p>Raining Ragdolls</p> <p>Quick! Get inside!</p> <p></p> <p>Do the Robot</p> <p>Model and Rig courtesy of Amedeo Beratta</p> <p></p> <p></p> <p>Vehicular Render</p> <p>Made by @tris</p> <p></p> <p>Guide Space Mania</p> <p>Oh the trickery you can get up to. \ud83e\udd73</p> <p></p> <p></p>"},{"location":"releases/2021.10.07/#anniversary","title":"Anniversary","text":"<p>That's right! Ragdoll turned 1 this week! \ud83e\udd73</p> <p></p> <p>In my original business plan, I had written..</p> <p>\"Revenue, year 1: \u00a320,000\"</p> <p>..which was blissfully optimistic. However! I'm happy to say that Ragdoll blew past this in the first 6 days into launch, on the 28<sup>th</sup> of July this year. Very few startups achieve this amount of revenue in year 1; the vast majority achieve \u00a30 for the first number of years (I watch a lot of Dragon's Den \ud83d\ude05), the expectation being that they will regain their investment once enough value has been created. But given we're past this point already, this to me is validation that you want this.</p> <p>So, let's keep it going, shall we? :)</p> <p></p>"},{"location":"releases/2021.10.07/#manikin-rig","title":"Manikin Rig","text":"<p>Throughout these notes, I'll be using this guy here. Feel free to download and play around with it.</p> Download Manikin <p></p> <p></p>"},{"location":"releases/2021.10.07/#performance","title":"Performance","text":"<p>This release was all about performance, so how did we do?</p> <p>In short, very well! We're now a lot closer to the capabilities of your hardware with a lot less waste. Because you see, software development is a lot like Jenga. You start off with a tower full of bricks, but every brick adds to the overall weight of the tower. And not every brick is necessary to keep it standing. The Eiffel Tower is an example of what a structure can look like with the absolute minimal amount of material. It is an optimal shape; anything added is wasted weight, anything removed would sacrifice stability. That is the structure we've been working towards with this release.</p> <p>In terms of time spent, Ragdoll has three stages.</p> # Stage Description 1 <code>Evaluation</code> This is primarily your character rig - the transform hierarchy, constraints, any deformers, and so forth. It is how data is passed from Maya into Ragdoll. 2 <code>Simulation</code> Once data has been aquired, Ragdoll considers all of it and applies forces, solves constraints, contacts, that kind of thing. 3 <code>Rendering</code> Finally, we need pixels. In the case of Ragdoll, this means generating and uploading geometry to the GPU; including capsules but also your meshes which are converted into \"convex hulls\". <p>Simulation has always been fast and in the previous release, we focused entirely on workflow which had an indirect impact on <code>Evaluation</code> and <code>Rendering</code>. One got faster, but the other got slower.</p> <p></p> <p>Changes in Part \u00bc</p> <p>Let's recap what happened in the previous release.</p> <p>We tackled Evaluation which boosted performance by 2-10x by unlocking parallelism. Before, the better your character rig benefited from multithreading the worse it would perform with Ragdoll. Ragdoll would force any control you simulated into serial evaluation - to compute one after another - because the solver was fundamentally single-threaded.</p> <p>With Markers, Ragdoll separated from the overall rig evaluation, which meant (1) your rig can continue running in parallel and (2) Ragdoll could also run in parallel.</p> <p>Consider this example.</p> Rigids Markers <p>This is how Maya scheduled evaluation for this scene with <code>Rigid</code> versus <code>Marker</code>. To the left, everything runs one after the other. It's terrible. To the right, every box is evaluated in parallel. Which means the more boxes and cores you have, the better utilisation you get.</p> <p>The scene itself is very simple, it's this one here.</p> <p></p> <p>So evaluation got faster, but rendering got slower. All-in-all we gained about 100% performance.</p> <p>With this release, we'll tackle that rendering block. Let's have a look at what's changed, in order of most-to-least significance.</p> Topic Savings Description Less CPU to GPU communication 1550x More buffers, less uniforms Connection Monitoring 40x Less dependence on time, more on physical connections being made and unmade Change Monitoring 40x Ignore anything that hasn't actually changed Less Dirty Propagation 3x Less of a shotgun blast, more like a sniper <p></p>"},{"location":"releases/2021.10.07/#cpu-to-gpu-communication","title":"CPU to GPU Communication","text":"<p>The previous release, and each one before it, had 1 shader per rigid. In the case of 600 rigid bodies, that meant 600 shaders. 600 shaders means 600 parameter updates of primarily color and 600 unique draw calls.</p> <p>On top of this, all geometry was regenerated and re-uploaded to the GPU on every frame. Robust, but not very fast.</p> <p>This release consolidates all shaders into one, colors are uploaded only once alongside their geometry and rendered using a custom GLSL shader (i.e. OpenGL 3.3).</p> What about DirectX? <p>If you are on Windows and can't use OpenGL for whichever reason, there is backwards compatibility built-in.</p> <pre><code>from ragdoll import options\noptions.write(\"useShaders\", False)\n</code></pre> <p>Or via the Ragdoll Preferences.</p> <p></p> <p>Bearing in mind this will cost you 50% of the rendering performance and won't benefit from future shading related features and improvements. The option will remain until it's clear whether and how much it is actually used. (Let us know in the chat!)</p> <p>Let's have a look at how this change affects your overall experience.</p> <p>Before (7fps)</p> <p></p> <p>After (130 fps)</p> <p></p> <p>A closer look reveals exactly where this improvement comes from.</p> <p>Before</p> <p>This block is what we control, it's the Ragdoll rendering pipeline taking a whopping 93 ms per refresh.</p> <p></p> <p>After</p> <p>With this release, this number dropped to 0.06ms (58 microseconds) that's an improvement of 1550x (!).</p> <p></p> <p>What about the other blocks?</p> <p>The bottleneck has now moved to that green one and all of those blue, and those are Maya's internal rendering pipeline.</p> <p>There isn't much we can do to directly impact it; it's mostly out of our hands. However, by massaging our data more and making life easier for Maya it should be possible to reduce these as well.</p> <p>See Future Work for details on next steps, and if this is something you, fellow reader, is familiar with do get in touch!</p> <p>Finally, as a result of having complete control over the shader running on the GPU, we're now able to more intimately design it to look the way we want. Expect more refinements here over time.</p> Before After <p></p>"},{"location":"releases/2021.10.07/#connection-change-monitoring","title":"Connection &amp; Change Monitoring","text":"<p>In the previous release, and all versions of Ragdoll so far, we've tasked Maya with evaluating every plug on every frame, including the heavy-duty plugs between <code>Rigid Body</code> -&gt; <code>Solver</code>.</p> <p>Here's what this felt like in a scenario of 600 unique objects.</p> <p>Before (5 fps)</p> <p>Painful! The reason is because even though we're only moving a single box, Ragdoll checks-in with all other boxes too.</p> <p></p> <p>After (90 fps)</p> <p>Blissful. In this case, only one of the boxes is actually updated, as one would expect.</p> <p></p> <p>Let's have a closer look at where performance is going here.</p> <p>Before</p> <p>Oh that's ghastly. Not only does it spend time evaluating all of those boxes, but it's making the solver take much longer consolidating the results taking a whopping 56 ms.</p> <p></p> <p>After</p> <p>Whereas now, as one would expect, we're only evaluating this one box in a total of 0.7ms, resulting in a performance improvement 80x.</p> <p></p> <p>That looks like 3?</p> <p>And that's true, it still makes three separate calls to this one box. Which means there's more room to optimise here, and we'll get there.</p> <p>Needless to say, this happened before as well but was obscured by how many calls there actually are. Luckily, at least two of these calls happen in parallel.</p> <p>600 capsules</p> <p>The current framerate on 600 unique objects, something for future Ragdoll to try and compete with. For reference, an average ragdoll consists of about 20-30 objects.</p> <p></p> <p></p>"},{"location":"releases/2021.10.07/#future-work","title":"Future Work","text":"<p>There is at least 4-16x performance left on the table for specialised cases.</p> Work Savings Benefit Optimised Render Items 4x Native Maya still renders 4x faster than us, which means there's more things we can do. Instancing for Rendering 2-4x Every render item is currently unique which means neither Maya nor your GPU is able to reuse geometry. Instancing is how games is able to render millions of objects on-screen at 60 fps, and best we can hope for is thousands. Instancing for Simulation 2-4x Likewise, every physics object is unique and, again, instancing in simulation is how games is able to run destruction and have thousands of objects interact in real-time. <p>The challenge in both of these is deduplication; of identifying which of the many shapes you use can reuse their geometry.</p> <p></p>"},{"location":"releases/2021.10.07/#overlap-group","title":"Overlap Group","text":"<p>Specify which markers may overlap rather than collide. This can be useful to enable dense areas of a character, like the clavicles, where there is natural overlap amongst large shapes like with the neck and spine.</p> Value Meaning <code>-1</code> No overlap allowed <code>0</code> Default, respects self-collision on the group (if any) <code>1-255</code> Overlap everything with the same number <p>An <code>rdMarker</code> part of a <code>rdGroup</code> can get an overlap group assigned procedurally, based on other members of that group. For example, in a complete ragdoll, all markers are part of the same group. So a <code>Self Collide = On</code> means these will all be given the same overlap group.</p> <p>If it isn't in a group, then <code>0</code> is the same as <code>-1</code>, in that it will collide with everything.</p> <p>Let's have a look at a few scenarios.</p> <p></p>"},{"location":"releases/2021.10.07/#collide-with-everything","title":"Collide with Everything","text":"<p>In this example, every marker is part of the same group. The group has <code>Self Collide = Off</code>, which is fine for just about every marker except the fingers. In that case, we do want self-collision, so they are given the group <code>-1</code>.</p> <p></p> <p></p>"},{"location":"releases/2021.10.07/#respect-self-collision","title":"Respect Self Collision","text":"<p>In this case, we're happy with a default group of <code>0</code> since we don't need anything to self collide. Especially these clavicles that overlap significantly!</p> <p></p> <p></p>"},{"location":"releases/2021.10.07/#surgical-control","title":"Surgical Control","text":"<p>Finally, for the very specific cases of wanting two or more markers to overlap. Notice how we give both the ground and 3 of the boxes an <code>Overlap Group = 5</code>.</p> <p></p> <p></p>"},{"location":"releases/2021.10.07/#asleep","title":"Asleep","text":"<p>Sometimes, you want things to stay put until something comes into contact with it. That's when you can tell a marker to start asleep, and \"wake up\" when necessary.</p> <p></p> <p></p>"},{"location":"releases/2021.10.07/#ignore-gravity","title":"Ignore Gravity","text":"<p>It surrounds us. It penetrates us. It binds the galaxy together. But sometimes, you just don't care.</p> <p></p> <p></p>"},{"location":"releases/2021.10.07/#quality-of-life","title":"Quality of Life","text":"<p>A few things to make your day that much more bright. \ud83c\udf1e</p> <p></p>"},{"location":"releases/2021.10.07/#guide-space-20","title":"Guide Space 2.0","text":"<p>In the previous release, we introduced <code>Guide Space</code>. Which was a quick way of controlling whether a simulation should follow your animation in..</p> <ol> <li>Local Space</li> <li>World Space</li> <li>Both</li> </ol> <p>But it was challenging to control, not very obvious. Especially with how it was also taking into account its \"group\" guide space. This release addresses this by enabling you to specify a guide space for all markers and selectively override only the ones you're interested in. Just like how the <code>Input Space</code> works.</p> <p>Group Guide Space</p> <p>Override all guide spaces, by editing the group.</p> <p></p> <p>Marker Guide Space</p> <p>Or gain surgical control over guide space per-marker.</p> <p></p> <p>Have Fun</p> <p>\ud83e\udd2d</p> <p></p> <p></p>"},{"location":"releases/2021.10.07/#auto-delete","title":"Auto Delete","text":"<p>The <code>Delete All Physics</code> menu command does what it says on the tin; it deletes all Ragdoll nodes from your Maya scene. But deleting a node, such as the new <code>rSolver</code> left behind anything associated with it, like <code>rGroup</code> and any <code>rMarker</code> nodes.</p> <p>This releases addresses this by automatically removing anything that depends on the node you delete. For example..</p> <ul> <li>Deleting a <code>rMarker</code> node also deletes any associated lollipop controls</li> <li>Deleting a <code>rGroup</code> also deletes the associated <code>rMarker</code> nodes</li> <li>Deleting the <code>rSolver</code> deletes all <code>rGroup</code> and <code>rMarker</code> nodes</li> </ul> <p>Therefore, deleting a solver is now equivalent to <code>Delete All Physics</code>, making it much more intuitive to delete things on a whim.</p> <p></p>"},{"location":"releases/2021.10.07/#reset-button","title":"Reset Button","text":"<p>Minor cosmetic improvement, the <code>Reset to Default</code> button now has an icon so you can actually tell it's a reset button (and not a bug, as many have pointed out \ud83d\ude05).</p> <p></p> <p></p>"},{"location":"releases/2021.10.07/#z-up","title":"Z-up","text":"<p>The default plane and solver offset was a off in the previous release, this fixes that. You can also manually re-adjust the plane and remove and orientation from the solver node to fix it locally, the solver itself is A-OK.</p> <p></p> <p></p>"},{"location":"releases/2021.10.07/#auto-time","title":"Auto Time","text":"<p>Rather than having to specify which frame to start simulating at, Ragdoll can now keep track of your animation start frame. Either the start of the range, or the full timeline. Or, you can still set a <code>Custom</code> start time for when you do care about specifics.</p> <p></p> <p></p>"},{"location":"releases/2021.10.07/#limitations","title":"Limitations","text":"<p>Monitoring for and responding to changes is a hard problem.</p> <p>Odds are some things aren't updating the way you expect, which could affect viewport rendering, or worse, the actual simulation. If you encounter any such issues, please let us know in the chat or ping me directly at marcus@ragdolldynamics.com</p> <p>Here are the currently known issues that we'll be fixing once a solution presents itself.</p> <p></p>"},{"location":"releases/2021.10.07/#motion-blur","title":"Motion Blur","text":"<p>As an unintended consequence of the optimisation and shader work, we're currently compliant with Maya's requirement for motion blur. Since all of our simulation is transform-based, it means all of what you simulate can be motion blurred, as opposed to deformer and particle-based motion.</p> <p></p> <p>It won't work with any animated attributes, which makes it rather limited in what you can use it for. \ud83e\udd14</p> <p></p>"},{"location":"releases/2021.10.07/#maintain-offset-ikfk","title":"Maintain Offset IK/FK","text":"<p>If you retarget a marker, the difference between the original and target is stored.</p> <p>When you record, you have the option to <code>Maintain Offset</code>. That's important if the assigned control has a different position and/or orientation than the destination control. For example, you can assign to a joint, but record onto a NURBS control.</p> <p>For example, IK joints are assigned markers but are retargeted onto FK controls, it's important that you retarget when they are both in a similar pose. Otherwise, the difference between them will remain after recording.</p> <p></p> <p>To combat this, you have two options.</p> <ol> <li>Do not maintain offset</li> <li>Make sure IK and FK match when you <code>Retarget</code></li> </ol> <p>(1) may not always be an option. If the position and/or orientation of an assigned control is simply different, then there isn't much you can do. :(</p> <p>(2) is your best option. If you make a mistake, you can always re-retarget to the same control again, and the offset will be updated.</p> <p></p>"},{"location":"releases/2021.10.07/#recording-kinematic-markers","title":"Recording Kinematic Markers","text":"<p>When a marker treats the input as <code>Kinematic</code>, it means it won't simulate it. It'll be 100% locked to animation. If that's the case, then there's really no point in recording those keys, right? Because they'd be 100% identical to the animation?</p> <p>Except! If there's a parent, then we'll still need those keys to compensate for the parent not being kinematic.</p> <p>Problem</p> <p>Let's record without kinematic keys. Notice how the hand isn't given any keys, even though it needed them?</p> <p></p> <p>Solution</p> <p>Record all keys, and the hand - even though kinematic - will still get recorded.</p> <p></p> <p></p>"},{"location":"releases/2021.10.07/#record-to-custom-attributes","title":"Record to Custom Attributes","text":"<p>Sometimes, rotation isn't coming from <code>Rotate X</code> but rather a custom <code>Ball Roll</code> attribute on a different IK control.</p> <p></p> <p>As Ragdoll only understands <code>Translate</code> and <code>Rotate</code>, how would you go about recording onto this attribute!? Here's what you can do.</p> <ol> <li>Create a new Locator</li> <li>Retarget the foot to this Locator</li> <li>Connect <code>Locator.rotateX -&gt; R_foot_CTL.ballRoll</code></li> </ol> <p>Now Ragdoll will record onto a familiar channel, and Maya will handle the conversion back onto the rig.</p> <p></p>"},{"location":"releases/2021.10.07/#slow-constraints","title":"Slow Constraints","text":"<p>Like in earlier versions, drawing constraints are the slowest part. If you don't need them, disable them. You can do that either on the <code>rSolver</code> node, or individually per <code>rMarker</code> node.</p> <p></p> <p></p>"},{"location":"releases/2021.10.07/#resources","title":"Resources","text":"<p>Some well-hidden but essential resources for any of the above. If you are into anything related to Maya plug-in development and performance, you'll treasure these as I have.</p> <ul> <li>Parallel Evaluation</li> <li>VP2 API Porting Guide for Locators</li> <li>VP2 API Porting Guide Part 1</li> <li>VP2 API Porting Guide Part 2</li> </ul>"},{"location":"releases/2021.10.25/","title":"Animation Capture pt. 3/4","text":"<p>Highlight for this release is Linking and Caching, and is part 3 out of 4 of the new Markers.</p> <ul> <li>ADDED Solver Linking Run two or more solvers together as one</li> <li>ADDED Solver Caching Run once and update on-demand</li> <li>ADDED Marker Limits On par with the previous constraints, but much easier to work with</li> <li>ADDED Marker Constraints Including Soft Pin!</li> <li>ADDED Cascading Attributes Control an entire simulation from one spot</li> <li>ADDED Recording Performance A bit faster recording</li> </ul>"},{"location":"releases/2021.10.25/#showcase","title":"Showcase","text":"<p>Let's start these notes with some examples of what you can do with all of the new features added. \ud83e\udd70</p> <p>Best Friends, No Matter What</p> <p>Two referenced characters, their solvers linked.</p> <p></p> <p>Hang On!</p> <p>The new <code>Distance Constraint</code> at work.</p> <p></p> <p>Dance Baby!</p> <p>The new <code>Pin Constraint</code> working alongside a <code>Distance Constraint</code> and regular old pose matching.</p> <p></p> <p></p>"},{"location":"releases/2021.10.25/#manikin-rig","title":"Manikin Rig","text":"<p>Updated with limits from this release.</p> <p>As before, this guy can either be opened or referenced into your scene. See Solver Linking for how you can reference multiple characters into the same simulation.</p> Download Manikin <p></p> <p></p>"},{"location":"releases/2021.10.25/#new-tutorials","title":"New Tutorials","text":"<p>Markers have one part left before being considered complete, at which point they can completely succeed <code>Active Rigid</code> and <code>Active Chain</code>.</p> <p>Until then, here's how you can get started with Markers today.</p> Tutorial Duration Description Markers 101 01:23 What are markers? Markers 101 - Key Concepts 03:23 Overview of Input Type and Pose Space Markers 101 - Local and World 03:00 Overview of the two Pose Spaces, local and world Overlapping Motion I 02:27 The very basics or Capture and Record Overlapping Motion II 02:21 Animation layers Full Ragdoll I 04:08 Hierarchy and volume Full Ragdoll II 04:05 Kinematic and animation Full Ragdoll III 04:30 Self collisions and recording IK I 03:00 Capturing the skeleton IK II 01:59 Retargeting to IK controls IK III 01:59 Record both Translation and Rotation Practical Example I 06:53 Fix table and elbow intersection in this dialog performance <p></p>"},{"location":"releases/2021.10.25/#solver-linking","title":"Solver Linking","text":"<p>Reference two characters, link their solvers.</p> <p></p> <p>Until now, you've been able to author physics using <code>Active Chain</code> and combine scenes using the <code>Combine Scene</code> menu item. That would transfer all connected rigids from one scene to another.</p> <p>But, that feature is destructive. There's no way to \"uncombine\" and even if you could, there's no record of what was originally combined.</p> <p>Let me introduce <code>Solver Linking</code>, a lightweight and non-destructive alternative.</p> <p>Linking</p> <p>This fellow is referenced twice, and get their solvers linked together.</p> <p></p> <p>Unlinking</p> <p>Unlinking restores their previous behavior exactly.</p> <p></p> <p>That's neat, but can you..</p> <p>I know exactly what you're thinking, I was thinking the same thing.</p> <p>Can you link a solver to another solver that is also linked? So that I can build a network of simple solvers that all work together to form one complex solver?</p> <p>Yes. Yes, you can. \ud83e\udd2d See below.</p> <p></p>"},{"location":"releases/2021.10.25/#example","title":"Example","text":"<p>Here are 2 assets, a manikin and a backpack.</p> Manikin Backback <p>The backback and manikin has been combined into one, which is then referenced twice into the final scene for a total of 4 unique solvers.</p> <p>Non-destructively link solvers</p> <p>Notice the hierarchy of solvers formed here, enabling you to build complex solvers out of many small solvers.</p> <p></p> <p>Non-destructively unlinking too</p> <p>Likewise, safely deconstruct a network of solvers by just removing the connection.</p> <p></p> <p>Technically, a solver is added to another solver in the same manner a marker, group and constraint is added. One big happy family.</p> <p></p> <p></p>"},{"location":"releases/2021.10.25/#solver-caching","title":"Solver Caching","text":"<p>Ragdoll runs alongside your character animation, but sometimes it can be useful to keep the results from a previous run and stop being so interactive.</p> <p>Meet <code>Cache</code> and <code>Uncache</code>.</p> <p></p> <p>Caching is entirely non-destructive, and in fact leverages the very same cache you've been enjoying all this time whenever rewinding.</p> <p>The menu commands toggle an attribute on your solver node, called <code>.cache</code> and automatically plays the entire timeline for you. But the same result can be achieved by setting the attribute and playing it yourself.</p> <p></p> <p>The minimal HUD will show you what's been cached, and like before once you resume playback from a cached to an uncached frame, Ragdoll will continue filling up the cache as one would expect.</p> <p>Look forward to a future release where caching happens in the background, as you work. Something that can also be handy from time to time (pun!).</p> <p></p>"},{"location":"releases/2021.10.25/#limitations","title":"Limitations","text":"<p>The viewport HUD currently draws relative the solver node in your Outliner. Moving this node also moves the HUD, which isn't right. Moving it along the Z-axis can actually cause the HUD to vanish due to being outside of the camera frustrum.</p> <p>Other than that, if you encounter odd behavior let me know. This should work just fine in all cases where Ragdoll works, since the underlying mechanics are the same.</p> <p></p>"},{"location":"releases/2021.10.25/#marker-limits","title":"Marker Limits","text":"<p>Markers now support the limits you've grown accustomed to from chains and constraints. They are much easier to work with, now that they are built-in to each marker and have an understanding for what a \"parent\" is.</p> <p></p> <p>You should find a lot less need to use <code>Edit Pivots</code> from here on, and in the next release you'll also get some interactive manipulators to avoid the Channel Box even more.</p> <p>Limit Type</p> <p></p> <p></p>"},{"location":"releases/2021.10.25/#hinge-limit","title":"Hinge Limit","text":"<p>The simplest of limits, allow a limb to rotate along a single axis. Like hinges on a door.</p> <p>Use this for knees and elbows.</p> <p></p> <p></p>"},{"location":"releases/2021.10.25/#ragdoll-limit","title":"Ragdoll Limit","text":"<p>For more complex anatomical limits, such as shoulders and hips, use the \"ragdoll\" limit for control over each of the 3 rotate axes.</p> <p>Defaults</p> <p>A good place to start is to just play with default settings and get an idea of what it looks like.</p> <p></p> <p>Customise</p> <p>In this case, we'll keep the leg from crossing over too far, and from bending too far backwards. Like a real human leg.</p> <p></p> <p></p>"},{"location":"releases/2021.10.25/#custom-limit","title":"Custom Limit","text":"<p>The Hinge and Ragdoll limits should cover the vast majority of limit needs, but sometimes you need more control. The <code>Custom</code> limit lets you control the parent and child frames independently, similar to the \"traditional\" Rigid constraints let you do.</p> <p>Here's an example of replicating the <code>Ragdoll</code> constraint with a custom limit.</p> <p></p> <p></p>"},{"location":"releases/2021.10.25/#axis","title":"Axis","text":"<p>Specify the \"main\" axis for your limit.</p> <p>Different rigs follow different conventions, and this attribute enables you to keep Ragdoll in the loop. It should typically align with whatever axis your joint or control points in the direction of the child joint or control.</p> <p></p> <p></p>"},{"location":"releases/2021.10.25/#rotation-vs-offset","title":"Rotation vs Offset","text":"<p>You can either rotate or offset the limit.</p> <ul> <li><code>Rotation</code> rotates both parent and child frames</li> <li><code>Offset</code> rotates only the parent frame</li> </ul> <p>Remember</p> <p>The <code>Parent Frame</code> is the space in which a <code>Child Frame</code> is allowed to move.</p> <p></p> <p></p>"},{"location":"releases/2021.10.25/#marker-constraints","title":"Marker Constraints","text":"<p>You can now constrain one marker to anothe!</p> Constraint Type Description Weld Constraint Simplest of constraints, welds two markers together; no change to their distance or relative orientation is allowed. This is akin to the Maya <code>Parent Constraint</code> Distance Constraint Maintain a minimum, maximum or total distance between two markers. Pin Constraint Match a position and orientation in worldspace, similar to <code>Drive Space = World</code>. <p></p> <p></p>"},{"location":"releases/2021.10.25/#weld","title":"Weld","text":"<p>Maintain the position and orientation of one marker relative another from the first frame onwards.</p> <p></p> <p></p> <p></p>"},{"location":"releases/2021.10.25/#distance","title":"Distance","text":"<p>A simple but versatile constraint with animatable distance.</p> <p>Maintain Start Distance</p> <p>Whatever the distance between two markers, it will be maintained throughout a simulation.</p> <p></p> <p>Minimum Distance</p> <p>Alternatively, only respond to when two controls get too close.</p> <p></p> <p>Maximum Distance</p> <p>Conversely, keep markers from getting too far away from each other.</p> <p></p> <p>Custom Distance</p> <p>Or go all-in, with both a minimum and maximum distance, for the most complex behavior.</p> <p></p> <p>Offsets</p> <p>Control at which point on a control to measure the distance.</p> <p></p> <p>Animated Distance</p> <p>Both min and max distance, along with stiffness and damping, can be animated for some pretty rad effects.</p> <p></p> <p>Hard Distance</p> <p>A <code>Stiffness = -1</code> means the constraint is \"hard\". It will not accept any slack or \"springiness\".</p> <p>In this example, the distance is animated whilst soft, and transitioned into a hard constraint. Notice how it snaps into place once hard.</p> <p></p> <p>Limitation</p> <p>A limitation of a hard constraint is that the distance cannot be animated whilst hard. You can however animate it between values of -1 and above, to transition to and from hard to soft.</p> <p></p>"},{"location":"releases/2021.10.25/#pin","title":"Pin","text":"<p>Similar to the <code>Soft Pin</code> used with Rigids, this creates a new position and orientation a marker will try and reach. It's exactly what you get using <code>Guide Space = World</code> on the markers themselves, but with the convenience of a new transform you can animate. They will both try and pull on the marker, greatest stiffness wins!</p> <p></p> <p></p>"},{"location":"releases/2021.10.25/#cascading-attributes","title":"Cascading Attributes","text":"<p>Sometimes, you want to tweak the overall look of an entire simulation at once, rather than tweaking or modifying individual nodes. Now you can.</p> <p>All guides, limits and constraints now have their values combined with equivalent values on the solver node.</p> <p></p> <p>Edit One</p> <p>Here's how you edit just a single marker or constraint.</p> <p></p> <p>Edit Many</p> <p>And here's how you can edit them all.</p> <p></p> <p>Animation</p> <p>Guides and Constraints can be animated, however Limits cannot.</p> <p>This behavior is consistent with the <code>rdGroup</code> node too, here's the complete attribute hierarchy.</p> <p></p> <p></p>"},{"location":"releases/2021.10.25/#recording-performance","title":"Recording Performance","text":"<p>A mere 15% boost to Recording performance.</p> <p>Before</p> <p></p> <p>After</p> <p></p> <p>More was expected, and odds are there's room to optimise this further. But, the bottleneck is writing keyframes which cannot happen across multiple threads. It also needs to happen alongside evaluating your rig, which is dirtied with setting of each key, else it cannot take into account the various constraints, offset groups and IK solvers happening in there.</p> <p>On the upside, the more complex your rig, the more benefit you should see from this optimisation. What happens in the above examples are extremely lightweight rigs with no animation, hence the difference is minor.</p> <p></p>"},{"location":"releases/2021.10.25/#remainder","title":"Remainder","text":"<p>Markers are almost feature complete. Most if not all things you could do with Rigids are now possible with markers.</p> <p>Except for:</p> <ul> <li>Forces</li> <li>Export &amp; Import</li> </ul> <p>These will be addressed in an upcoming release. The next release will focus on getting those darn shape and limit attributes out of the Channel Box and into the viewport for interactive control.</p>"},{"location":"releases/2021.11.15/","title":"Animation Capture pt. 4/4","text":"<p>Highlight for this release is Markers part 4 of 4!</p> <p>Previous Parts</p> <ul> <li>Part 1 - Animation Capture</li> <li>Part 2 - Performance</li> <li>Part 3 - Linking and Caching</li> <li>Part 4 - See below \ud83d\ude07</li> </ul> <ul> <li>ADDED Ragdoll for MacOS You heard it right, it's here!</li> <li>ADDED Robust Rendering Consistent across all platforms and GPUs</li> <li>ADDED Robust Recording More resilient to locked controls and custom rotation axes</li> <li>ADDED Robust Caching I dare you to try and break it \ud83d\ude19</li> <li>ADDED Snap to Simulation Single-frame recording, for quick posing</li> <li>ADDED Extract Simulation Get the raw data as a baked joint hierarchy, super fast!</li> <li>ADDED Frameskip Method Now accessible per-solver, as an attribute</li> <li>ADDED Trial Renewal Ready to give it another go? Now you can</li> <li>ADDED Replace Mesh An old friend has returned, for Markers</li> <li>ADDED Auto Limit Transfer locked Maya channels into physics</li> <li>FIXED Scale Mastery Negative, non-uniform, you name it</li> <li>FIXED Unloading Ragdoll on Linux Guaranteed to crash, but no more!</li> <li>UPDATED <code>PATH</code> and Windows If you don't know what this is, you don't have to worry about it</li> </ul> <p>In with the new, out with the old</p> <p>The next few releases will slowly but surely replace Rigids with Markers. So if there is anything you find yourself unable to do with Markers, let us know and we'll get that in there as soon as possible.</p> <ul> <li>Chat</li> <li>Contact</li> </ul> <p></p>"},{"location":"releases/2021.11.15/#showcase","title":"Showcase","text":"<p>Let's start off with some eye candy. \ud83d\ude07</p> <p>Spiderman</p> <p>Courtesy of Jason Snyman, a.k.a. the wizard.</p> <p></p> <p>Piggyback Ride</p> <p>Thought it was fun to see how the simulation would look with the previous simulation as input!</p> <p></p> <p>Motion Graphics</p> <p>Courtesy of Peter Crowther, for their client</p> <ul> <li>https://atech.cloud/</li> </ul> <p>Design company. Art direction Matt Walpole.</p> <ul> <li>https://www.welaunch.co.uk/</li> </ul> <p></p> <p></p> <p>Halloween</p> <p>And another from Jason!</p> <p></p> <p></p> <p></p>"},{"location":"releases/2021.11.15/#recap","title":"Recap","text":"<p>We did it! We're at part 4 out of 4 of the new Markers. Just about. \ud83e\udd70</p> <p>This release here was intended to round off the interactive manipulators - so that you didn't have to fiddle around the channel box to edit shapes, constraints and limits - but we ran into a wall with our drawing API (see Robust Rendering below) which led us to throw everything out and start from scratch. \ud83d\ude14</p> <p>On the upside, we've now got a significantly stronger foundation upon which to build manipulators, you will see these in action in the next release. Part 5 out of 4! \ud83e\udd70</p> <p>These are the things scheduled for the next releases.</p> Next Release Description Interactive Manipulators Editing shapes is hard, constraints too. And limits. Export &amp; Import Rigids could be exported and later imported, Markers does not have this ability yet Forces Next up, native Maya fields for Ragdoll Mechanical Constraints Like vehicle suspension are nowhere to be seen just yet."},{"location":"releases/2021.11.15/#new-terminology","title":"New Terminology","text":"<p>A few things found a more representative name in this release.</p> Before After Guide <code>--&gt;</code> Pose, e.g. <code>Pose Space</code> Input Type <code>--&gt;</code> Behaviour, e.g. <code>Kinematic</code> and <code>Pose Match</code> Assign Single <code>--&gt;</code> Assign Individual Assign Group <code>--&gt;</code> Assign Hierarchy <p>What does it mean?</p> <p>Still fuzzy on what \"assign\" means? Refer back to the introductory tutorials from the last release here. (hint: it's motion capture terminology)</p> <ul> <li>Introductory Tutorials</li> </ul> <p> </p>"},{"location":"releases/2021.11.15/#future-of-rigids","title":"Future of Rigids","text":"<p>When Markers was first discovered, it wasn't clear whether they would live alongside Rigids, or replace them. But at this point it's safe to say Markers is applicable to everything rigids can do with far greater performance and usability.</p> <p>Which is why from this release onwards <code>Rigids</code> are now to be considered deprecated.</p> <p>Long live Markers!</p> <p>The following few releases will be about transitioning from Rigids to Markers. Tutorials will be updated, the documentation too and you're encouraged to start using Markers for your everyday animation tasks.</p> <p>Rigids will live on for the next few releases and eventually end up in a <code>Legacy</code> sub-menu until being completely removed in February 2022.</p> <p>February 2022 Deadline</p> <p>If you didn't read the above, remember this date for when <code>Active Rigid</code> and <code>Active Chain</code> goes bye-bye.</p> <p></p> <p></p>"},{"location":"releases/2021.11.15/#ragdoll-for-macos","title":"Ragdoll for MacOS","text":"<p>There is now an option to download Ragdoll for MacOS! \ud83c\udf4e</p> Download for Mac <p>Heads Up</p> <p>If you are a Mac user, please let us know how you get along. The builds were made on Big Sur and should work well with Big Sur, but Autodesk recommends El Capitan.</p> <p></p> <p></p>"},{"location":"releases/2021.11.15/#robust-rendering","title":"Robust Rendering","text":"<p>This release has taken quite a while, and not because of MacOS support but because of rendering.</p> <p>In short, we've had to throw out and rebuild a significant chunk of Ragdoll for this release. Everything related to lines, everything!</p> <p></p> <p>The reason is that an unlucky few of you have had the following experience with Ragdoll.</p> <p></p> <p>Those lines don't look quite right.. \ud83e\udd14</p> <p>In short, the reason for this is that the Maya API for drawing lines ends up looking different across various graphics cards and versions of Maya. Maya 2019 was especially egregious.</p> <p>But let's dig deeper.</p> <p></p>"},{"location":"releases/2021.11.15/#digging-deeper","title":"Digging Deeper","text":"<p>Animator?</p> <p>This next part is mostly for techies, feel free to skip ahead.</p> <p>Whenever Ragdoll drew shapes, like capsules and convex hulls, it used part of Maya's drawing API called <code>MRenderItem</code>. Lines on the other hand - like those for limits and guides - were drawn using a simplified API called <code>MUIDrawManager</code>.</p> <pre><code>drawManager-&gt;circle(point, radius);\ndrawManager-&gt;line(pointA, pointB, thickness);\n// And so on..\n</code></pre> <p>Which is a fantastic, well-designed API that has worked great for the past year. Until it didn't. As it happens, this API is broken.. Reports were coming in from all across the globe about lines looking like.. Well, like this.</p> <p></p> <p>Some if it I could replicate, this here is Maya 2019 in which the behavior is erratic. But the same could be said for some hardware and driver combinations; most of which I have never been able to replicate here.</p> <p>This version throws all of that out the window, and reimplements it from scratch. It's a pity, because the API was very easy to work with and a great way to get started rendering in Maya.</p> <p>That said, our new API is not only much faster but also much more powerful. You can expect to see a lot of new 2D rendering, including fully interactive UI elements in 3D space.</p> <p>Until then, if you've been having issues with Ragdoll and lines, you can now breathe easy.</p> <p></p> <p>Caveat</p> <p>This is great and all, but it no longer supports DirectX.</p> <p>In the previous release, we already started moving away from DirectX, and if you've been using it you would have gotten some warnings about it. If not, then you've got nothing to worry about for this release.</p> <p>OpenGL is where the action is at, and is supported equally on each platform; including MacOS!</p> <p></p>"},{"location":"releases/2021.11.15/#robust-recording","title":"Robust Recording","text":"<p>Recording now automatically ends up on an Animation Layer per default, with only the simulated controls associated with it. It is also at least 2x faster and less sensitive to quirks in a rig or skeletal hierarchy.</p> <p>Here are the things it didn't take into account before, but does now.</p> <ul> <li> Uniform Scale</li> <li> Non-uniform Scale</li> <li> Negative Uniform Scale</li> <li> Negative Non-uniform Scale</li> <li> Rotate Pivot</li> <li> Scale Pivot</li> <li> Rotate Axis</li> <li> Joint Orient</li> <li> Locked Channels</li> </ul> <p>And that should cover it!</p> <p>Important</p> <p>Recording is the most important aspect of Markers; if you can't get the simulation out then it's all for nothing. So do reach out via the..</p> <ul> <li>chat</li> <li>or contact form</li> </ul> <p>..if you have any issues with this, and a fix will be crafted in a hot minute.</p>"},{"location":"releases/2021.11.15/#performance","title":"Performance","text":"<p>I mentioned a 200% increase in performance, didn't I? Let's have a quick look (pun!).</p> <p>Before</p> <p>A solid 49 fps.</p> <p></p> <p>After</p> <p>135 fps. The numbers speak for themselves.</p> <p></p> <p>At the end of the day, the main bottlenecks are out of Ragdoll's hands:</p> <ol> <li>Running the simulation</li> <li>Evaluating the rig</li> <li>Twice (!)</li> <li>Overhead from the recording</li> </ol> <p>Sometimes, the simulation is really fast; it will usually be the fastest of the four. Other times, evaluating the rig is fast; such as if there are no keyframes and no fancy processing like follicles or spline IK. But the overhead from recording should approach zero as time goes on.</p> <p>About (3), Ragdoll must evaluate your rig twice. Once to provide the simulation with your animation, and a second time to bake the resulting simulation back onto your controls.</p> <p></p> <p>Why so slow?</p> <p>Interestingly, this is what made Active Rigid and Active Chain so slow. It was doing recording every frame, whether you wanted to or not. It was how the simulation was made visible to you; by continuously recording it.</p> <p>With Markers, we delay the recording until you hit <code>Record Simulation</code>, which is the primary way in which they enable us to reap this crazy amount of performance out of Maya.</p> <p></p>"},{"location":"releases/2021.11.15/#robust-caching","title":"Robust Caching","text":"<p>Several improvements were made to Caching, introduced in the last version.</p> <ul> <li> More intuitive visual aid</li> <li> Caching from the Start Frame</li> <li> Continuing cache after visiting the Start Frame</li> </ul> <p>Caching whilst standing on the start frame could cause hiccups on occasion, this release fixes that.</p> <p>Before</p> <p>There was also a minor issue whereby if you cached half-way, revisited the start frame and then went back to resume caching, it would resume from the wrong spot and thus break the cache.</p> <p>In either of these cases, one could disable and re-enable the cache to \"fix\" it, but now you don't have to!</p> <p></p> <p>Notice how it doesn't update the cache when standing on the start frame?</p> <p>After</p> <p></p> <p>And, like before, you can enable caching via the solver. The only difference is that the menu item automatically plays through the entire timeline for you.</p> <p></p> <p></p>"},{"location":"releases/2021.11.15/#snap-to-simulation","title":"Snap to Simulation","text":"<p>Yet another way to work with physics, by transferring individual poses from the solver into your animation. You can use it to pose or layout a scene.</p> <p></p> <p></p> <p></p> <p>Coming Up</p> <p>An upcoming release will enable you to advance time in the simulation, without affecting time in Maya. Such that you can \"relax\" a pose, for example. \ud83d\ude01</p> <p></p>"},{"location":"releases/2021.11.15/#frameskip-method","title":"Frameskip Method","text":"<p>Ragdoll needs a consistent progression of time to provide reliable results. So per default, if it notices a frame being skipped, it kindly pauses and waits until you revisit the last simulated frame.</p> <p>Alternatively, you can let it look the other way and pretend time has progressed linearly, like nCloth and countless other solvers do.</p>"},{"location":"releases/2021.11.15/#pause","title":"Pause","text":"<p>The default. It's safe, predictable, but requires <code>Play Every Frame</code> to work.</p> <p></p>"},{"location":"releases/2021.11.15/#ignore","title":"Ignore","text":"<p>The nCloth and nHair default, of trying its best to simulate even though it wasn't given the frames inbetween. Unpredictable, unreliable but may handle playing along with sound.</p> <p></p> <p>Aside from not giving you the same result each time you play, if too many frames are skipped your simulation can completely explode. You can semi-work around this by increasing the number of substeps, forcing more simulation frames to fill for the missing frames.</p> <p></p> <p>Non-deterministic</p> <p>Bear in mind that the <code>Ignore</code> method cannot give you the same results each playthrough. The <code>Pause</code> method is guaranteed to give you the same results, and are identical to what you get when you <code>Record Simulation</code> too.</p> <p></p>"},{"location":"releases/2021.11.15/#extract-simulation","title":"Extract Simulation","text":"<p>Get data out of the solver and into a baked joint hierarchy.</p> <p>You can use this to build a library of animations, or to handle the retargeting from simulation to animation manually by just constraining to the resulting joint hierarchy.</p> <p></p> <p>Performance</p> <p>Notice how fast this is!</p> <p></p>"},{"location":"releases/2021.11.15/#a-debugging-companion","title":"A Debugging Companion","text":"<p>It can also be used for situations where <code>Record Simulation</code> doesn't do what you need it to. The extracted skeleton will be a plain joint hierarchy, with no scale, and guaranteed to match the simulation exactly. So you can extract it, and constrain your rig to it.</p> <p></p>"},{"location":"releases/2021.11.15/#trial-renewal","title":"Trial Renewal","text":"<p>You've already given Ragdoll a go many moons ago, but really like where things have gone since? Well you're in luck. You can now request a re-trial!</p> <ul> <li>Submit your request</li> </ul> <p></p>"},{"location":"releases/2021.11.15/#replace-mesh","title":"Replace Mesh","text":"<p>You can now replace the original geometry assigned to your marker, just like you could with Rigids.</p> <p></p> <p></p>"},{"location":"releases/2021.11.15/#auto-limits","title":"Auto Limits","text":"<p>Markers are now able to infer which axes to lock in the simulation, based on the locked channels of your control or joint.</p> <p></p> <p>Notice in this example how some of the channels are locked. With the <code>Auto Limit</code> option checked, the corresponding limit axes will be locked too, such as to prevent the simulation from rotating around those axes.</p> <p>If you forget or want to detect locked axes on an existing marker, you can use the Utility option too.</p> <p></p> <p></p>"},{"location":"releases/2021.11.15/#scale-mastery","title":"Scale Mastery","text":"<p>Simplified and more robust, scale now handles well for all manner of shapes.</p> <p></p> <p></p>"},{"location":"releases/2021.11.15/#unloading-on-linux","title":"Unloading on Linux","text":"<p>Linux users were not able to unload and later reload Ragdoll, without experiencing a fatal crash. This was a problem related to the dynamic licensing library not letting go of its TCP handle and forcing the plug-in to remain loaded, even though you kindly asked it to unload.</p> <p>This has now been fixed, and the plug-in can safely be unloaded and reloaded and unloaded and reloaded over and over and over again. Enjoy!</p> <p></p>"},{"location":"releases/2021.11.15/#path-and-windows","title":"PATH and Windows","text":"<p>For TDs</p> <p>The following is meant for administrators and TDs</p> <p>With the introduction of Mac support a change was made to the way LimeLM - the licencing software used by Ragdoll - is distributed. Rather than being statically linked on Linux and dynamically linked but programatically located on Windows, it is now dynamically linked and automatically located on all platforms.</p> <p>Windows Only</p> <p>This only applies to Windows. Linux and Mac references the libraries relative the plug-in location. In short, you don't have to worry about it.</p> <p>You don't have to care about this, unless you are on Windows and care about what's on your <code>PATH</code> to which this happens.</p> <pre><code># Windows\nos.environ[\"PATH\"] += \";\\\\Ragdoll\\\\shared\\\\windows\"\n</code></pre> <p>The change is coming from the <code>Ragdoll.mod</code> file.</p> <p>Why am I telling you this?</p> <p>In the wildly unlikely chance that there is another plug-in using a different version of LimeLM in your arsenal, there may be a conflict whereby:</p> <ol> <li>Ragdoll module is loaded, appends v1.0 of LimeLM to <code>PATH</code></li> <li>Other Plug-in module is loaded, appends v0.5beta of LimeLM to <code>PATH</code></li> <li>Ragdoll plug-in is loaded, picks up <code>v0.5beta</code></li> <li>Other Plug-in plug-in is loaded, picks up <code>v0.5beta</code></li> </ol> <p>This will be resolved in a later version of Ragdoll, but until then, in the unlikely event there is a conflict, here's what you can do.</p> <pre><code>import os\nbefore = os.environ[\"PATH\"]\nos.environ[\"PATH\"] = \"/path/to/Ragdoll/shared:%s\" % before\ncmds.loadPlugin(\"ragdoll\")\nos.environ[\"PATH\"] = before\n</code></pre> <p>Namely, rather than loading Ragdoll from your plug-in manager, load it using this wrapper script. It will ensure Ragdoll's path is picked up ahead of any third-party plug-in, without negatively affecting anything around it.</p>"},{"location":"releases/2021.12.12/","title":"Interactive Manipulators","text":"<p>Highlight for this release is The Manipulator!</p> <ul> <li>ADDED Manipulator Edit things faster and visually with these new tricks</li> <li>ADDED Independent Pose Axes Control X, Y and Z axes independently</li> <li>ADDED Quality of Life Can never have too much of this.</li> <li>FIXED Auto Limits II More predictable, more usable</li> <li>FIXED Disappearing Limits Two solvers, one removed, caused limit indicators to vanish</li> <li>FIXED Lollipop Hierarchy Lollipops could break a hierarchy of markers, but no more</li> <li>FIXED Replace Intermediate Mesh Intermediate meshes could make Replace Mesh more complicated</li> <li>FIXED White Window on Maya Exit Ragdoll could sometime prevent Maya from exiting properly</li> <li>ADDED Customise Recording An advanced topic for big pipelines</li> </ul> <p></p>"},{"location":"releases/2021.12.12/#legacy-rigids","title":"Legacy Rigids","text":"<p>This release marks the end of <code>Active Rigid</code> and <code>Active Chain</code>.</p> <p>Important</p> <p>If you read only one paragraph in this document, read this.</p> <p>Tutorials have been updated, documentation as well and you are encouraged to use <code>Markers</code> which are far superior in both performance and usability.</p> <ul> <li>Rigids remain accessible via the new <code>Legacy</code> submenu in the Ragdoll menu</li> <li>Scenes made with Rigids remain functional, and will continue to run until end of February 2022.</li> <li>Documentation for Rigids can be found at the bottom of the left-hand side, under Legacy</li> </ul> <p></p> <p></p>"},{"location":"releases/2021.12.12/#showcase","title":"Showcase","text":"<p>Let's kick things off with some eye candy!</p> <p>Flying Lizard</p> <p>A work-in-progress clip from Jason Snyman.</p> <p></p> <p>Ragdoll in 30 Seconds</p> <p>A brief overview of what Ragdoll is.</p> <p></p> <p>Mocap Chap</p> <p>Footage from one of the the new tutorials.</p> <p></p> <p>Now watch what happens when we increase the mass of the box by 50x. \ud83d\ude01</p> <p></p> <p></p>"},{"location":"releases/2021.12.12/#new-tutorials","title":"New Tutorials","text":"<p>Have a look!</p> <ul> <li>Manikin (with Markers!)</li> <li>Full Manikin (with the Manipulator!)</li> <li>IK (with Retargeting!)</li> <li>Mocap Chap (with Fun!)</li> </ul> <p> <p> <p> <p> <p></p> <p></p>"},{"location":"releases/2021.12.12/#manipulators","title":"Manipulators","text":"<p>One of the most challenging aspect of Ragdoll to date is editing shapes and limits. These have now been greatly simplified via the use of \"manipulators\", similar to your standard Translate/Rotate/Scale manipulators. Except on steroids.</p> <p>Here's a 21 second overview.</p> <p></p> <p>Before</p> <p>Here's the equivalent process in the last version. Sped up by 4x.</p> <p></p> <p>It's is about as boring to watch as it was to make. \ud83d\ude04 Notice how shapes and limits need manual adjustment on both sides, because there was no symmetry. And notice how many clicks it takes to make one change, keep expanding that item in the Channel Box over and over and over.</p> <p></p>"},{"location":"releases/2021.12.12/#activate","title":"Activate","text":"<p>You have a few options for activating the manipulator.</p> <ol> <li>Run <code>Ragdoll -&gt; Manipulator</code></li> <li>Select a Ragdoll node and press <code>T</code> on your keyboard</li> <li>Select a Ragdoll node and click the <code>Show Manipulator Tool</code> in the Toolbar</li> </ol> <p>Any of the Ragdoll nodes can be selected in order to enable the manipulator via the <code>T</code> keyboard shortcut.</p> <p>Solver Shape</p> <p>At the time of this writing, the solver needs its shape selected, not the parent transform. This will be addressed in a future release.</p> <p>A comfortable workflow is..</p> <ol> <li>Select any assigned control</li> <li>Select the marker DG node in the Channel Box</li> <li>Press <code>T</code></li> </ol> <p>The selected Marker will be pre-selected in the manipulator.</p> <p></p> <p>Alternatively, press the <code>Show Manipulator Tool</code> button in the Toolbar.</p> <p></p> <p></p>"},{"location":"releases/2021.12.12/#shape-modes","title":"Shape Modes","text":"<p>This release introduces a manipulator with two \"modes\".</p> <p></p> Mode Description Shape Mode Edit shape properties, like <code>Length</code>, <code>Radius</code>, <code>Position</code> and <code>Orientation</code> Limit Mode Edit limit properties, like <code>Twist</code> and <code>Swing</code> along with their pivots. <p>In Shape Mode, you currently have 5 manipulators.</p> Manipulator Description <code>Translate</code> Affects the <code>Shape Offset</code> attribute <code>Rotate</code> Affects the <code>Shape Rotation</code> attribute <code>Scale</code> Affects the <code>Shape Radius</code> and <code>Shape Extents</code> attributes <code>Length</code> Affects the <code>Shape Length</code> attribute, for the <code>Capsule</code> shape <code>HUD</code> Individual control over primary attributes, like <code>Shape Extents</code> axes <p>Translate</p> <p>Hold the middle-mouse button to translate.</p> <p></p> <p>Rotate</p> <p>Hold Ctrl + middle-mouse button to rotate.</p> <p></p> <p>Scale</p> <p>Hold Ctrl + left-mouse button to scale.</p> <p></p> <p>Length</p> <p>The <code>Capsule</code> shape have additional in-view manipulators you can drag to affect each side independently.</p> <p></p> <p>HUD</p> <p>Finally, attributes without a visual handle can be edited via the viewport HUD.</p> <p></p> <p></p>"},{"location":"releases/2021.12.12/#limit-mode","title":"Limit Mode","text":"<p>In Limit Mode, you currently have 2 manipulators.</p> Manipulator Description <code>Limit</code> Affects the <code>Limit Range XYZ</code> attributes <code>HUD</code> For locking and enabling of limits <p>Enable and Disable</p> <p>Click the <code>Axis</code> button to limit the rotation about a particular axis.</p> <p></p> <p>Lock and Unlock</p> <p>Click the <code>Lock</code> button to prevent all rotation about the axis.</p> <p></p> <p>Asymmetrical Edits</p> <p>Hold <code>Ctrl</code> to make asymmetrical edits</p> <p>Some limbs start out at the center of their limit. Like your hip and neck. They are typically modeled to enable equal movement in each axis.</p> <p>Other limbs, like the elbow and knee, are typically modeled in the extreme of their limit. Able to only rotate in one direction. For these cases, they need an asymmetrical limit.</p> <p></p> <p>With limits in multiple axes, keep an eye out for how asymmetrical edits to one axis affect the others.</p> <p></p> <p>Why are they moving?</p> <p>Under the hood, each axis must be still be symmetrical; edits only appear to be asymmetrical for your convenience. What's really happening is the entire limit is both changing shape and also rotating and the rotation is causing all axes to move.</p> <p>This is an inherent limitation of limits (pun!) in Ragdoll and is unlikely to be addressed in the future, so we'll have to work with it.</p> <p>If you mess up and want to start from scratch, hit the <code>Reset</code> button, also found under <code>Ragdoll -&gt; Utilities -&gt; Reset Constraint Frames</code></p> <p></p> <p></p>"},{"location":"releases/2021.12.12/#symmetry","title":"Symmetry","text":"<p>Enabled per default, symmetry will mirror your edits across an axis.</p> <p>There are 2 types of symmetry at the time of this writing.</p> Type Description <code>World</code> Look for a marker across the current axis in worldspace <code>Pose</code> Based on the pose at the time of assigning markers, which is typically symmetrical. <p></p> <p>Each of which can be made symmetrical in either the X, Y or Z axes. The <code>Pose</code> axis means you can make changes even if a character has been posed after having been assigned. A feature particularly useful when assigning to the A- or T-pose of a character rig.</p> <p>Pose Based Symmetry</p> <p>Because these controls were assigned in the T-pose of the rig, you can use Pose-based symmetry to make changes even when the character is currently asymmetrical.</p> <p></p> <p>Multiple Rigs</p> <p>If two or more characters are present in the scene, and they were all rigged in the same pose, at the center of the world, then Ragdoll will only look at markers in the same <code>rdGroup</code> as the selected Marker.</p> <p>Search Distance</p> <p>On the right-hand side of the <code>Enable Symmetry</code> button, there is a <code>Search Distance</code> gizmo.</p> <p>Drag to edit this value</p> <p>When you select a marker on one side, it will search for a marker at the opposite side of the axis you've chosen. Because positions are all approximate, it uses a maximum search distance to look for it.</p> <p>Matches</p> <p>Ideally, there should only be one match. But in a crowded hierarchy there may be several. Tune the <code>Search Distance</code> to control the number of matches, to ensure it doesn't pick the wrong one.</p> <p></p>"},{"location":"releases/2021.12.12/#multi-select","title":"Multi-select","text":"<p>Disable <code>Symmetry</code> to enable multi-select</p> <p>Hold <code>Shift</code> to select and manipulate multiple markers at once.</p> <p></p> <p>Drag-select</p> <p>Will be added in a future release.</p> <p></p>"},{"location":"releases/2021.12.12/#undo-redo","title":"Undo &amp; Redo","text":"<p>No surprises here.</p> <p>Changes made using the manipulator is undoable as you would expect, with the exception that it currently does not let you undo the selection itself like normal Maya selection does; this will be addressed in a future release.</p> <p></p>"},{"location":"releases/2021.12.12/#fit-to-view","title":"Fit-to-view","text":"<p>Tap the <code>F</code> key to fit any selected Marker(s) to the view, like you would expect from selected Maya nodes.</p> <p></p> <p>Caveat</p> <p>This currently only applies if you've activated the manipulator using the <code>Ragdoll -&gt; Manipulator</code> menu item, or have the <code>rdSolver</code> shape node selected.</p> <p></p>"},{"location":"releases/2021.12.12/#select-node","title":"Select Node","text":"<p>Click the <code>Select Node</code> button to select this node in Maya</p> <p>Per default, Ragdoll and Maya selection are separate. You can have Maya select the node(s) currently seleted in Ragdoll by pressing the <code>Select Node</code> button.</p> <p></p> <p>You can automate this using the <code>Synchronise</code> button at the far-left of the HUD.</p> <p></p> <p>Why is this not on per default?</p> <p>The solver is what is actually being fitted. If the selection is changed to a marker (which is not a DAG node, and therefore lacks a visual representation) then fit-to-view no longer works.</p> <p>This will be addressed in a future release and made into the default.</p> <p>With Multi-select or symmetry enabled, all selected markers will be selected in Maya, to make bulk edits via the Channel Box easier.</p> <p></p>"},{"location":"releases/2021.12.12/#manipulator-help","title":"Manipulator Help","text":"<p>On the right-hand side is an overview of the hotkeys and mouse button combinations you can use, and what they do.</p> <p></p> <p>It can be hidden via the HUD button on the upper right-hand side.</p> <p></p> <p></p>"},{"location":"releases/2021.12.12/#quality-of-life","title":"Quality of Life","text":"<p>More of this!</p> <p></p>"},{"location":"releases/2021.12.12/#1d-2d-and-3d-limits","title":"1D, 2D and 3D Limits","text":"<p>Ragdoll used to have a preference as to which axes you use for limits.</p> <p></p> <ol> <li><code>X</code> is great for 1D limits, like a hinge, elbow or knee</li> <li><code>YZ</code> is great for 2D limits, like a shoulder or hip</li> </ol> <p>But <code>XY</code> is no good. <code>XZ</code> is also bad. And god forbid you should attempt use <code>Y</code> or <code>Z</code> as a hinge limit. Ragdoll would try, but try in vain.</p> <p>Knowing which combination to use is not easy, and now you no longer have to. Pick an axis, any axis or combination of axes and Ragdoll will figure things out on its end. You don't have to worry about it.</p> <p>As an added bonus, the limit axis now aligns with your Maya axis! (with one caveat, see below)</p> <p>Here's a table to make this absolutely clear. \ud83e\udd70</p> Maya Rotate Axis Ragdoll Limit Axis <code>X</code> = <code>X</code> <code>Y</code> = <code>Y</code> <code>Z</code> = <code>Z</code> <p>Caveat</p> <p>With one exception, see Asymmetrical Limits under Limit Mode above. As soon as they rotate, they will no longer align with Maya; which isn't a problem most of the time, but can be.</p> <p></p>"},{"location":"releases/2021.12.12/#cache-on-record","title":"Cache On Record","text":"<p>Previously, when you recorded your simulation back onto your character rig, a new simulation would kick in the next time you played. And because your character rig has now changed - to follow the original simulation - the new simulation will be different.</p> <p>This makes logical sense but can be unexpected. So now, the <code>Cache</code> attribute on the solver is automatically enabled to let you compare and contrast your character rig with the simulation; and avoid needless re-simulating when what you really wanted was to record-and-forget.</p> <p></p> <p>Once you're ready to re-simulate, run the <code>Uncache</code> command or set the <code>Cache</code> attribute back to <code>Off</code>.</p> <p></p> <p></p>"},{"location":"releases/2021.12.12/#faster-deltas","title":"Faster Deltas","text":"<p>Pose Deltas are now cleaner and more performant (up to 10x).</p> <p>Deltas are the triangular-looking shapes drawn to visualise the difference between your animation and the current simulation. They are now only drawn when there is at least some difference, which means the vast majority of them in a complex scene are now not drawn, speeding up your viewport significantly.</p> <p>Before</p> <p></p> <p>After</p> <p>Notice how they only appear if there is actually a difference between the animation and simulation.</p> <p></p> <p></p>"},{"location":"releases/2021.12.12/#ground-fits-grid","title":"Ground Fits Grid","text":"<p>Previous releases would put a ground underneath the first assigned controls, with a size relative the size of your selection.</p> <p>Turns out, this wasn't great in practice and usually ended up being too small. In this release, the ground inherits whatever size your viewport grid is.</p> <p></p> <p></p>"},{"location":"releases/2021.12.12/#auto-limits-ii","title":"Auto Limits II","text":"<p>The previous release introduced Auto Limits whereby Ragdoll would look at the locked-state of your <code>Rotate</code> channels and try to figure out how to replicate this effect physically.</p> <p>This sometimes worked, sometimes not. This release fixes that, covering all combinations of locked channels, with any manner of joint or rotate axis.</p> <p>Here's what locking the Rotate channels will result in.</p> <p></p> <p>Unlocking them, we can see how much of an effect it has.</p> <p></p> <p>Thanks to the more robust and predictable limits in this release, the Maya axis will now always align with the Ragdoll limit axes!</p> <p></p>"},{"location":"releases/2021.12.12/#lollipop-hierarchy","title":"Lollipop Hierarchy","text":"<p>The <code>Create Lollipop</code> option of Markers generates an extra control shape in the viewport that you can use to manipulate a Marker. The goal being to make it easier to spot a Marker in a potentially busy channel box.</p> <p>But the last release didn't let you use <code>Assign Hierarchy</code> with <code>Create Lollipop</code> without ending up with a broken hierarchy.</p> <p>Before</p> <p></p> <p>After</p> <p></p> <p></p>"},{"location":"releases/2021.12.12/#disappearing-limits","title":"Disappearing Limits","text":"<p>The limit indicator is drawn using a 2D drawing API which is initialised whenever a Solver is created. It was however uninitialized whenever any Solver was deleted, so if you had 2 solvers you were out of luck. A re-open of the scene would fix it, but it was annoying and incorrect.</p> <p>This has now been fixed.</p> <p></p>"},{"location":"releases/2021.12.12/#replace-intermediate-mesh","title":"Replace Intermediate Mesh","text":"<p>In the previous release, if a mesh had a second \"intermediate\" mesh it would be more difficult to use it with the <code>Replace Mesh</code> command.</p> <p>Before</p> <p></p> <p>After</p> <p>Here's it working with intermediate shapes, and the new <code>Maintain History</code> option which was always true in the previous release.</p> <p></p> <p>Without it, modifications to the original mesh are ignored; such as a skinned mesh.</p> <p></p> <p></p>"},{"location":"releases/2021.12.12/#transform-limits","title":"Transform Limits","text":"<p>Recording onto transforms with Maya's native limits on them could result in this.</p> <p></p> <p></p> <p>This has now been fixed.</p> How? <p>Since you asked, they are simply disabled. I've never seen or heard of anyone actually using these and was surprised to find they were in active use by the native motion capture library that ships with Maya.</p> <p>If you or anyone you know do use them, let me know and they will be given support.</p> <p></p> <p></p>"},{"location":"releases/2021.12.12/#separate-translate-xyz-amount","title":"Separate Translate XYZ Amount","text":"<p>The <code>Pose Stiffness</code> in <code>World</code> space affected each axis equally.</p> <p>You can now control each axis independently, to for example follow an input animation closely along the ground plane, the X and Z-axes, but allow for it to deviate along the Y-axis,</p> <p></p> <p></p>"},{"location":"releases/2021.12.12/#separate-twist-and-swing-amount","title":"Separate Twist and Swing Amount","text":"<p>The <code>Pose Stiffness</code> and <code>Pose Damping</code> parameters of Markers apply to both Swing and Twist - that is, rotations around the X and YZ axes.</p> <p>You can now control these independently, for an even finer control over the resulting simulation.</p> <p></p> <p></p>"},{"location":"releases/2021.12.12/#maya-exit","title":"Maya Exit","text":"<p>There was a memory leak, whereby Maya would sometimes freeze on exit, with an anomymous-looking dialog box appearing on Windows.</p> <p></p> <p>This has been fixed.</p> <p></p>"},{"location":"releases/2021.12.12/#customised-recording","title":"Customised Recording","text":"<p>Some rigs don't work with Maya's default Parent and Orient constraint. As a result, neither does <code>Record Simulation</code> or <code>Snap to Simulation</code> because those commands use these default constraints.</p> <p>If this is you, then I have good news. You can now override the command responsible for creating these constraints with one that uses your custom in-house constraints instead.</p> <ul> <li>Custom Attach</li> </ul>"},{"location":"releases/2021.12.15/","title":"Minor Tweaks","text":"<p>Minor maintenance release.</p> <ul> <li>FIXED Unselectable Viewport Icons Happened from time to time</li> <li>FIXED Clean Channel Box An option to clean or not to clean</li> <li>FIXED Legacy Viewport A rare case of unselectable widgets in the Manipulator UI.</li> <li>FIXED Overlap Group for non Grouped Markers Markers not part of a group would have trouble respecting its overlap group</li> <li>FIXED Z-up The ground was tweaked, and with it Z-up lost support</li> <li>FIXED Double HUD The manipulator could overlap Maya's native HUD, but no more</li> <li>ADDED Fine-grained control over unconvenitional orientations</li> </ul> <p></p>"},{"location":"releases/2021.12.15/#showcase","title":"Showcase","text":"<p>As is tradition, we must start with candy. Now, it's only been 3 days so all I have for you today is this amazing piece of animation here. \ud83d\ude05</p> <p>Wyvern 2</p> <p>Follow-up to the WIP from last release from The Wizard, a.k.a. Jason Snyman.</p> <ul> <li>See on LinkedIn</li> </ul> <p></p> <p>Wasp</p> <p>Here's a response to a question on LinkedIn about whether or not you can use Ragdoll to make animation cycles. So here are 3 parts.</p> <ol> <li>The finished cycle</li> <li>The input animation</li> <li>The default simulation, before cycling it</li> </ol> <p>Total time spent 1h, including rigging and skinning. The model is a default Maya model from the Content Browser.</p> <p></p> <p></p>"},{"location":"releases/2021.12.15/#clean-channel-box","title":"Clean Channel Box","text":"<p>With the manipulator in the last release, the Channel Box saw a huge spring cleaning.</p> Before After <p>It was, however, a little too aggressive. Some of the attributes were still useful, especially for making sweeping changes across lots of markers at once. So in this release, you know have the option of:</p> <ol> <li>Having these attributes visible on <code>Assign</code> via the Option Dialog</li> <li>Toggling these attributes on/off via <code>Ragdoll -&gt; Utilities -&gt; Toggle Marker Attributes</code></li> </ol> <p></p> <p></p> <p></p>"},{"location":"releases/2021.12.15/#legacy-viewport","title":"Legacy Viewport","text":"<p>More specifically, the environment variable <code>MAYA_ENABLE_VP2_PLUGIN_LOCATOR_LEGACY_DRAW</code>, is still in use in some studios. This variable would cause the Manipulator UI to be unselectable.</p> <p></p> <p>This has now been fixed.</p> <p></p>"},{"location":"releases/2021.12.15/#collision-group","title":"Collision Group","text":"<p>Lone markers, like boxes and other environment assets and props have an <code>Overlap Group</code> like any other. But unless they are also part of a group, they would sometimes not respect the <code>Overlap Group</code>, requiring a scene re-open in order to take effect.</p> <p>This has now been fixed.</p> <p></p>"},{"location":"releases/2021.12.15/#z-up","title":"Z-up","text":"<p>The default ground now correctly fits the grid even in a Z-up Maya scene.</p> <p></p>"},{"location":"releases/2021.12.15/#double-hud","title":"Double HUD","text":"<p>The Manipulator HUD could sometimes fight with Maya's default HUD. Now it'll step aside temporarily until the manipulator is done.</p> <p></p> <p>Room to improve</p> <p>It will temporarily toggle the Maya HUD on/off in the currently active viewport, based on the viewport your mouse is currently hovering. This can get finnicky sometimes. If it does, the option toggled is the one under <code>Display -&gt; HUD</code> in the Maya viewport.</p> <p>This will be improved in a future release.</p> <p></p>"},{"location":"releases/2021.12.15/#robust-viewport-icons","title":"Robust Viewport Icons","text":"<p>The viewport icons would sometimes be unselectable.</p> <p></p> <p>This was due to Maya being unable to provide Ragdoll with the correct \"Active View\", which Ragdoll uses to map your mouse to 3D. This has now been fixed, by no longer relying on the Active View.</p> <p></p>"},{"location":"releases/2021.12.15/#edit-constraint-frames","title":"Edit Constraint Frames","text":"<p>The previous release simplified limits by a lot, but there are still cases where the default orientation of some rig controls ends up in a funny situation.</p> <p></p> <p>Note</p> <p>This does not matter to the simulation. It is only a rendering artefact.</p> <p>To make this a little easier to work with, you can rotate the entire limit like this.</p> <p></p> <p>Note</p> <p>You don't need the locators once you are done editing them, you should definitely delete them.</p> <p>This will be made redundant in a future version as it gets much too technical and too easy to shoot yourself in the foot. If you make a mistake, delete the locators and call <code>Reset Constraint Frames</code> in the same menu to start again.</p>"},{"location":"releases/2022.01.17/","title":"Import and Export for Markers","text":"<p>Highlight for this release is Ragdoll 2.0!</p> <ul> <li>ADDED Ragdoll 2.0 Talk about next-gen!</li> <li>ADDED Export &amp; Import Export physics from one scene and import into another</li> <li>ADDED Density Automatically compute the mass based on shape volumes</li> <li>ADDED Level of Detail Manage complexity with two or more levels of detail</li> <li>ADDED Truly Non-keyable Feedback on whether or not an attribute is keyable or not</li> <li>ADDED Markers API The API has been reinvigorated with Markers</li> <li>FIXED Mandarin Serial Number Unicode mishap led to a non-sensical message in Mandarin</li> <li>FIXED Delta Drawing Bug Funny drawing in the viewport has been fixed</li> <li>FIXED Shape Sync Changes to shape properties outside of the start frame could leave Ragdoll and Maya out of sync</li> <li>ADDED Max Mass Ratio Keeping you safe</li> <li>ADDED Profiler View An in-depth look at where Ragdoll spends its time</li> <li>ADDED DirectX Windows users rejoice, DirectX is here</li> <li>FIXED Crash on Deleted Mesh Replace a mesh, delete it and crash no more.</li> <li>DEPRECATED Legacy API All legacy Python functionaliy now resides in its own package</li> <li>DEPRECATED Removed attributes These attributes were harmed in the making of this release.</li> </ul> <p></p>"},{"location":"releases/2022.01.17/#showcase","title":"Showcase","text":"<p>Let's start with the good stuff.</p> <p>Medusa Breakdown</p> <p>Excellent Animation and breakdown by Andras Ormos.</p> <ul> <li>https://youtu.be/6wsnvsyNGYQ</li> </ul> <p></p> <p>Batman Learning Cursive</p> <p>Animation by Jason Snyman, with a very interesting approach to getting ink out of a pen digitally. \ud83d\ude04</p> <p></p> <p></p> <p>DMV Lady</p> <p>Courtesy of Dragana Mandic.</p> <ul> <li>On LinkedIn</li> </ul> <p></p> <p>Scalable Rig, Scalable Ragdoll</p> <p>No special setup required, if your rig is scalable then so is Ragdoll.</p> <p></p> <p>Circus Import</p> <p>Toying with the ability to import characters into the same solver.</p> <p></p> <p>The Ocean</p> <p>Give a man a fish, and you'll feed him for 2 ragdolls.</p> <p></p> <p></p> <p>Noodles</p> <p>Something from the Linux world.</p> <p></p> <p></p>"},{"location":"releases/2022.01.17/#ragdoll-20","title":"Ragdoll 2.0","text":"<p>Since 28<sup>th</sup> July 2021, Ragdoll has been publicly available under the \"early bird\" umbrella. It started out with a reduced price point for those brave enough to venture into new territory and expect a few left turns every now and then as kinks are worked out in the software.</p> <p>Now the time has come to step into the world as an adult piece of software with the guarantees of any commercially available software and a pricing to reflect that.</p> <p>And as Ragdoll has grown significantly since those days - given the new Markers - it's only reasonable to consider this Ragdoll 2.0.</p> <p></p> <p></p>"},{"location":"releases/2022.01.17/#january-voucher","title":"January Voucher","text":"<p>Pricing has now reached its intended price point, leaving Early Bird behind. For the next two weeks however, you can use this voucher code to get the Early Bird discount before the deadline.</p> <ul> <li>Valid for: <code>Ragdoll Unlimited</code></li> <li>Voucher Code: <code>uX1bFhjZ</code></li> <li>Purchase Page: https://ragdolldynamics.com/pricing-commercial</li> </ul> <p></p> <p></p>"},{"location":"releases/2022.01.17/#looking-back","title":"Looking Back","text":"<p>The Ragdoll of today is very different from the Ragdoll of July 2021.</p> <p>Back then, I had no idea that this amount of performance and usability was possible and was prepared to cram tutorials and documentation until everyone was accustomed to the complexity of physics simulation. \ud83d\ude04</p> <p>But then something happened - Markers. Like lightning from a clear sky, it unexpectedly changed everything. Performance is now far beyond what Maya is expected to handle, with physics much much faster than simply skinning of a character, and close to the performance of native IK handles. This opens up a lot of possibilities.</p> <p></p> <p>The problems faced back then..</p> <ul> <li>Like the massive endevour starting a simulation wherever your character was.</li> <li>Or the need for controls other than your rig to actually animate the thing</li> <li>Not to mention the constant chasing of supporting Maya's numerous ways of affecting the position and orientation of your controls, from rotate axes, to rotate pivots, to scale , to....</li> </ul> <p>None of those problems are a problem with Markers. Because Markers look at the world from a different perspective, they just work. It made Ragdoll not only more user friendly and significantly faster but also simpler to develop and smaller in size. The code for Markers is about \u2153 of the equivalent for Rigids. Just think about that!</p> <p>And most of all, it opened up for all the things you are about to see happen for Ragdoll in the coming months. \ud83d\ude43</p> <p></p>"},{"location":"releases/2022.01.17/#ragdoll-flavours","title":"Ragdoll Flavours","text":"<p>Let's take a quick look at the different versions of Ragdoll and how they differ.</p> Flavour Description Ragdoll Unlimited The fully-featured, unrestricted version of Ragdoll. When people talk about Ragdoll, this is the version they mean. Ragdoll Complete The cost-effective flavour of Ragdoll, suitable for freelancers and indie studios. It lacks studio-conveniences such as a Python API for pipeline integration, export to JSON for sharing of physics configurations and is less performant than \"Ragdoll Unlimited\", being unable to operate in parallel across multiple cores. Ragdoll Batch A non-interactive version without ability to render into the viewport. Suitable for automation and pipeline integration. Ragdoll Personal A non-commercial version, suitable for students and anyone wanting to fool around with Ragdoll at home. It is identical to Unlimited, except that it has limits on how much can be recorded and exported. Ragdoll Educational A non-commercial version of Ragdoll Unlimited whose saved scenes cannot be opened with a commercial licence. Ragdoll Trial A non-commercial first experience with Ragdoll; this is what you get when downloading Ragdoll onto a new machine and use it without activating it first. Similar limitations to Personal, except it also expires about a month after first use. <p></p>"},{"location":"releases/2022.01.17/#ragdoll-unlimited","title":"Ragdoll Unlimited","text":"<p>This is the version you want.</p> <p></p> <p>It contains everything mentioned on any website, is capable of doing everything you've seen Ragdoll do and is the unrestricted, unlimited and gold standard of Ragdoll.</p> <p></p>"},{"location":"releases/2022.01.17/#ragdoll-complete","title":"Ragdoll Complete","text":"<p>This is the version for freelancers.</p> <p></p> <p>It is Ragdoll Unlimited, with a few limitations.</p> <ol> <li>Limited Performance</li> <li>Limited Export</li> <li>Limited Python API</li> </ol> <p>Performance is limited in how quickly Ragdoll is able to read from your character. Ragdoll is natively parallel, but Complete turns any character you assign markers to into a Serial affair. Limiting performance by the number of cores you have in your machine.</p> <p>The advantage of export is that your rigs don't need physics built-in. They can remain simple and without physics, until the animator actually needs it. This feature is limited to 10 markers; for the time being. Generally, export is reserved for Unlimited and users in need of pipeline integration. But Complete let's you get at least a taste of the comfort and flexibility of exporting your physics contraptions from one scene and importing onto an unsuspecting character in another.</p> <p>Like Export, the ability to interact with Ragdoll through Python is an important part of any production pipeline; not so much for the individual animator of small indie studio.</p> <p>Info</p> <p>At the time of this writing, this limitation is not yet in place, and users of Complete is currently able to utilise the Python API just like users of Unlimited. This will be addressed in an upcoming release.</p> <p></p>"},{"location":"releases/2022.01.17/#ragdoll-batch","title":"Ragdoll Batch","text":"<p>This is the version for your render farm.</p> <p></p> <p>It's a low-cost alternative to Ragdoll Unlimited, without the ability to render into the viewport. Making it effectively useful only via Python. It is also unable to export and lacks the parallelism of Unlimited.</p> <p>Unlike all other flavours, a Batch licence is reserved per-process; meaning that if you spin up 2 <code>mayapy</code> instances on the same machine, it will occupy 2 licences. This obviously only works if your licences are floating, as otherwise a machine can only carry a single node-locked licence, limiting it to a single process running Ragdoll Batch.</p> <p></p> <p></p>"},{"location":"releases/2022.01.17/#ragdoll-feature-grid","title":"Ragdoll Feature Grid","text":"<p>Leaving Early Access, Ragdoll is stepping into the world as a 1.0. Here's an overview of what you can expect from now on.</p> Feature Trial Personal Complete Unlimited Batch Commercial Use \u274c \u274c \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Interactive Tools \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c Python API \u2714\ufe0f \u2714\ufe0f \u274c \u2714\ufe0f \u2714\ufe0f Multi-Threading \u2714\ufe0f \u2714\ufe0f \u274c \u2714\ufe0f \u274c JSON Import/Export \u2714\ufe0f \u2714\ufe0f \u274c \u2714\ufe0f \u274c Per-machine Licence \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c <p><code>Batch</code> has a per-process licence, meaning it will occupy one seat per individually running process.</p> <p></p>"},{"location":"releases/2022.01.17/#non-commercial-limitations","title":"Non-commercial Limitations","text":"<p>Trial and Personal licences are non-commercial, meaning they can't be used for commercial purposes. Such as in a studio, or for anything where money is involved.</p> <p>When a file saved with a non-commercial licence of Ragdoll is opened in a commercial licence, it'll temporarily turn your licence into a non-commercial licence.</p> Feature Unlimited Complete Non-commercial Export Unlimited markers Up to 10 markers Up to 10 markers Record Unlimited frames Unlimited frames Up to 100 frames <p>Early Birds</p> <p>Did you purchase a Ragdoll Personal licence before this release?</p> <p>Then as thanks for believing in us and joining early, these limits do not apply to you. Your version is still unrestricted for non-commercial use.</p> <p>Enjoy! \ud83e\udd70</p> <p></p>"},{"location":"releases/2022.01.17/#import","title":"Import","text":"<p>You can now import a Ragdoll setup exported from Maya, back into Maya. It'll re-create everything just the way it was.</p> Can I export scenes I made with an earlier version? <p>Yes, anything made with Markers can be exported regardless of when it was made.</p> What is included in the export? <p>Just about everything.</p> <ul> <li>Solvers</li> <li>Groups</li> <li>Markers</li> <li>Constraints</li> <li>Colors</li> <li>Attribute changes</li> <li>Retargeting</li> <li>Reparenting</li> <li>Replaced meshes</li> <li>Thumbnail of your viewport</li> </ul> What isn't included in the export? <p>Very little.</p> <ul> <li>The mesh itself is not stored, the mesh is expected to come from your rig. Including any mesh you replace. This may be added in a future release.</li> <li>The cached simulation, although it will be soon.</li> </ul> Will I get identical results when simulating an imported scene? <p>Yes, anything else is a bug.</p> <p>More precisely, determinism depends on (1) the type and number of items in the solver along with (2) the order in which these are created. Both of these are part of the exported file format and is taken into account during import. Meaning you should get identical results so long as the content is the same.</p> <p></p>"},{"location":"releases/2022.01.17/#example","title":"Example","text":"<p>Here's an exported Ragdoll setup for the free CG Spectrum Tiger rig.</p> <ul> <li>Download Ragdoll file (<code>2.8 mb</code>)</li> <li>Download Rig</li> </ul> <p>To use it, download the rig and import the Ragdoll file.</p> <p> </p> <p>It contains 2 levels of detail.</p> Level Content Level 0 Body and feet Level 1 Everything on Level 0, plus toes <p></p> <p></p>"},{"location":"releases/2022.01.17/#workflow","title":"Workflow","text":"<p>Here's the rundown.</p> <ol> <li>Assign markers</li> <li>Tweak values</li> <li>Export</li> <li>Open a new scene, with the same character</li> <li>Import</li> </ol> <p>On import, Ragdoll will try and find the names of what you exported in your currently opened scene.</p> <ul> <li>If all names match, import should go smoothly. Preserving all of your hard work!</li> <li>If names do not match, if for example the namespace differs, there is an option to override the namespace from the file via the <code>Namespace</code> dropdown menu.</li> <li>If names don't match at all, if for example it was grouped differently on export or it is a different character altogether, then you can try using the <code>Search and Replace</code> fields to modify the names searched for by Ragdoll.</li> </ul> <p>Export</p> <p>Once you're happy with your character, it's time to export. Towards the bottom of the UI, you'll get a preview of what is about to be exported. This can help clarify that what ends up on disk is what you expect.</p> <p></p> <p>Import</p> <p>In a new scene, with the same character, same names and everything, import as you'd expect. At the bottom of this UI, you'll get a preview of what's in the file on disk, along with how it will associate the node names found in the file with what you have on disk.</p> <p></p> <p></p>"},{"location":"releases/2022.01.17/#namespace-from-file","title":"Namespace from File","text":"<p>Odds are, the character you're importing either has no namespace, or has a different namespace to what you've currently got in your scene. As in this example here, with 3 copies of the same character, each with its own namespace.</p> <p>Use the <code>Namespace</code> dropdown to select one of the current namespaces in your scene, or <code>Custom</code> to type one in yourself.</p> <p></p> <p></p>"},{"location":"releases/2022.01.17/#solver-from-file","title":"Solver from File","text":"<p>Per default, Ragdoll will import the file into the current solver in your scene, if any. Or, you can import the original solver from the source file.</p> <p></p> <p></p>"},{"location":"releases/2022.01.17/#known-limitations","title":"Known Limitations","text":"<p>Here are a few things that will be addressed over time. Let us know if you encounter anything else!</p> <ul> <li>https://ragdolldynamics.com/chat</li> </ul> Limitation Result Missing Replaced Mesh If you replace the mesh of a marker, but this mesh isn't present in the scene during import, you'll get a Capsule instead. The vertices of the geometry isn't stored in the exported file, only the name of the mesh you replaced with. Linked Solvers These turn into a single, unified solver on import. <p></p>"},{"location":"releases/2022.01.17/#density","title":"Density","text":"<p>Ragdoll can now automatically compute a suitable mass for each Marker, based on the volume of your shape and a density of your choosing.</p> <p>In other words, big objects become heavy, small objects become light.</p> <p>Before</p> <p></p> <p>After</p> <p></p> <p></p>"},{"location":"releases/2022.01.17/#presets","title":"Presets","text":"<p>Provide a custom density, or choose from one of the provided ones.</p> Density Value <code>Off</code> Do not compute, use the <code>Mass</code> attribute <code>Cotton</code> Very sparse, 0.05 grams per cubic centimeter <code>Wood</code> Sparse, 0.2 grams per cubic centimeter <code>Flesh</code> Default, 1.0g/cm3 <code>Uranium</code> Dense, 19.0g/cm3 <code>Black Hole</code> Very, very dense <code>Custom</code> You pick <p>Mass is computed based on the volume of your shape, along with a density of your choosing.</p> <p></p> <p></p>"},{"location":"releases/2022.01.17/#options","title":"Options","text":"<p>Choose between various densities either at creation-time or after creation.</p> <p></p> <p></p>"},{"location":"releases/2022.01.17/#visualise","title":"Visualise","text":"<p>The computed mass updates interactively as you change the size and type of your shape, including convex hulls!</p> <p></p> <p>In the Manipulator, you'll be able to not only only edit the density, but preview the computed mass given the current shape volume and density you provide.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"releases/2022.01.17/#level-of-detail","title":"Level of Detail","text":"<p>Setup your character once with all bells-and-whistles, and interactively pick which level of detail to use for your simulation in a given situation.</p> <p></p> <p>Usecases</p> <ol> <li>Body at <code>Level 0</code>, fingers at <code>Level 1</code></li> <li>Props at <code>Level 1</code>, muscles at <code>Level 2</code></li> <li>Major masses at <code>Level 0</code>, extremities at <code>Level 1</code> and <code>Level 2</code></li> </ol> <p>For example, here's a Wasp character with 3 levels of increasing detail.</p> <p></p> <p>As you'd expect, it'll record only the currently active markers.</p> <p></p> <p></p>"},{"location":"releases/2022.01.17/#workflow_1","title":"Workflow","text":"<p>Here's how it works.</p> <ol> <li>Give each marker a \"level\", such as <code>1</code></li> <li>Tell solver which \"level\" to solve at, such as <code>1</code></li> </ol> <p></p> <p>And that's it! Any marker with a matching level is simulated and recorded.</p> <p></p>"},{"location":"releases/2022.01.17/#operators","title":"Operators","text":"<p>What does each level mean? The answer lies in the \"operator\".</p> Operator Description <code>Less Than</code> If the <code>Marker Level</code> is less than (or equal) to the <code>Solver Level</code>, simulate it. <code>Greater Than</code> If the <code>Marker Level</code> is greater than (or equal) to the <code>Solver Level</code>, simulate it. <code>Equal</code> If the <code>Marker Level</code> is equal to the <code>Solver Level</code>, simulate it. <code>NotEqual</code> If the <code>Marker Level</code> is not equal to the <code>Solver Level</code>, simulate it. <p>With these, you can use each level for..</p> <ol> <li>An increasing amount of detail</li> <li>An increasing amount of reduction</li> <li>Something completely custom</li> </ol> <p>With <code>Equal</code> and <code>NotEqual</code> operators, you can have some markers appear or disappear on particular levels, enabling endless combinations.</p> <p>Roadmap</p> <p>This should cover a majority of cases, but there are things you cannot yet do, but will be able to in the future.</p> <ol> <li><code>Capsule</code> on one level, <code>Mesh</code> on another. For higher-resolution contacts.</li> <li>Dense hierarchy of controls at one level, sparse at another. For e.g. twist joints versus a simple 2-joint chain, or a densely packed spine versus just hip and torso controls.</li> </ol> <p></p>"},{"location":"releases/2022.01.17/#algorithm","title":"Algorithm","text":"<p>For the geeks out there, here's what the underlying algorithm looks like in Python.</p> <pre><code># Membership types\nMinimum = 1  # Present at this level and higher\nMaximum = 3  # Present at this level and lower\nOnly = 4     # Only present at this level\nNot = 5      # Present at all levels *except* this one\n\nmarkers = [\n    {\"name\": \"hip\", \"level\": 0, \"membership\": Minimum},\n    {\"name\": \"spine\", \"level\": 0, \"membership\": Minimum},\n    {\"name\": \"neck\", \"level\": 0, \"membership\": Minimum},\n    {\"name\": \"head\", \"level\": 0, \"membership\": Minimum},\n    {\"name\": \"L_upper_leg\", \"level\": 0, \"membership\": Minimum},\n    {\"name\": \"L_lower_leg\", \"level\": 0, \"membership\": Minimum},\n    {\"name\": \"R_hand\", \"level\": 1, \"membership\": Minimum},\n    {\"name\": \"L_foot_box\", \"level\": 1, \"membership\": Maximum},\n    {\"name\": \"L_foot_convex\", \"level\": 2, \"membership\": Minimum},\n    {\"name\": \"R_toe_capsule\", \"level\": 2, \"membership\": Not},\n    {\"name\": \"R_toe_convex\", \"level\": 2, \"membership\": Only},\n]\n\ndef resolve(level):\n    print(\"Level %d\" % level)\n    for marker in markers:\n        if marker[\"membership\"] == Minimum and marker[\"level\"] &lt;= level:\n            print(\" - {name} ({level})\".format(**marker))\n\n        if marker[\"membership\"] == Maximum and marker[\"level\"] &gt;= level:\n            print(\" - {name} ({level})\".format(**marker))\n\n        if marker[\"membership\"] == Only and marker[\"level\"] == level:\n            print(\" - {name} ({level})\".format(**marker))\n\n        if marker[\"membership\"] == Not and marker[\"level\"] != level:\n            print(\" - {name} ({level})\".format(**marker))\n\nresolve(0)\nresolve(1)\nresolve(2)\n</code></pre> <p>Run this, and this is what you'll find.</p> <pre><code>Level 0\n - hip (0)\n - spine (0)\n - neck (0)\n - head (0)\n - L_upper_leg (0)\n - L_lower_leg (0)\n - L_foot_box (1)\n - R_toe_capsule (2)\nLevel 1\n - hip (0)\n - spine (0)\n - neck (0)\n - head (0)\n - L_upper_leg (0)\n - L_lower_leg (0)\n - R_hand (1)\n - L_foot_box (1)\n - R_toe_capsule (2)\nLevel 2\n - hip (0)\n - spine (0)\n - neck (0)\n - head (0)\n - L_upper_leg (0)\n - L_lower_leg (0)\n - R_hand (1)\n - L_foot_convex (2)\n - R_toe_convex (2)\n</code></pre> <p></p>"},{"location":"releases/2022.01.17/#markers-api","title":"Markers API","text":"<p>With the retirement of the legacy Python API, a new Markers API is now available.</p> <ul> <li>API Documentation</li> <li>API Reference</li> </ul> <pre><code>from maya import cmds\nimport ragdoll.api as rd\n\nbox = cmds.polyCube()\n\nsolver = rd.createSolver()\nmarker = rd.assignMarker(box[0], solver)\n\nrd.recordPhysics()\n</code></pre> <p>The new export and import mechanic can be accessed from here too.</p> <pre><code>import ragdoll.api as rd\nfname = r\"c:\\path\\to\\my_ragdoll.rag\"\n\n# Get everything out\nrd.exportPhysics(fname)\n\n# Remove everything\nrd.deleteAllPhysics()\n\n# Bring everything back\nrd.reinterpretPhysics(fname)\n</code></pre> <p></p>"},{"location":"releases/2022.01.17/#legacy-api","title":"Legacy API","text":"<p>The old Rigid API is still accessible under a new home.</p> <pre><code>from ragdoll.legacy import commands\ncommands.create_active_rigid()\ncommands.create_point_constraint()\n# ...\n</code></pre> <p>But will be removed entirely soon, so do transition away from it ASAP.</p> <p></p>"},{"location":"releases/2022.01.17/#quality-of-life","title":"Quality of Life","text":"<p>Make it more difficult to make mistakes with these new additions. \ud83d\ude0a</p> <p></p>"},{"location":"releases/2022.01.17/#max-mass-ratio","title":"Max Mass Ratio","text":"<p>With <code>Density</code>, there's a chance Markers get Ragdoll into a situation it does not like; namely that the difference between masses are too great.</p> Give me the technical details <p>As you wish. \ud83e\udd13</p> <p>Ragdoll doesn't like differences any greater than 10x, sometimes 100x, else it can fail or become unstable. For example, if the torso of your character has a mass of 100kg, and the foot Marker has a mass of 0.5kg, that's a ratio of 100/0.5 = 200x which is far greater than Ragdoll would like. As a result, the body would crush the foot which would be unable to properly hold the entire body up.</p> <p>Up until now, the masses on all Markers have had a default value of 1kg. Meaning that regardless of the size of a Marker - be it the torso, the head or tip of a finger - it would always have a mass of 1.0. As a result, hands would typically end up far heavier than the rest of the body.</p> <p>Before</p> <p>Here's an example of the solver failing. There are three identical chains, the tip of the last one having a mass of 10,000. That's 10,000x greater then each link in the chain. As a result, Markers separate; that is incorrect.</p> <p></p> <p>After</p> <p>If we limit the maximum ratio to just 1000x, we get the correct behavior. You can also see how it affected the other two chains. They now behave more similarly, because in order to ensure a mass ratio across the whole system, the mass of their tips need to be reduced as well.</p> <p></p> <p>The new <code>Max Mass Ratio</code> attribute protects against these situations, letting you give objects a suitable mass and only have to worry about which should weigh more, and which should weigh less. Ragdoll will balance everything out before passing it along to be simulated.</p> <p>What are the consequences?</p> <p>Sometimes, large mass ratios are what you want. For example, a heavy weight on a string tends to do quite well with ratios up to 1000x. But markers being crushed by another marker 1000x its weight tends to not do as well.</p> <p>So the result is less of an effect at the extreme ratios.</p> <p>In the Manipulator, you can preview the final mass used given the density and the ratio you specified.</p> <p></p> <p></p>"},{"location":"releases/2022.01.17/#directx","title":"DirectX","text":"<p>Look. Closely. Look. Closlier.</p> <p></p> <p>That's right! You've now got the option to use Ragdoll with Maya in DirectX viewport mode.</p> <p></p>"},{"location":"releases/2022.01.17/#truly-non-keyable","title":"Truly Non-keyable","text":"<p>Some Ragdoll attributes are keyable, others are not. Which is which? Impossible to say. Until now!</p> <p></p> <p>On attempting to keyframe a non-keyable attribute, you'll now see an error message along with a visual cue things might not work out the way you expect. As opposed to happily setting that keyframe but then ignoring it once the simulation starts, like it used to.</p> <p>A little quality of life for ya'!</p> <p>Pro-tip for Riggers</p> <p>There are at least 2 ways to prevent non-keyable attributes from being keyframed.</p> <ol> <li><code>MFnAttribute::setConnectable(false);</code></li> <li><code>MPxNode::legalConnection()</code></li> </ol> <p>The former means you are also unable to make a control and connect it to multiple non-keyable attributes. Like if you wanted to control <code>Mass</code> of a series of markers from a single source, or the <code>Overlap Group</code>.</p> <p>The latter on the other hand is more flexible. It allows Ragdoll to prevent connections to specific attributes or types of nodes, like <code>animCurve</code> nodes, which means animators won't be able to keyframe it but you'll still be able to build controls for it.</p> <p>And that's exactly how it works.</p> <p></p>"},{"location":"releases/2022.01.17/#delta-drawing-bug","title":"Delta Drawing Bug","text":"<p>The worldspace deltas were drawn separate from the marker they affected, which could produce a jarring effect especially when the solver position had been offset.</p> <p>Before</p> <p></p> <p>After</p> <p>This has now been fixed.</p> <p></p> <p>More Performance</p> <p>As an added bonus, we're now also doing 2 matrix multiplications less per frame, per marker. That kind of thing adds up quickly.</p> <p></p>"},{"location":"releases/2022.01.17/#shape-sync","title":"Shape Sync","text":"<p>If you play, pause and then change the <code>Shape</code> from <code>Box</code> to <code>Capsule</code> nothing happens. Because the shape, like many other attributes, can only be changed on the start frame.</p> <p>But, when you later returned to the start frame, the shape would still not update. This has now been fixed.</p> <p></p>"},{"location":"releases/2022.01.17/#profiler-view","title":"Profiler View","text":"<p>Mostly meant to keep the development of Ragdoll fast and interactive, you can now spot where most time is spent via the built-in Maya Profiler.</p> <p></p> <p>Here's what one frame of this looks like; 5 ms to both simulate and render Ragdoll in the viewport.</p> <p></p> <p></p>"},{"location":"releases/2022.01.17/#removed-attributes","title":"Removed Attributes","text":"<p>These attributes were no longer relevant in the last release, but were still present in the Channel Editor. These have now been hidden and will no longer be saved with your file. A few weeks from now, they will be removed.</p> <ul> <li><code>limitAutoOrient</code></li> <li><code>limitType</code></li> <li><code>limitAxis</code></li> <li><code>limitOffsetX</code></li> <li><code>limitOffsetY</code></li> <li><code>limitOffsetZ</code></li> <li><code>limitOffset</code></li> <li><code>limitRotationX</code></li> <li><code>limitRotationY</code></li> <li><code>limitRotationZ</code></li> <li><code>limitRotation</code></li> </ul> <p></p>"},{"location":"releases/2022.01.17/#mandarin-serial-number","title":"Mandarin Serial Number","text":"<p>It has come to my attention that the first thing every new user of Ragdoll sees is this dialog, with this message for a serial number.</p> <p>And yet..</p> <p>Nobody has said a thing! \ud83e\udd23</p> <p>Correction shout-out to @Rosaline for pointing this out just a few days ago!</p> <p></p> <p>According to my Mandarin-speaking friends, this is jibberish (or at least should be!) and is a result of badly translated Unicode to ASCII characters.</p> <p>This has now been fixed!</p> <p></p> <p></p>"},{"location":"releases/2022.01.21/","title":"Maintenance Release","text":"<p>Minor release with some fixed for you, especially Floating Licence users.</p> <ul> <li>ADDED Keyframe on Snap to Simulation More use for this nifty little feature</li> <li>FIXED Commarcial Floating Licences There was a glitch in the Matrix</li> <li>FIXED Limits excluded from import Limits were exported, but not imported</li> <li>FIXED Z-up is inconsistent Foolproof implementation</li> <li>FIXED Scaled Limits The manipulator stuggled to display limits when scaled</li> <li>FIXED Manipulator and Viewport Shadows Now visible even in the darkest of times</li> </ul> <p></p>"},{"location":"releases/2022.01.21/#snap-to-simulation","title":"Snap to Simulation","text":"<p>In addition to recording your simulation, you can also snap your rig to wherever the simulation is currently at.</p> <ul> <li>See original announcement</li> </ul> <p>However this only applied to things that aren't yet keyframed. Useful to layout and setting of an initial pose for your character.</p> <p>With this release, it will also keyframe your rig, such that you can use it to interactively animate a character on specific frames, as you simulate. You know what, it's easier to just show you. \ud83d\ude04</p> <p></p> <p></p>"},{"location":"releases/2022.01.21/#commercial-floating-licence","title":"Commercial Floating Licence","text":"<p>A glitch was found that turned Floating Licences into non-commercial licences, imposing the recording and exporting limits of 100 frames and 10 markers.</p> <p>This has now been fixed.</p> <p></p>"},{"location":"releases/2022.01.21/#limits-and-export","title":"Limits and Export","text":"<p>The new Import functionality introduced in the last version neglected to include limits, this has now been fixed!</p> <p></p>"},{"location":"releases/2022.01.21/#z-up-is-inconsistent","title":"Z-up is Inconsistent","text":"<p>One user experienced having their gravity turned sideways, thinking Maya was configured with Z-up when really it was Y-up. It still unclear exactly why this happened, but the one potential edgecase has now been strengthened. If you experience gravity facing the wrong way, or the ground plane being orthogonal to your viewport grid, let us know!</p> <p></p>"},{"location":"releases/2022.01.21/#scaled-limits","title":"Scaled Limits","text":"<p>When your rig or controls are scaled, the Manipulator wasn't able to accurately provide you with the limit handles. This has now been fixed.</p> <p></p> <p></p>"},{"location":"releases/2022.01.21/#manipulator-and-viewport-shadows","title":"Manipulator and Viewport Shadows","text":"<p>It used to be the case that the manipulator became invisible whenever viewport shadows was enabled. This has now been fixed!</p>"},{"location":"releases/2022.02.01/","title":"Quality of Life","text":"<p>Highlight for this release is Quality of Life!</p> <ul> <li>UPDATED Kinematic &amp; Dynamic The two pillars of Ragdoll</li> <li>ADDED Group and Ungroup Markers can now be arbitrarily grouped</li> <li>ADDED Lollipop 2.0 More powerful, more flexible lollipops</li> <li>ADDED Match by Name Importing can now match by name, rather than the full hierarchy</li> <li>ADDED Record Range Options Undimmed and ready to go!</li> <li>ADDED Offline Activation Wizard Simpler than ever</li> <li>FIXED Scaled Limits The manipulator stuggled to display limits when scaled</li> <li>FIXED Scaled Replaced Meshes Replaced meshes didn't used to like being scaled</li> <li>FIXED More Robust Recording Also interactive and faster!</li> <li>FIXED Manipulator and Multiple Viewports Now easier on both the eyes and mind.</li> </ul> <p></p>"},{"location":"releases/2022.02.01/#showcase","title":"Showcase","text":"<p>Let's start with the good stuff.</p> <p>Pounce</p> <p>Our Manikin is stuck!</p> <p></p> <p></p> <p></p> <p>Batman Writes</p> <p>A behind-the-scenes from Jason's cool constraint setup.</p> <p></p> <p></p>"},{"location":"releases/2022.02.01/#kinematic-dynamic","title":"Kinematic &amp; Dynamic","text":"<p>Also known as \"Animated\" and \"Simulated\"</p> <p>Marker behaviour has been simplified.</p> <p></p> <p>Groups are now either <code>Kinematic</code> - for fully animated, no physics involved - or <code>Dynamic</code> for having things affected by gravity and contacts with other Markers.</p> <p>In the above example, I'm alternating between <code>Kinematic</code> and <code>Dynamic</code> for the entire character.</p> <p>Changed</p> <p>As part of this simplification, two things have changed.</p> <ol> <li><code>Initial State</code> was removed</li> <li><code>Pose Match</code> was renamed to <code>Dynamic</code></li> </ol> <p>Initial State can be achieved with <code>Dynamic</code> and a <code>Pose Stiffness</code> of <code>0</code>.</p> <p>And like before, individual markers can be overridden to be either <code>Kinematic</code> or <code>Dynamic</code>. When set to <code>Inherit</code> it continues to use whatever value was found in the group.</p> <p></p> <p>..speaking of which!</p> <p></p>"},{"location":"releases/2022.02.01/#group","title":"Group","text":"<p>In the previous version, a group was automatically created whenever you assign to a connected series of controls.</p> <p></p> <p></p> <p>This release enables you to group standalone markers too, and to retroactively group markers in any way you please.</p>"},{"location":"releases/2022.02.01/#new-group","title":"New Group","text":"<p>Select some markers, put them in a group.</p> <p></p>"},{"location":"releases/2022.02.01/#move-to-group","title":"Move To Group","text":"<p>Select one or more markers, along with a destination group, and move them.</p> <p></p>"},{"location":"releases/2022.02.01/#group-on-assign","title":"Group on Assign","text":"<p>When assigning markers, you are now also able to pick which group to put it into, or whether to make a new group. Or no group!</p> <p></p> <p></p>"},{"location":"releases/2022.02.01/#lollipop-20","title":"Lollipop 2.0","text":"<p>Lollipops now feature Marker and Group attributes in the Channel Box; less clicks!</p> <p></p>"},{"location":"releases/2022.02.01/#customisable","title":"Customisable","text":"<p>Rotate and scale the resulting lollipops to fit your rig and workflow.</p> <p></p>"},{"location":"releases/2022.02.01/#retroactive-lollipops","title":"Retroactive Lollipops","text":"<p>Should you have markers without a lollipop, assign them afterwards using the Lollipop menu item. This is also where you can customise which attributes should appear on them.</p> <p></p> <p>Pro tip</p> <p>The <code>Use Proxy Attributes</code> option makes attributes editable both on the Lollipop and on the original Marker. The downside however is that they make life in the Graph Editor less pleasant. \ud83e\udd14</p> With Proxy Attributes Without Proxy Attributes <p></p>"},{"location":"releases/2022.02.01/#quality-of-life","title":"Quality of Life","text":"<p>Some improvements and reshufflings to make your life more complete. \ud83e\udd70</p> <p></p>"},{"location":"releases/2022.02.01/#robust-recording","title":"Robust Recording","text":"<p>There hasn't yet been any rig not supported by Ragdoll, until last week when @mandala got in touch with a new challenge. A rig made with an rigging system plug-in called Contour.</p> <p></p> <p>Recording this rig results in cycle warnings, presumably because part of how it operates depends on viewport updates.</p> <p>In this update, there is a (default) <code>Nice and Steady</code> option for recording which ensures the viewport stays up-to-date with the dependency graph, and that did the trick!</p> <p></p> <p></p> <p></p>"},{"location":"releases/2022.02.01/#match-by-name","title":"Match By Name","text":"<p>Importing markers onto a character in a different group, or a different character altogether, could be tricky since their hierarchies would differ.</p> <p>There is now an option to find a matching control by name rather than its full path.</p> <p></p> <p>In this example, the character has a different parent group than when it was exported, changing all of the full paths to each control.</p> <p></p>"},{"location":"releases/2022.02.01/#scale-replace","title":"Scale Replace","text":"<p>In the case of scaled markers with a replaced mesh, this happened.</p> <p>Before</p> <p></p> <p>But no longer!</p> <p>After</p> <p></p> <p></p>"},{"location":"releases/2022.02.01/#offline-activation-wizard","title":"Offline Activation Wizard","text":"<p>The offline activation process has now been streamlined; no longer requiring an email conversation back and forth. It should take some of our load off, whilst at the same time enabling you to offline activate when we are sleeping. \ud83d\ude05</p> <ul> <li>https://learn.ragdolldynamics.com/licencing/#offline-activation</li> </ul> <p>Activation</p> <p></p> <p>Deactivation</p> <p></p> <p></p>"},{"location":"releases/2022.02.01/#offline-trial-notification","title":"Offline Trial Notification","text":"<p>Whenever someone attempts to trial Ragdoll, but their machine is not connected to the internet, they would receive a message about how their Trial has expired.. Even though it was never activated in the first place!</p> <p>This has now been fixed.</p> <p></p> <p></p>"},{"location":"releases/2022.02.01/#world-translate-visualisation","title":"World Translate Visualisation","text":"<p>The translation component of the World Pose Space wasn't very visible before, now it is! It's also drawn using the color of the Marker it's associated with, to aid in figuring out what it's actually affecting. And also make things a little nicer to look at.</p> <p>Before</p> <p></p> <p>After</p> <p></p> <p></p>"},{"location":"releases/2022.02.01/#record-leaving-joints-behind","title":"Record Leaving Joints Behind","text":"<p>Sometimes, Ragdoll could leave some remains after recording your simulation. This has now been fixed.</p> <p></p> <p></p>"},{"location":"releases/2022.02.01/#existing-constraints-deleted-on-record","title":"Existing Constraints Deleted on Record","text":"<p>Under rare circumstances, it's possible to assign a marker onto a control that's been constrained. It wouldn't make sense to record onto this control; because what should you expect to have happen? The control is either animated or it is constrained.</p> <p>At the moment, this constraint is also recorded and once complete your original constraint is deleted. If possible! If the constraint is from a referenced file, then you'll instead see an error. \ud83e\udd14</p> <p></p>"},{"location":"releases/2022.02.01/#record-range-options","title":"Record Range Options","text":"<p>The Record UI has seen some updates. It used to always record your current playback range, but can now be customised.</p> <p>Record To Selected Range</p> <p>You can now drag-select on the timeline to record only that specific region.</p> <p></p> <p>Record Full Range</p> <p>The minimum and maximum range on your timeline, beyond what is played back.</p> <p></p> <p>Record Playback Range</p> <p>Record only the range currently played back, this is the default and current behaviour.</p> <p></p> <p>Customise Range</p> <p>And finally, provide your own values. These values, along with the option of which range to pick from, is remembered alongside your Maya preferences just like all other Ragdoll options.</p> <p></p> <p></p>"},{"location":"releases/2022.02.01/#existing-constraints","title":"Existing Constraints","text":"<p>In the rare circumstance of:</p> <ol> <li>Assigning to a constrained control</li> <li>That is also kinematic</li> <li>And running <code>Record</code></li> </ol> <p>You would find yourself with a missing constraint. As it happens, when Maya encounters an existing constraint it won't actually create a new constraint when you try and constrain again. Instead, it will append to this constraint.</p> <p>As a result, since Recording constrains your character to the simulation and then bakes the keyframes, once it was complete and went on to clean up any new constraints it had made, it also deleted yours.</p> <p></p> <p>This has now been fixed.</p> <p></p> <p></p>"},{"location":"releases/2022.02.01/#manipulator-multiple-viewports","title":"Manipulator &amp; Multiple Viewports","text":"<p>The Ragdoll Manipulator didn't like multiple viewports being present at the same time, resulting in a similar situation as 2021.12.15.</p> <p>Ragdoll now draws and responds to the manipulator in the currently active viewport.</p> <p></p> <p></p>"},{"location":"releases/2022.02.01/#plug-in-unload-and-new-scene","title":"Plug-in Unload and New Scene","text":"<p>Sometimes, especially on a floating licence, you'd like to release your licence such that another artist can pick it up.</p> <p>To do that, you can either go to the Ragdoll UI and <code>Drop Lease</code> for a floating licence of <code>Deactivate</code> for a node-locked licence. Or, you can simply unload the plug-in.</p> <p>As it happens, if you did then Ragdoll would clear your scene. Without confirmation. \ud83d\ude35</p> <p>This has now been fixed. You'll still need to ensure no Ragdoll nodes are present in your scene though, like any normal plug-in.</p> <p></p>"},{"location":"releases/2022.02.01/#delete-from-selection","title":"Delete from Selection","text":"<p>A new menu item has been added to delete physics only from the current selection.</p> <p>Pro tip I</p> <p>This was possible using the <code>Use Selection</code> option within the <code>Delete Physics</code> option dialog.</p> <p>Pro tip II</p> <p>Markers can also be manually deleted in the Outliner, they are DG nodes.</p> <p>Pro tip III</p> <p>Another way of deleting an individual marker is:</p> <ol> <li>Select your assigned control</li> <li>Select Marker in Channel Box</li> <li>Deselect control</li> <li>Hit <code>Delete</code> or <code>Backspace</code> on your keyboard</li> </ol> <p>Pro tip IV</p> <p>Yet another way of deleting an individual marker is:</p> <ol> <li>Select your assigned control</li> <li>Select Marker in Channel Box</li> <li>Ctrl + Right-click on marker</li> <li>Select <code>Delete Node</code></li> </ol> <p></p> <p></p>"},{"location":"releases/2022.02.01/#minor-tweaks","title":"Minor Tweaks","text":"<ul> <li>Limits are now included when importing physics</li> <li><code>Drive Space Custom</code> appears under in the channel box when <code>Drive Space = Custom</code></li> <li>Pin Constraint now visible in Wireframe mode</li> <li>Pin Constraint visible both with solver offset and at the origin</li> <li>Distance and Pin Constraints can now be hidden via the Outliner</li> <li>The <code>Include Kinematic</code> option for record has been fixed</li> <li>Python API: The <code>opts</code> argument of <code>api.reinterpret</code> is repaired</li> </ul>"},{"location":"releases/2022.02.14/","title":"Fields","text":"<p>Highlight for this release is Fields!</p> <ul> <li>ADDED Fields All of Maya's native fields, now supported by Ragdoll</li> <li>ADDED Compound Shapes Combine multiple meshes for a single collision shape</li> <li>ADDED Manikin 3 Next iteration of the default Ragdoll rig</li> <li>FIXED Robust Frame Skips Unbreakable real-time playback</li> <li>FIXED Kinematic Stiffness Kinematic markers acting more like you'd expect</li> <li>FIXED Manipulator and Viewport HUD Better handling of hiding of the HUD</li> <li>FIXED Negative Scale One more edgecase caught and squashed!</li> <li>FIXED Untrusted Plug-in Locator One less warning to worry about</li> <li>FIXED Kinematic Stiffness Stiffness of kinematic now affects dynamic parent as expected</li> <li>FIXED Capsule Length Axis Use the Maya scale manipulator as you'd expect</li> </ul> <p></p>"},{"location":"releases/2022.02.14/#jason-snyman","title":"Jason Snyman","text":"<p>Today I'm happy to announce that Jason Snyman joins Ragdoll Dynamics! \ud83c\udf89</p> <ul> <li>https://www.linkedin.com/in/jason-snyman-84711b1/</li> </ul> <p>Jason is a wizard of an animator with 20 years of experience in the industry - from King Kong and Avatar to Game of Thrones - and will be helping you become the best animator you can be, with Ragdoll at your side. That means tutorials, live streams and more of these awesome demos you may already have seen on LinkedIn!</p> Batman and Shark Dragon and Kong Dragon on Branch <p></p>"},{"location":"releases/2022.02.14/#showcase","title":"Showcase","text":"<p>You know the drill. Let's get into it. </p> <p>Live Stream</p> <p>We hosted a live stream last Friday! If you couldn't make it, it's been recorded and is made available here. :)</p> <ul> <li>https://www.youtube.com/watch?v=P9iEX-IuiRI</li> </ul> <p></p> <p>Dragon</p> <p>Jason's latest animation, using the newly added Fields! Model by Antoine Verney-Carron</p> <p></p> <p></p> <p>Dragon \u2764\ufe0f Kong</p> <p>I just can't stop watching this.</p> <p></p> <p>Manikin Marine</p> <p>He's packing!</p> <p></p> <p>Tentacle Field</p> <p></p> <p></p>"},{"location":"releases/2022.02.14/#manikin-30","title":"Manikin 3.0","text":"<p>The Manikin has been updated to leverage the new goodies from this release, go ahead and grab it here!</p> <p>Features</p> <ul> <li> IK/FK legs</li> <li> IK/FK arms</li> <li> Anatomical limits</li> <li> New compound shapes</li> <li> Fully scalable</li> </ul> Download <p></p> <p></p>"},{"location":"releases/2022.02.14/#fields","title":"Fields","text":"<p>Ragdoll now supports all of Maya's native fields.</p> <p></p> <p>What are fields?</p> <p>A field represents a set of forces applied to each Marker. Ranging from <code>Gravity</code> to <code>Turbulence</code>, each field carries unique properties you can use to emulate some environment or environmental effect, like wind and gravity fields along a curve.</p> <p>What is the difference from regular Maya fields?</p> <p>They are the very same!</p> <p>If you're already familiar with them, from e.g. nParticles of nCloth, then you can leverage your experience with Ragdoll, and vice versa if you ever venture into nCloth and friends.</p> <p>Let's walk through these fields one-by-one!</p> <p></p> <p></p>"},{"location":"releases/2022.02.14/#turbulence","title":"Turbulence","text":"<p>The perhaps most interesting field. Apply forces in \"random\" directions, based on the worldspace positions of your Markers.</p> <p></p> <p>The way to think of turbulence is as Perlin Noise you may have seen in images such as this.</p> <p></p> <p>Where the amount of white determines the amount of force being applied. As a Marker travels across this field, both the magnitude and direction changes in interesting ways.</p> <p></p>"},{"location":"releases/2022.02.14/#drag","title":"Drag","text":"<p>Apply an opposite force to any motion.</p> <p>The faster things move, the greater the force.</p> <p>Pro tip</p> <p>This field is similar to Ragdoll's <code>Air Density</code>. Not technically, but practically.</p> <p></p> <p></p>"},{"location":"releases/2022.02.14/#wind","title":"Wind","text":"<p>Apply a uniform force, at a given speed, in a given direction. Like wind, including a kitchen fan with some <code>Spread</code>.</p> <p></p> <p></p>"},{"location":"releases/2022.02.14/#gravity","title":"Gravity","text":"<p>A familiar force, except this one can be also be animated!</p> <p></p> <p></p>"},{"location":"releases/2022.02.14/#newton","title":"Newton","text":"<p>Force Markers towards or away from a point in space.</p> <p></p> <p></p>"},{"location":"releases/2022.02.14/#radial","title":"Radial","text":"<p>A more curious field; with a force which increases as it gets farther from the source.</p> <p></p> <p></p>"},{"location":"releases/2022.02.14/#uniform","title":"Uniform","text":"<p>Apply a constant force. That's all.</p> <p></p> <p></p>"},{"location":"releases/2022.02.14/#vortex","title":"Vortex","text":"<p>Apply forces in a circular pattern.</p> <p></p> <p></p>"},{"location":"releases/2022.02.14/#volume-axis-field","title":"Volume Axis Field","text":"<p>A field for when you don't know what field you want.</p> <p>A true Swiss Army Knife of fields, can do everything from Vortex, to Newton to Turbulence in one convenient node.</p> <p></p> <p></p>"},{"location":"releases/2022.02.14/#volume-curve","title":"Volume Curve","text":"<p>Have some fun with this curve-based field. Perhaps to emulate an underwater current?</p> <p>In this example, I'm also using a <code>Drag</code> field to keep things from flying off into space.</p> <p>Pro tip</p> <p>The curve is a normal Maya NURBS curve. If you need more points, right click and add points as you normally would.</p> <p></p> <p></p>"},{"location":"releases/2022.02.14/#combined-fields","title":"Combined Fields","text":"<p>Make two or more fields to combine their effect and create complex forces or series of forces!</p> <p></p> <p></p>"},{"location":"releases/2022.02.14/#centroids","title":"Centroids","text":"<p>Where within each Marker should a field apply forces?</p> <ul> <li> Center of Mass</li> <li> Volumetric</li> </ul> <p>At the center, forces will be nice and predictable; except they won't be able to introduce rotations to your Marker, which may or may not be what you want. For the most realistic fields, use volumetric centroids.</p> <p></p> <p></p> <p>Here's another example using the Turbulence Field.</p> <p></p> <p></p> <p>Which is better?</p> <p>Up to you! There is a tiny performance penalty for volumetric origins, as the number of forces increase. But you shouldn't notice much if any impact on performance.</p> <p></p>"},{"location":"releases/2022.02.14/#centroid-seed","title":"Centroid Seed","text":"<p>For complex meshes, centroids can end up in unwanted locations or gather in an area with dense vertices. That's when you can give the algorithm a little jolt to try and see whether there is a better alternative out there.</p> <p></p> <p></p>"},{"location":"releases/2022.02.14/#use-selected-as-source","title":"Use Selected as Source","text":"<p>Some forces act according to their position in the world. Attach a field to a Marker to create an interesting relationship between the two.</p> <p>Non-commercial Ragdoll</p> <p>This feature is limited to 100 frames in non-commercial versions of Ragdoll.</p> <p></p> <p></p> <p>Distance constrain two markers, and attach a field to the outer-most Marker for a doubly-interesting effect. That also wrecks your brain. \ud83d\ude43</p> <p></p> <p></p>"},{"location":"releases/2022.02.14/#field-scale","title":"Field Scale","text":"<p>If forces start becoming large, you may find yourself in a situation where the visualisation needs to tone down just a bit.</p> <p>In the solver settings, you will find options to scale those lines (i.e. <code>Field Scale</code>), as well as control how many steps into the future (i.e. <code>Field Iterations</code>) it should draw for you.</p> <p></p> <p></p>"},{"location":"releases/2022.02.14/#ignore-field","title":"Ignore Field","text":"<p>Fine-tune the effect of fields by having one or more Markers ignore the effect of fields.</p> <p></p> <p></p>"},{"location":"releases/2022.02.14/#force-modes","title":"Force Modes","text":"<p>Fields can apply to your markers in 2 different ways.</p> Mode Description Math Force Traditional force <code>mass * distance / time^2</code> Impulse Typically used for contacts <code>mass * distance / time</code> <p>Which should I use?</p> <p>The default is <code>Force</code>, whereas <code>Impulse</code> is what is typically used for collision handling. Experiment, and let us know which you prefer!</p> <p></p> <p></p>"},{"location":"releases/2022.02.14/#compound-shape","title":"Compound Shape","text":"<p>Combine multiple meshes for a complex \"compound shape\".</p> <p></p> <p>Vertices connected by edges are considered an \"island\", each island is then turned into an independent convex hull. Like this complex endevour.</p> <p></p> <p>434 islands in 147 ms</p> <p>That's how long it took Ragdoll to generate the simulation volumes for the above meshes.</p> <p>You can slice an dice any mesh to introduce new islands at will, for complete control.</p> <p></p> <p>Performance?</p> <p>If you're wondering what effect this many meshes has on your simulation, the answer is we haven't noticed any. Go crazy, and if you do notice anything, let us know!</p> <p></p>"},{"location":"releases/2022.02.14/#mesh-decomposition","title":"Mesh Decomposition","text":"<p>Collision shapes are generated from each individual \"island\"; that is, groups of vertices that are connected by at least one edge. When you combine two or more meshes together, they will naturally form individal islands.</p> <p>Sometimes, you'd rather treat the entire mesh as one big shape and for that you can use the <code>Mesh Decomposition = Mesh Islands</code>.</p> <p>Shape Vertex Limit</p> <p>Also notice how the vertex limit is applied to each island. Meaning that you can achieve much higher resolution for your collision shapes by cutting things up into pieces!</p> <p></p> <p></p>"},{"location":"releases/2022.02.14/#quality-of-life","title":"Quality of Life","text":"<p>Let's brighten up your day, shall we? \ud83e\udd70</p> <p></p>"},{"location":"releases/2022.02.14/#robust-frame-skips","title":"Robust Frame Skips","text":"<p>Anyone playing back their simulation to audio may prefer Ragdoll with a <code>Frameskip Method = Ignore</code>. Such that it'll keep simulating, even though the result won't be 100% reproducible.</p> <p>But! If you did, you may have ran into this.</p> <p></p> <p>Notice how it sometimes fails to keep up with fast time changes? Well, no longer!</p> <p></p> <p>Caveat</p> <p>Like before however, the simulated result you get when frames are skipped will still differ from the result when frames are not skipped, or when different frames get skipped.</p> <p>The final recorded result will not skip any frames, so you should use this while working but ensure there aren't any frames skipped when you tune and tweak the final values.</p> <p></p>"},{"location":"releases/2022.02.14/#manipulator-and-hud","title":"Manipulator and HUD","text":"<p>The View Cube and other viewport ornaments are automatically and temporarily hidden whenever you use the Manipulator. But sometimes, Ragdoll could get confused and leave you having to manually re-enable the viewport HUD.</p> <p>This has now been fixed, and Ragdoll will more predictably re-enable any HUD it hides.</p> <p></p> <p></p>"},{"location":"releases/2022.02.14/#kinematic-stiffness","title":"Kinematic Stiffness","text":"<p>Markers set to <code>Kinematic</code> would also lose their stiffness with their parent.</p> <p>Before</p> <p></p> <p>After</p> <p>This has now been fixed.</p> <p>Pro tip</p> <p>To achieve the effect from the previous version, set <code>Pose Stiffness</code> to 0</p> <p></p> <p></p>"},{"location":"releases/2022.02.14/#untrusted-plugin-location","title":"Untrusted Plugin Location","text":"<p>Users of Maya 2022 would experience this dialog when getting started with Ragdoll.</p> <p></p> <p>This has now been fixed.</p> <p></p>"},{"location":"releases/2022.02.14/#negative-scale-edgecase","title":"Negative Scale Edgecase","text":"<p>A rare case was discovered by @BigRoy whereby negatively scaled controllers would yield an incorrect shape drawing. The simulation was fine, but it wasn't looking quite right in the viewport.</p> <p>Before</p> <p></p> <p>After</p> <p>This has now been fixed!</p> <p></p> <p></p>"},{"location":"releases/2022.02.14/#import-additions","title":"Import Additions","text":"<p>These attributes were added to the export and import mechanism.</p> Nice Name Long Name World Pose Translate X <code>driveAbsoluteLinearX</code> World Pose Translate Y <code>driveAbsoluteLinearY</code> World Pose Translate Z <code>driveAbsoluteLinearZ</code> Pose Twist Amount <code>driveAngularAmountTwist</code> Pose Swing Amount <code>driveAngularAmountSwing</code> <p></p>"},{"location":"releases/2022.02.14/#capsule-length","title":"Capsule Length","text":"<p>All this time, capsules had been scaled in an axis that didn't align with your scale manipulator. </p> <p>No longer!</p> <p>Before</p> <p></p> <p>After</p> <p></p>"},{"location":"releases/2022.02.28/","title":"Environment","text":"<p>Highlight for this release is Complex Geometry!</p> <ul> <li>ADDED Environment Static polygonal geometry for collisions</li> <li>ADDED Automatic Mesh Islands Ain't got no time to slice?</li> <li>ADDED Soft Joints More natural ragdolls with some softness inbetween limbs</li> <li>ADDED Forum 2.0 Same old forum. New and improved!</li> <li>ADDED Subscriptions Monthly licencing, now available</li> <li>ADDED Licence Conservation Lease only the licences you actively use</li> <li>ADDED Select with the Manipulator Selecting Markers got a bit easier</li> <li>ADDED Reset Shape Return to simpler days</li> <li>ADDED Solver Management Merge or extract markers from solvers</li> <li>ADDED Group API The group mechanic was added to the public API</li> <li>FIXED Multiple Manipulators Two or more solvers no longer breaks the Manipulator</li> <li>FIXED Lease Licence in UI Now you can actually use that Lease button</li> <li>REMOVED Legacy Legacy files still open and run, but can no longer be authored.</li> </ul> <p></p>"},{"location":"releases/2022.02.28/#showcase","title":"Showcase","text":"<p>Before we get into the new features of this release, let's have a look back at some highlights of the week.</p> <p>For the Love of Ragdoll</p> <p>Animation by Kevin Taylor, model by Shaun Keenan.</p> <ul> <li>On LinkedIn</li> </ul> <p></p> <p>Dragon Setup Livestream</p> <p>The dragon from the latest livestream last Friday!</p> <ul> <li>https://www.youtube.com/watch?v=xHgFIvgg7O4</li> </ul> <p></p> <p>Chewsday</p> <p>A little experiment with worldspace rotation stiffness.</p> <p></p> <p>Rhino Workout</p> <p>Soft joints for some belly-jiggle.</p> <p></p> <p>Rhino Walk</p> <p>Nice self-walking rhino.</p> <p></p> <p>Self Walking Manikin</p> <p>Same trick, different character. :)</p> <p></p> <p></p> <p>Soft Joints</p> <p>Jason experimenting with the new Soft Joints feature.</p> <p></p> <p>Facial Animation</p> <p>Getting some nice secondary motion out of moving the head and jaw around!</p> <p></p> <p></p>"},{"location":"releases/2022.02.28/#environment","title":"Environment","text":"<p>Ragdoll now supports static environments; meaning environments that cannot move or deform, but allow for normal polygonal geometry without the need for a simplified \"convex hull\".</p> <p>As you might expect, this works well for environments like terrain and other complex geometry that is otherwise hard to turn into a rounded mesh.</p> <p></p> <p></p>"},{"location":"releases/2022.02.28/#performance","title":"Performance","text":"<p>It's fast.</p> <p>Normal shapes are limited in how complex they can get, and as such you never really run into a situation where the shape noticeably affects performance.</p> <p>Triangle meshes are different; they can be of any complexity. Up to millions of polygons and beyond. So it falls upon you to decide where to make the performance/quality tradeoff!</p> Vertex Count Cooking Time Run-time performance 400 0.39 ms 685 fps 8'000 3.51 ms 599 fps 16'000 14.3 ms 594 fps 64'000 61.5 ms 327 fps 256'000 287.7 ms 40 fps 1'000'000 1490 ms 2 fps <p>What is cooking time?</p> <p>The time it takes for Ragdoll to convert your polygonal geometry into the internal representation needed for collision detection. It involves splitting up the mesh into areas or \"zones\" for faster lookup.</p> <p>This only happens when the mesh actively changes and when first opening the Maya scene, and won't affect playback speed.</p> <p></p> <p></p>"},{"location":"releases/2022.02.28/#automatic-mesh-islands","title":"Automatic Mesh Islands","text":"<p>Ragdoll needs \"convex\" meshes for anything that moves.</p> What is a convex mesh? <p>Think of it like a shrink-wrapped version of your mesh.</p> <p>In 2D, it might look something like this.</p> <p></p> <p>Notice how the points in the middle are excluded? This is an optimal shape for collision detection, as you can draw a straight line from anywhere in the world and know that if it ever hits this shape, it hits it in only 1 spot.</p> <p></p> <p>In the previous release, \"Mesh Islands\" were introduced to turn each separate polygonal island into its own convex hull and glued together as one complex shape.</p> <p>With that, you have a great deal of control over the final collision shape</p> <p></p> Multi-cut settings <p>Tick the <code>Extract Faces</code> box, and zero out those values to get Maya to perform an actual split in the geometry as you cut. Otherwise, it will only insert new edge-loops and not actually create two separate meshes.</p> <p></p> <p>It did, however, mean that you had to take the time to manually slice up the mesh, which may not always be feasible. This release introduces an automatic method of slicing up a given mesh, into a close approximation of the original mesh.</p> <p></p> <p></p> <p></p>"},{"location":"releases/2022.02.28/#attributes","title":"Attributes","text":"<p>There are a number of parameters to tune when generating your convex hulls, here's what they mean.</p> Attribute Description <code>Resolution</code> The number of \"voxels\" to generate from a given volume; the greater the number the more accurate the resulting representation. At the expense of time. Values between 100-1000 are normally sufficient. <code>Concavity</code> The maximum allowed different in angle across the surface of the resulting meshes. It might be thought of as \"roundness\". <code>Symmetry Bias</code> Slices are made either horizontally and vertically, or radially. This value controls how much to favour the former. <code>Revolute Bias</code> And this value controls how much to favour the latter <code>Min Volume</code> Ignore computed volumes that are smaller than this. It can help reduce the number of very tiny meshes. <code>Max Convex Hulls</code> How many separate meshes to make. This will depend on the complexity of your mesh, but generally the lower the better. <code>Plane Downsampling</code> Performance related, lower values take longer <code>Hull Downsampling</code> Also perforamnce related, lower values take longer <code>Fill Mode</code> Various ways to deal with geometry that isn't a closed volume. A sphere for example is a closed volume, whereas a plane is not. <code>Approximate Hull</code> Performance related, faster when ticked. <code>Project Hull Vertices</code> See what the generated meshes look like before they are \"shrink-wrapped\" back onto your model. These give you a good sense of how large the voxel resolution is. <p>Complexity</p> <p>Over time, as we learn more about which parameters work best in the most general case, I'd like to reduce the number of attributes here. Ideally we would only have a <code>Quality</code> attribute with <code>Low</code>, <code>Medium</code> and <code>High</code> settings.</p> <p></p> <p></p>"},{"location":"releases/2022.02.28/#performance_1","title":"Performance","text":"<p>It's slow.</p> <p>The process of automatically slicing your geometry is not real-time, it can take up to a few seconds or more. On the upside, it only ever happens when the mesh changes and does not affect playback performance.</p> <p>Here are some timings for the meshes in the below simulation.</p> <p></p> Object Pieces Time <code>rMarker_Barrels</code> 30 1.9 s <code>rMarker_Ceratopsia</code> 16 0.7 s <code>rMarker_FingerPlates</code> 64 6.1 s <code>rMarker_LeaflessTree</code> 183 6.3 s <code>rMarker_bull</code> 16 0.8 s <code>rMarker_fish</code> 16 0.7 s <code>rMarker_hand_basemesh</code> 16 0.3 s <code>rMarker_horse</code> 16 0.9 s <code>rMarker_humanBody</code> 32 2.9 s <code>rMarker_jetFighter</code> 16 0.5 s <code>rMarker_polySurface9</code> 16 1.6 s <code>rMarker_shirt</code> 16 0.9 s <p>Faster performance is on the map</p> <p>This method is new to us, and we expect to find faster - ideally real-time - alternatives to this in the future.</p> <p></p>"},{"location":"releases/2022.02.28/#soft-joints","title":"Soft Joints","text":"<p>To balance out the talk of complex but hard geometry, let's talk about \"soft joints\".</p> <p></p> <p>Once I set <code>Translate Motion = Soft</code> and the feet hits the ground, notice how:</p> <ul> <li> The spine is compressed</li> <li> The legs are compressed</li> <li> The arms are extended</li> </ul> <p>Here's a more extreme example.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"releases/2022.02.28/#general-purpose","title":"General Purpose","text":"<p>We're calling it \"soft joints\" when in reality this is <code>Pose Stiffness</code> but for translation rather than rotation. Which means you could use it for tentacles and other appendages that depend on not just rotating limbs but squishy and compressed limbs. Potentially stretchy limbs and spines too?</p> <p>We haven't yet explored this fully, so take it for a spin and let us know what you come up with. \ud83d\ude0a</p> <p></p> <p></p>"},{"location":"releases/2022.02.28/#caveat","title":"Caveat","text":"<p>When stiffness goes too low, limbs detach.</p> <p></p> <p>This is unintended behaviour and will be addressed in a future release. Proper breakable constraints are on the map, but this isn't it. So use with caution, and limit it to create softness between your limbs.</p> <p></p>"},{"location":"releases/2022.02.28/#forum","title":"Forum","text":"<p>The forum has gotten a face-lift! This will henceforth be where tutorials and showcases appear, along with notifications for new releases!</p> <p>So sign up, subscribe to the <code>News</code> category to receive notifications when things happen in Ragdoll-land!</p> <ul> <li>https://forums.ragdolldynamics.com/</li> </ul> <p></p> <p></p>"},{"location":"releases/2022.02.28/#subscriptions","title":"Subscriptions","text":"<p>Out of beta and available to all.</p> <p>If you need a more low-cost but commercial introduction to Ragdoll in your studio, then this is for you.</p> <ul> <li>https://ragdolldynamics.com/pricing-commercial</li> </ul> <p></p> <p></p>"},{"location":"releases/2022.02.28/#group-api","title":"Group API","text":"<p>You can now make groups via the API.</p> <pre><code>from maya import cmds\nfrom ragdoll import api\n\nsolver = api.createSolver()\nground = api.createGround(solver)\ngroup = api.createGroup(solver)\nsphere, _ = cmds.polySphere()\ncmds.move(0, 10, 0)\nmarker = api.assignMarker(sphere, group)\n\ncmds.evalDeferred(cmds.play)\n</code></pre> <p>The <code>assignMarker</code> command has also been simplified and does not longer implicitly create a group.</p> <p></p>"},{"location":"releases/2022.02.28/#quality-of-life","title":"Quality of Life","text":"<p>A few more things to make your day that much more bright.</p> <p></p>"},{"location":"releases/2022.02.28/#merge-solvers","title":"Merge Solvers","text":"<p>You can now merge two solvers together, move markers from one solver to another and extract markers into a new solver.</p> <p></p> <p></p> <p></p>"},{"location":"releases/2022.02.28/#extract-markers","title":"Extract Markers","text":"<p>Sometimes, you want some of your markers to be part of a separate solvers.</p> <p></p> <p></p>"},{"location":"releases/2022.02.28/#move-to-solver","title":"Move to Solver","text":"<p>Rather than merge two solvers in its entirety, move specific markers from one solver to another.</p> <p></p> <p></p>"},{"location":"releases/2022.02.28/#manipulator-with-multiple-solvers","title":"Manipulator with Multiple Solvers","text":"<p>The Manipulator can now be used in scenes with two or more solvers in them!</p> <p></p>"},{"location":"releases/2022.02.28/#manipulator-selection","title":"Manipulator Selection","text":"<p>You can now use the Manipulator to select both the Marker and Maya node, such that attributes can be edited in the Channel Box.</p> <p></p> <p></p>"},{"location":"releases/2022.02.28/#manipulator-fit-to-view","title":"Manipulator Fit-to-view","text":"<p>Using the manipulator via the Ragdoll menu enabled you to also benefit from the <code>F</code> key, to fit your selection to the current camera.</p> <p>But if a Marker or Group was selected and editable in the Channel Box, that no longer worked. Because under the hood, what you were really fitting in view was the solver shape node.</p> <p>This has now been fixed such that you can fit any selected Marker, regardless of whether the solver shape node is selected or not!</p> <p></p> <p></p>"},{"location":"releases/2022.02.28/#select-during-playback","title":"Select During Playback","text":"<p>The Manipulator can now be used to select Markers during playback.</p> <p>Caveat</p> <p>Selection is based on the current simulated state and doesn't understand rewind. To fix this, step at least 1 frame forward whenever you attempt to select, to ensure the selection and simulation is staying in sync.</p> <p>This will be addressed in a future release.</p> <p></p> <p></p>"},{"location":"releases/2022.02.28/#reset-shape","title":"Reset Shape","text":"<p>Whenever you assign a Marker, a default shape is computed based on your selection and available geometry or NURBS curves.</p> <p></p> <p></p> <p></p>"},{"location":"releases/2022.02.28/#refit-assignment","title":"Refit Assignment","text":"<p>Likewise, when you branched off into a tree-like structure for your markers, you could easily end up with something like this.</p> <p></p> <p>This has now been addressed, whereby the marker which forms a fork now being reset automatically.</p> <p></p> <p></p>"},{"location":"releases/2022.02.28/#licence-conservation","title":"Licence Conservation","text":"<p>Applies to</p> <p>This feature only applies to Floating Licence customers.</p> <p>In the previous release, a licence was leased on plug-in load.</p> <p>The problem was that, sometimes, an artist merely opens a scene with Ragdoll in it. Maya will determine that this file requires the Ragdoll plug-in to be loaded, and loads it. Upon load, Ragdoll would go ahead and check out a licence. But this artist doesn't necessarily want to interact with Ragdoll, it could have been a texture artist opening up an animator's scene, or someone rendering it.</p> <p>This release introduces \"licence conservation\" which only tries to lease a licence upon a simulation taking place. That means a lease is not made on plug-in load, nor on scene open. If a solver is hidden from view, nor does it take place on playback start.</p> <p>Only once simulation visibly begins is a lease requested, helping you save those precious seats for the artists that need it most.</p> <p>Markers are still rendered in the viewport on the start frame for everyone, without a lease. The Solver is automatically hidden upon failure to lease a licence, pausing any further requests until it is made visible again.</p> <p></p>"},{"location":"releases/2022.02.28/#minor-releases","title":"Minor Releases","text":"<p>Inbetween this release and the previous release there were a few minor releases made.</p> <ul> <li>Fix crash on fit-to-view</li> <li>Fix crash on replaced mesh with 0 vertices</li> <li>Hide prototype world and local attributes on the <code>rdGroup</code> node</li> <li>The <code>Request Lease</code> button in the Ragdoll UI now actually works</li> </ul> <p></p>"},{"location":"releases/2022.02.28/#legacy","title":"Legacy","text":"<p>The menu items for the old Legacy interface to Ragdoll Dynamics has now been removed. Scenes created with this interface will still open, so this is your last chance to save your work and transition to the current Marker-based workflow.</p> <p></p>"},{"location":"releases/2022.03.14/","title":"Quality of Life","text":"<p>Highlight for this release is Quality of Life!</p> <ul> <li>IMPROVED Manipulator and Multiple Solvers Choose which solver to manipulate, with this new UI</li> <li>IMPROVED Import Symmetry Symmetry on already-animated characters!</li> <li>IMPROVED Manipulator Deselect A little more convenient</li> <li>IMPROVED Clean Abort on Record Less clutter when in a rush</li> <li>IMPROVED Coloured Limits Edit limits with more confidence</li> <li>IMPROVED Auto Cache A perhaps more intuitive default?</li> <li>IMPROVED On-Location Pin Pin now appears where the simulation is, rather than the animation.</li> <li>IMPROVED Limit on Select Now limits are less obstructing to look at</li> <li>FIXED Nested Namespaces and Import Complexity defeated</li> <li>FIXED Animated Pose Space Blunder from the previous release</li> <li>FIXED Fix Unlink Solver Now it actually works</li> <li>FIXED Translate XYZ The world axes are local no more</li> <li>FIXED Export without .rag Minor hiccup, now burped</li> <li>FIXED Euler Filter Actually working the way you'd expect</li> <li>FIXED 0 Density Catch-all for density going too low</li> </ul> <p></p>"},{"location":"releases/2022.03.14/#showcase","title":"Showcase","text":"<p>Let's catch up on a few highlights over the past 2 weeks.</p> <p>Instict</p> <p>Andrei got Ragdoll introduced to this beautiful thing.</p> <ul> <li>https://forums.ragdolldynamics.com/t/instinct/154</li> </ul> <p></p> <p></p> <p>Some nice stills.</p> <p> </p> <p>Rhinos</p> <p>Jason's working on a new tutorial for how to make self-walking quadrupeds.</p> <ul> <li>Work in Progress</li> <li>On LinkedIn</li> </ul> <p></p> <p></p>"},{"location":"releases/2022.03.14/#quality-of-life","title":"Quality of Life","text":"<p>Let's have some more, shall we? \ud83e\udd73</p> <p></p>"},{"location":"releases/2022.03.14/#manipulator-and-multiple-solvers","title":"Manipulator and Multiple Solvers","text":"<p>The Manipulator operates on 1 solver at a time.</p> <p>When there are two or more manipulator in the scene, Ragdoll will now be more kind and smart about which one you mean.</p> <p>Select any..</p> <ul> <li>Assigned control</li> <li>Retargeted control</li> <li>Marker</li> <li>Group</li> <li>Solver</li> <li>Constraint</li> </ul> <p>..and the manipulator will figure out which solver you mean.</p> <p></p> <p>When unsure, it will ask you to clarify.</p> <p></p> <p></p>"},{"location":"releases/2022.03.14/#selection-highlight","title":"Selection Highlight","text":"<p>Each marker have 3 possible nodes you can select.</p> <ol> <li>The marker itself, a DG node</li> <li>The source transform, the control you originally assigned</li> <li>The destination transform(s), where simulation is recorded onto</li> </ol> <p>Selecting the marker and source transforms gave you a handy selection highlighting in the viewport, confirming what you had selected. But so far, selecting a destination transform did no such thing. Until now!</p> <p></p> <p>Notice how this also helps you detect whether something has a target at all, like the upper legs here. These remain unrecorded, as they are connected to the hip and driven by IK.</p> <p></p> <p></p>"},{"location":"releases/2022.03.14/#contact-visualisation","title":"Contact Visualisation","text":"<p>You can now visualise when and where contacts occur.</p> <p></p> <p>This can help spot self-collisions too!</p> <p></p> <p></p>"},{"location":"releases/2022.03.14/#import-symmetry","title":"Import Symmetry","text":"<p>Symmetry is now preserved on import.</p> <p>For any character authored in a symmetrical pose, the Ragdoll Manipulator would let you operate on this character on both sides at once.</p> <p>But until now, this symmetry was lost if at any point an import was made on a character was not symmetrical, such as an animated character.</p> <p>This changes today!</p> <p></p> <p></p>"},{"location":"releases/2022.03.14/#manipulator-deselect","title":"Manipulator Deselect","text":"<p>With nothing selected, you now have access to the Solver in the Channel Box.</p> <p></p> <p></p>"},{"location":"releases/2022.03.14/#clean-abort-on-record","title":"Clean Abort on Record","text":"<p>Almost rhymes. If recording takes too long and you hit the ESC key to cancel, Ragdoll no longer leaves a mess behind. It's clean!</p> <p></p>"},{"location":"releases/2022.03.14/#coloured-limits","title":"Coloured Limits","text":"<p>The manipulator now colors limits by their axis. Where X is red, Y is green and Z is blue; just as you'd expect.</p> <p></p> <p></p>"},{"location":"releases/2022.03.14/#auto-cache","title":"Auto Cache","text":"<p>There is now an option to disable auto cache upon completed record.</p> <p></p> <p>This will let the simulation continue running after recording, using your newly recorded controls as input.</p> <p></p>"},{"location":"releases/2022.03.14/#on-location-pin","title":"On-Location Pin","text":"<p>Whenever you make a new Pin Constraint, it would appear at the location of your animation. But now, it will appear wherever the simulated version of your animation is.</p> <p></p> <p></p>"},{"location":"releases/2022.03.14/#limit-on-select","title":"Limit on Select","text":"<p>Limits are now only visible when selected, making things a little less messy in the viewport.</p> <p></p> <p></p>"},{"location":"releases/2022.03.14/#fixes","title":"Fixes","text":"<p>Some house cleaning of minor things that could sometimes trip you up.</p> <p></p>"},{"location":"releases/2022.03.14/#nested-namespaces-and-import","title":"Nested Namespaces and Import","text":"<p>Ragdoll is now happy to import physics onto any number of namespaces.</p> <p></p> <p></p>"},{"location":"releases/2022.03.14/#animated-pose-space","title":"Animated Pose Space","text":"<p>The previous release broke any transition between <code>Local</code> and <code>World</code>, this has now been fixed.</p> <p></p> <p></p>"},{"location":"releases/2022.03.14/#translate-xyz","title":"Translate XYZ","text":"<p>When you want a marker to follow your animation in worldspace in all but one or two axes, you can use <code>World Pose Translation</code>. However, in the previous release, the axes were aligned with the control rather than the world. This has now been fixed.</p> <p></p> <p></p>"},{"location":"releases/2022.03.14/#fix-unlink-solver","title":"Fix Unlink Solver","text":"<p>Linking two solvers is a non-destructive method of getting multiple characters to interact in the same scene. As it happens, you haven't been able to unlink until now.</p> <p></p> <p></p>"},{"location":"releases/2022.03.14/#export-without-rag","title":"Export without .rag","text":"<p>As it happens, the Import Options will only show you files that have a <code>.rag</code> extension. But! The Export Options would permit export of files without this extension.</p> <p>As a result, it could appear as though nothing was exported. :(</p> <p>This has now been fixed.</p> <p></p> <p></p>"},{"location":"releases/2022.03.14/#euler-filter","title":"Euler Filter","text":"<p>To keep gimbal locks from happening in your recorded simulation, an \"Euler Filter\" could be automatically applied. This hasn't been the case so far, but has now been fixed.</p> <p></p>"},{"location":"releases/2022.03.14/#0-density","title":"0 Density","text":"<p>Giving markers a density of 0 would make it infinitely light, or infinitely heavy depending on your perspective. Such things does not exist in the real world and cannot be simulated.</p> <p></p> <p>Ragdoll will now protect you against this.</p>"},{"location":"releases/2022.05.04/","title":"Retargeting 2.0 and Maya 2023","text":"<p>Highlight for this release is a new Retargeting UI and support for Maya 2023 </p> <ul> <li>ADDED Retargeting UI Finally, visualise and modify where your animation is recorded</li> <li>ADDED Moar Performance You didn't know you needed it!</li> <li>ADDED Maya 2023 Support Ready to go!</li> <li>FIXED Inches and other Units Manipulator now understands units other than centimeters</li> <li>FIXED Mesh Stability On rare occurrences, Replace Mesh and Environment could crash</li> <li>FIXED Recording &amp; Start Frame In some situations, recording would be sensitive to your current frame</li> <li>FIXED Recording &amp; Initial Pose Remember the original pose when deleting a layer</li> <li>FIXED Linked Solver Stability More predictable and stable links</li> <li>ADDED Quality of Life Let's have some more. </li> <li>ADDED Folowing Pin Constraint Attach the Pin Constraint to yolur animation</li> <li>ADDED Manipulator &amp; Ordered Selection</li> <li>ADDED Manipulator &amp; Delete You can now delete markers with the manipulator, without exiting</li> </ul> <p></p>"},{"location":"releases/2022.05.04/#showcase","title":"Showcase","text":"<p>We've got a lot of new content since last release, so let's break it down. </p> <p>Pirate</p> <p>New livestream from last Friday!</p> <ul> <li>https://www.youtube.com/watch?v=AFB13RgWuQQ&amp;lc=Ugz4bq_Fm7aI124SpKx4AaABAg</li> </ul> <p></p> <p>And a new start-to-finish asset and breakdown on the forums for this guy!</p> <ul> <li>https://forums.ragdolldynamics.com/t/pirate-yaarrr</li> </ul> <p></p> <p></p> <p></p> <p></p> <p></p> <p>Woody</p> <p>Another gem from @Andrei on the forums!</p> <ul> <li>https://forums.ragdolldynamics.com/t/woody-puppet-creating-puppets</li> </ul> <p></p> <p>Ice Dragon</p> <p>This one from Jack Preston on the forums!</p> <ul> <li>https://forums.ragdolldynamics.com/t/work-in-progress-dragon</li> </ul> <p></p> <p>Gundam</p> <p>And one more, also from Jack The Magnificent!</p> <ul> <li>https://forums.ragdolldynamics.com/t/gundam/185/4</li> </ul> <p></p> <p>VR Rabbit</p> <ul> <li>https://forums.ragdolldynamics.com/t/bunny</li> </ul> <p>Jason took a spin in virtual reality to come up with this nightmare of a rabbit. </p> <p></p> <p>Rhino Companion</p> <p>The Manikin got a friend. </p> <p></p> <p></p>"},{"location":"releases/2022.05.04/#retargeting-ui","title":"Retargeting UI","text":"<p>You can now visually see where keyframes go upon running <code>Record Simulation</code>.</p> <p></p> <p></p>"},{"location":"releases/2022.05.04/#usage","title":"Usage","text":"<p>Let's take a look at what this UI is, what it can do for you and when to use it.</p> <ul> <li>00:00 Why a UI?</li> <li>00:30 How to previously spot a retarget</li> <li>01:30 Spotting suspicious targets</li> <li>02:11 Warning indicator</li> <li>02:30 Untarget</li> <li>02:42 Retarget</li> </ul> <p></p> <p></p>"},{"location":"releases/2022.05.04/#warnings","title":"Warnings","text":"<p>The UI can help you spot problems with recording, before recording happens.</p> <ul> <li>00:00 Constrained Channels</li> <li>00:08 Locked Channels</li> <li>00:60 Keyframed Channels</li> <li>00:71 Hidden Channels</li> </ul> <p></p> <p>In this case, some of our markers are retargeted onto joints that are driven by some other object. If we were to attempt to record these, it's unclear what the result should be.</p> <ol> <li>Should they retain their connection to the thing already driving them?</li> <li>Or should they abandon that, and become keyframed by the simulation?</li> </ol> <p>Neither of these are a great pick, since we don't want to break the rig, but we also want our simulation to go somewhere.</p> <p></p>"},{"location":"releases/2022.05.04/#workflow","title":"Workflow","text":"<p>Once you've assigned your markers, grab a clean slate and gain complete control over where animation is to be recorded.</p> <ul> <li>00:00 Intro</li> <li>00:18 Untarget everything</li> <li>00:25 Retarget one at a time</li> </ul> <p></p> <p></p>"},{"location":"releases/2022.05.04/#complete-demo","title":"Complete Demo","text":"<p>And finally, here's a longer-form example of a full setup of the Truong Dragon that we did a livestream on a while back.</p> <ul> <li>00:00 Assigning Markers</li> <li>00:38 Spine Shapes</li> <li>01:01 Wing Shapes</li> <li>01:27 IK Legs</li> <li>02:20 IK Shapes</li> <li>02:37 Tail</li> <li>03:08 Retargeting</li> <li>03:40 IK Retargeting</li> <li>04:36 Test Animation</li> <li>05:00 Mass Distribution</li> <li>05:36 Record</li> </ul> <p></p> <p></p>"},{"location":"releases/2022.05.04/#maya-2023","title":"Maya 2023","text":"<p>Ragdoll now ships with plug-ins for Maya 2023, enjoy!</p> <p></p> <p>Heads up</p> <p>Maya 2018 is still included in this release, but should be considered deprecated and will be removed entirely by July 2022.</p> <p></p>"},{"location":"releases/2022.05.04/#moar-performance","title":"Moar Performance","text":"<p>Ragdoll now renders up to 20% faster.</p> <p>Before</p> <p>It used to be the case that each frame uploaded vertices and colors to the GPU.</p> <p></p> <p>After</p> <p>But now, there is zero memory allocations. The programmers amongst you will appreciate the benefit and difficulty of such an improvement.  This lays the foundation for future performance advances, in particular related to instancing and crowd simulation. \ud83e\udd2b</p> <p></p> <p>For the techies amongst you, here's what the improvement looks like in the Profiler.</p> <p>Before</p> <p></p> <p>After</p> <p>The top two layers is Ragdoll, notice the slight reduction in length. Win!</p> <p></p>"},{"location":"releases/2022.05.04/#quality-of-life","title":"Quality of Life","text":"<p>Here's a summary of changes designed to make your day just a little more bright.</p> <p></p>"},{"location":"releases/2022.05.04/#following-pin-constraint","title":"Following Pin Constraint","text":"<p>You now have the option of automatically constraining the Pin Constraint to your animation, giving you a similar look to <code>Pose Space = World</code> except with a new dedicated transform node.</p> <p>Multiple Pins</p> <p>There can be many of these for the same marker!</p> <p>Pin to Current Animation Pose</p> <p>The default, put a pin wherever the animation currently is.</p> <p></p> <p>Pin to Current Simulation Pose</p> <p>Alternatively, put it wherever the simulation is.</p> <p>Ragdoll Non-Commercial</p> <p>This option can only find the simulated pose for the first 100 frames unless you've got a commercial licence, like Ragdoll Complete or Ragdoll Unlimited.</p> <p></p> <p>Constrain Pin to Animation</p> <p>Follow your animation interactively, by putting a Parent Constraint between pin and control.</p> <p></p> <p></p>"},{"location":"releases/2022.05.04/#select-group-members","title":"Select Group Members","text":"<p>You can now select the members of a group, to aid in organising your scene.</p> <p></p> <p></p>"},{"location":"releases/2022.05.04/#visualise-environment","title":"Visualise Environment","text":"<p>You can now see where the environment is when the solver is offset.</p> <p>Before</p> <p></p> <p>After</p> <p></p> <p></p>"},{"location":"releases/2022.05.04/#manipulator-ordered-selection","title":"Manipulator &amp; Ordered Selection","text":"<p>The Manipulator now remembers the order in which you select, meaning you can use it for ordinary tasks like reparenting and constraining markers!</p> <p>For example, consider this character here. He's symmetrical, and yet seem heavier on one side.. </p> <p></p> <p>Let's take a closer look at the updated Hierarchy visualisation to see whether there is something wrong with the hierarchy we have created.</p> <p></p> <p>Aha! Let's fix this, by..</p> <ol> <li>Selecting the child</li> <li>Shift-selecting the parent</li> <li>Running <code>Reparent</code></li> </ol> <p>All from the comfort of the Manipulator. </p> <p></p> <p>Here are some more funky hierarchies to solidify the point.</p> <p></p> <p></p>"},{"location":"releases/2022.05.04/#manipulator-symmetry-on-enter","title":"Manipulator &amp; Symmetry on Enter","text":"<p>Ragdoll will now look for symmetry right after entering the Manipulator. Especially helpful if you enter with some marker already selected, and especially if you use the T-hotkey to enter into the Manipulator!</p> <p></p> <p></p>"},{"location":"releases/2022.05.04/#manipulator-symmetry-toggle","title":"Manipulator &amp; Symmetry Toggle","text":"<p>Ragdoll will now look for a symmetrical partner when toggling the Enabled checkbox. Win!</p> <p></p> <p></p>"},{"location":"releases/2022.05.04/#manipulator-delete","title":"Manipulator &amp; Delete","text":"<p>You can now delete markers from within the Manipulator!</p> <p></p> <p></p>"},{"location":"releases/2022.05.04/#environment-node-crash","title":"Environment Node &amp; Crash","text":"<p>In the case of having more than 1 environment, you may have experienced a crash!</p> <p>Before</p> <p></p> <p>After</p> <p>This has now been patched up!</p> <p></p> <p></p>"},{"location":"releases/2022.05.04/#mesh-protection","title":"Mesh Protection","text":"<p>Ragdoll can take meshes of any complexity.</p> <p>Sometimes meshes have no volume. And that's fine; Ragdoll will generate a flat surface with some volume to it, to try and interpret what you want. However, under rare circumstances, those volume-less meshes could cause trouble for Ragdoll.</p> <p>New attributes have been added to try and protect you from these. These will jiggle the vertices to try and discard anything suspicious. You normally won't have to interact with these, the defaults should keep you safe. But if you find vertices missing from your colliders, try editing these.</p> <p></p> <p></p>"},{"location":"releases/2022.05.04/#recording-start-frame","title":"Recording &amp; Start Frame","text":"<p>In some situations, you could find yourself with recorded keyframes all over the place.</p> <p>Before</p> <p>Notice how all of the destination controls - the joints, in this case - are all mangled! This would happen when the current time and the start frame of the simulation did not align. Not always, but in this particular case, and likely others too!</p> <p></p> <p>After</p> <p>Now working as you'd expect. Phew!</p> <p></p> <p></p>"},{"location":"releases/2022.05.04/#recording-initial-pose","title":"Recording &amp; Initial Pose","text":"<p>When deleting a recorded layer, Maya would sometimes forget where your character was prior to recording.</p> <p>Before</p> <p>Notice how our character remains on the ground when deleting the layer, even though that's clearly one of the simulated poses.</p> <p></p> <p>After</p> <p>This is instead what we expect, for it to return to where it was prior to recording.</p> <p></p> <p></p>"},{"location":"releases/2022.05.04/#linked-solver-stability","title":"Linked Solver Stability","text":"<p>Solver linking is when the contents of two or more solvers participate in the same physical world; for example, reference two characters and link their solvers. Viola, you've got a single simulation with the two characters interacting with each other. Great!</p> <p>However, under some circumstances this didn't always work. Especially with referenced files. It had to do with the order in which the solvers were created, and which solver was created when. It could happen that the link was ignored. Sometimes it behaved differently on scene re-open.</p> <p>No longer! Now solver linking is robust, as you would expect.</p> <p></p> <p></p>"},{"location":"releases/2022.05.04/#inches","title":"Inches","text":"<p>Using the manipulator in a Maya configured for inches, or any other unit than millimeters..</p> <p></p> <p>..could result in funky behaviour. This has now been fixed!</p> <p></p>"},{"location":"releases/2022.06.09/","title":"Locomotion","text":"<p>The highlight for this release is Locomotion!</p> <ul> <li>ADDED Locomotion The thing you are most curious about. </li> <li>ADDED Quality of Life A few more of these</li> </ul> <p></p>"},{"location":"releases/2022.06.09/#locomotion","title":"Locomotion","text":"<p>The above animation is automatically generated, given just a handful of parameters to ragdoll.</p> <ol> <li>A <code>Start</code> and <code>End Position</code></li> <li>A <code>Step Sequence</code></li> <li>One or more <code>Limits</code></li> </ol> <p>I'll walk through what each of these mean in the rest of this documentation.</p> <p></p>"},{"location":"releases/2022.06.09/#examples","title":"Examples","text":"<p>Let's start with a quick look at what you can get out of this new toy.</p> <p>Locobot</p> <p>Modeling by Christophe Desse.</p> <p></p> <p></p> <p></p> <p>Spot and Friends</p> <p></p> <p></p> <p>Happy Box</p> <p>Yes, you can give it a terrain. </p> <p></p> <p>Two Happy Boxes</p> <p></p> <p>Locoboy</p> <p>A 2-legged quadruped, look at'em go!</p> <p></p> <p>Locomotion &amp; Physics</p> <p>Playing well together.</p> <p></p> <p>Humanoid Locomotion</p> <p>As you can tell, quadrupeds fair much better!</p> <p></p> <p>Human Dynamics</p> <p>But with some physics, it's starting to look nice. :)</p> <p></p> <p></p>"},{"location":"releases/2022.06.09/#abilities","title":"Abilities","text":"<p>Here's what we're aiming for with this release.</p> <ul> <li>Full clip</li> </ul> <p></p> <p>To achieve this, you've got control over:</p> <ol> <li>The start and end positions of the body and feet</li> <li>The order and duration of steps, called a <code>Step Sequence</code></li> <li>An optional <code>Terrain</code> upon which to walk</li> <li>A few additional extras for fine-tuning things</li> </ol> <p>There can be any number of feet and it can travel any amount of distance. The <code>Step Sequence</code> is how you're able to achieve different kind of walks.</p> <ul> <li>Walking</li> <li>Running</li> <li>Trotting</li> <li>Dancing</li> <li>Jumping</li> <li>...</li> </ul> <p>And the <code>Terrain</code> is how it can do this across geometry of any complexity.</p> <p></p>"},{"location":"releases/2022.06.09/#limitations","title":"Limitations","text":"<p>Let's talk about what cannot be solved with Ragdoll <code>Locomotion</code>.</p> <p>As of this release, it only understands 2 things.</p> <ol> <li>The body</li> <li>The foot</li> </ol> <p>And for feet, it only understand the position of the foot, not its orientation.</p> <p>Most importantly, it does not understand arms! Arms are critical to human locomotion, they swing in tandem with each step. This version of Ragdoll does not understand arms. Yet. Meaning it's good for locomotion involving any creature that does not have arms.</p> <p>But Marcus, that doesn't leave much room for many creatures. They all have arms!</p> <p>Think again!</p> <ul> <li>Dogs</li> <li>Cats</li> <li>..any quadruped!</li> <li>6-legged creatures, e.g. crabs</li> <li>8-legged creatures, e.g. spiders</li> <li>n-legged tentacle monsters</li> </ul> <p>With that out the way, let's look at what it can do!</p> <p></p>"},{"location":"releases/2022.06.09/#workflow","title":"Workflow","text":"<p>Here's what you do.</p> <ol> <li>Select body</li> <li>Select feet</li> <li>Run <code>Assign Plan</code></li> </ol> <p>Plan?</p> <p>The generated locomotion is the result of a \"plan\", meaning each of the inputs you give it. Including this initial selection.</p> <p></p> <p></p>"},{"location":"releases/2022.06.09/#press-t","title":"Press T","text":"<p>Locomotion also has a manipulator, accessible by selecting the <code>rPlan</code> node and pressing <code>T</code> on your keyboard.</p> <p></p> <p></p>"},{"location":"releases/2022.06.09/#background-processing","title":"Background Processing","text":"<p>Locomotion is computed in the background.</p> <p>Normally, it'll take a second or two to compute 4-12 seconds worth of locomotion, and you can safely interact with Maya whilst it's running. It has zero impact on your overall Maya or character rig performance.</p> <p></p>"},{"location":"releases/2022.06.09/#rig-compatibility","title":"Rig Compatibility","text":"<p>Anything from a box with a sphere for feet to the most complex digi-double will do.</p> <p>The rig in the above example is nothing special, as you've seen from the examples above this works on \"rigs\" as complex as a box and 2 spheres.</p> <p></p> <p></p>"},{"location":"releases/2022.06.09/#multiple-characters","title":"Multiple Characters","text":"<p>You can have as many characters in the scene as you like.</p> <p>Parallelism</p> <p>These currently run 1 at a time, but the next release will unlock this to 1-per-core. Meaning you can have 128 characters computed in parallel on a 64-core AMD CPU. Now for what purpose could you ever need that many? </p> <p></p> <p></p>"},{"location":"releases/2022.06.09/#physics","title":"Physics","text":"<p>Locomotion is an entirely separate \"brain\" that you may, or may not, want to combine with regular Markers.</p> <p></p> <p>Body and/or feet can be <code>Kinematic</code> or driven by a <code>Pin Constraint</code>, or anything inbetween.</p> <p></p>"},{"location":"releases/2022.06.09/#recording","title":"Recording","text":"<p>Unlike a simulation, <code>Locomotion</code> is entirely time independent. So it isn't strictly necessary to record; it will run directly on your character rig.</p> <p>You can edit the locomotion as keyframes via Maya's native <code>Bake Results</code> command.</p> <p></p> <p></p>"},{"location":"releases/2022.06.09/#step-sequencer","title":"Step Sequencer","text":"<p>This will become your new best friend. With an easily recognisable pattern for when to move your feet.</p> <ol> <li>Select <code>Sequencer Mode</code></li> <li>Hold <code>Shift</code> to paint</li> <li>Hold <code>Ctrl</code> to erase</li> </ol> <p></p> <p>It can be used to produce a wide variety of locomotion, such as this frog sequence.</p> <p></p> <p></p>"},{"location":"releases/2022.06.09/#targets","title":"Targets","text":"<p>Once you've figured how to get somewhere, next up is figuring out where to go.</p> <ol> <li>Select <code>Target Mode</code></li> <li>Select either <code>Start</code> or <code>End</code> of the body or foot</li> <li>Use the <code>Translate</code> gizmo to control the position of either <code>body</code> or <code>foot</code></li> <li>Use the <code>Rotate</code> gizmo to control the start and end orientation of the <code>body</code></li> </ol> <p></p> <p>Use the <code>Rotate</code> gizmo to control the orientation of the body at the start or end positions.</p> <p></p> <p></p>"},{"location":"releases/2022.06.09/#limits","title":"Limits","text":"<p>Is your character jumping or limping? Maybe dancing? Limits control the area in which each foot is allowed to move.</p> <ol> <li>Select <code>Limit Mode</code></li> <li>Select the <code>body</code> to adjust the size of your character</li> <li>Select a <code>foot</code> to adjust the amount of motion a foot is allowed to have</li> </ol> <p></p> <p>Here's an example of how a short limit on one foot, and long steps with the other foot, can generate a wounded or limping locomotion.</p> <p></p> <p></p> <p></p>"},{"location":"releases/2022.06.09/#terrain","title":"Terrain","text":"<p>Things can easily get more interesting by swapping out that flat ground with some geometry.</p> <p></p> <p></p>"},{"location":"releases/2022.06.09/#known-issues","title":"Known Issues","text":"<p>Sometimes, Locomotion can get stuck <code>Thinking...</code>. Let us know if this happens, along how you got to that point. We're working on narrowing this down.</p> <ul> <li>https://forums.ragdolldynamics.com/c/help</li> </ul> <p></p>"},{"location":"releases/2022.06.09/#quality-of-life","title":"Quality of Life","text":"<p>In addition to locomotion, a few minor things were improved in this release.</p> <p></p>"},{"location":"releases/2022.06.09/#manipulator-constraints","title":"Manipulator &amp; Constraints","text":"<p>With the previous release keeping track of the order in which you select things using the manipulator, this release carries on the trend by enabling constraints to be made from within the comfort of the Manipulator. \ud83e\udd17</p> <p></p> <p></p>"},{"location":"releases/2022.06.09/#manipulator-namespaces","title":"Manipulator &amp; Namespaces","text":"<p>If you had 2 controls of the same name but in different namespaces, the Manipulator could get confused about which one you were actually editing.</p> <p>This has now been fixed.</p> <p></p>"},{"location":"releases/2022.06.09/#new-defaults","title":"New Defaults","text":"<p>In response to feedback on the default values, 3 of them has seen an upgrade.</p> <ul> <li><code>Air Density = 1.0 -&gt; 0.1</code></li> <li><code>Substeps = 4 -&gt; 8</code></li> <li><code>Iterations = 4 -&gt; 8</code></li> </ul> <p>These can all be found on the <code>rSolver</code> node. And will result in more accurate simulation and less explosions. Bearing in mind that many simulations do not require this amount of substeps and iterations, and they come at the expense of performance. So if you find yourself in need of more juice, lower these back down to 4 or lower. If it looks right, it is right.</p> <p></p>"},{"location":"releases/2022.06.09/#retina-screens","title":"Retina Screens","text":"<p>As it happens, MacOS users were getting a much too small Manipulator HUD!</p> <p></p> <p>This has now been addressed.</p> <p></p> <p>If you encounter any issues like this, please let us know in the forums!</p>"},{"location":"releases/2022.06.15/","title":"Parallel Locomotion","text":"<p>The highlight for this release is Parallel Locomotion!</p> <ul> <li>ADDED Parallel Locomotion Compute 10 characters in parallel, or 128. No limit!</li> <li>ADDED Locomotion for MacOS This one's for you Mac users out there.</li> <li>ADDED Scale Factor Customise the size of your HUD elements</li> <li>ADDED Code Signing on Windows Windows and Anti-virus software can rest easy</li> <li>ADDED Shift to Toggle A little quality of life for you.</li> <li>ADDED Optimised Rendering More juice at the tip of your fingertip</li> <li>FIXED Updating the Duration Minor bug, big hammer!</li> <li>FIXED Determinism Restored A bug found its way into Ragdoll, and out it went!</li> <li>FIXED Endless \"Thinking\" Locomotion sometimes ended up thinking forever</li> </ul> <p></p>"},{"location":"releases/2022.06.15/#showcase","title":"Showcase","text":"<p>You know the drill, let's start with the good stuff! \ud83e\udd70</p> <p></p> <p></p> <p>Model by Christophe Desse</p> <p></p>"},{"location":"releases/2022.06.15/#parallel-locomotion","title":"Parallel Locomotion","text":"<p>That's right! If 1 character takes 2 seconds to compute, 5 characters now also takes 2 seconds to compute. Or 10 characters, or 100 characters. 2 seconds in total, that's all you'd have to wait, up to the number of cores on your system.</p> <p>As core-count continues to increase in our machines, you can expect the number of characters being run in parallel to increase as well, up to the level of full crowds; each individual character a unique and precise sequence of steps that conform to their environment.</p> <p></p> <p>Juice Left</p> <p>There is still a little bit of juice left to squeeze.</p> <p>At the moment, if Ragdoll detects any relation between one plan and another, it will run these one-by-one.</p> <p>Normally, this is not the case, but if you for example connect the output of one plan to the input of another, there isn't much that can be done other than wait for one to finish. However this can also happen when unrelated things are connected, such as your character being connected to two plans, such that you can blend between them. This is too much, and will be addressed in a future release. Subtle balance!</p> <p></p>"},{"location":"releases/2022.06.15/#locomotion-for-macos","title":"Locomotion for MacOS","text":"<p>Go nuts!</p> <p></p>"},{"location":"releases/2022.06.15/#determinism-restored","title":"Determinism Restored","text":"<p>A bug was introduced in the last release, which could have resulted in your simulation returning different results when:</p> <ol> <li>Playing the first time, versus the second time</li> <li>Re-opening the scene</li> </ol> <p>This has now been fixed.</p> <p></p>"},{"location":"releases/2022.06.15/#endless-thinking","title":"Endless Thinking","text":"<p>Sometimes Locomotion could simply never stop thinking, and you know how too much thinking is bad for you? The same applies to Locomotion.</p> <p>This has now been fixed!</p> <p></p>"},{"location":"releases/2022.06.15/#shift-to-toggle","title":"Shift to Toggle","text":"<p>You can now choose whether to use the Shift and Control keys to add and remove steps in the Locomotion Step Sequencer, or whether to use Shift for both. Dragging over a filled step will erase it, whereas dragging over an unfilled step will fill it. A toggle!</p> <p></p> <p></p>"},{"location":"releases/2022.06.15/#updating-the-duration","title":"Updating the Duration","text":"<p>You used to have Locomotion a kick in the butt whenever changing the <code>Duration</code> attribute, to give your locomotion more time to reach the goal position.</p> <p>This has now been fixed. :)</p> <p></p> <p></p>"},{"location":"releases/2022.06.15/#scale-factor","title":"Scale Factor","text":"<p>The last release attempted to scale the viewport HUD automatically for your Mac users out there, but as it happens the built-in Mac display and an external display give different values to the mechanism we use to detect that scale. So, I leave it to you to tweak to your hearts content.</p> <ol> <li>Try Ragdoll, see whether you like the scale</li> <li>Tweak the scale</li> <li>Reload the plug-in</li> </ol> <p>All things are scaled interactively, except the font which needs a plug-in reload to remain crisp.</p> <p></p> <p></p>"},{"location":"releases/2022.06.15/#optimised-rendering","title":"Optimised Rendering","text":"<p>Hiding the <code>rSolver</code> node automatically halts simulation, freeing up resources for your character rigs. The same applies to..</p> <ul> <li> Hiding a Display Layer</li> <li> Hiding via a Display Override</li> <li> Hiding via Isolate Selected</li> </ul> <p>With this release, simulation now also takes a backseat with the viewport <code>Plugin Shapes</code> unticked.</p> <p></p> <p></p>"},{"location":"releases/2022.06.15/#code-signing","title":"Code Signing","text":"<p>You'll no longer see warnings from Firefox or Chrome when downloading our plug-in, nor when using our <code>.msi</code> installer to install it, nor will anti-virus ever thing our software is anything but authentic.</p> <p>Hurray!</p> <p>For Mac users with \"Gatekeeper\" enabled, a solution is headed your way soon!</p> <p>DigiCertUtil</p> <p>This is for search engines, and developers working with <code>DigiCertUtil.exe</code></p> <p>Animators, look away</p> <p>As it happens, you can use <code>DigiCertUtil.exe</code> from the command-line. As is mentioned here, https://www.digicert.com/kb/util/utility-code-signing-command-line.htm</p> <p>But what's this? It just causes the GUI to appear? No message? What did you do wrong? Well, as it happens..</p> <pre><code># Before\ndigicertutil /noInput sign loco3d.exe\n\n# After\ndigicertutil sign /noInput loco3d.exe\n</code></pre> <p>This matters. The order in which you pass the <code>sign</code> argument. I must come first. And that's it, really. Pass it first, and then it will tell you what's wrong and what to do about it. You've also got.</p> <pre><code>digicertutil /?\n</code></pre> <p>Which does not need the <code>sign</code> argument, apparently, but will provide you with a separate window with details about each argument to <code>sign</code> possible.</p> <p>There, search engines, index this and save the hour or more I lost investigating and scratching my head about this.</p>"},{"location":"releases/2022.07.20/","title":"Meshes Meshes Meshes","text":"<p>Highlight for this release is Meshes meshes meshes!</p> <ul> <li>ADDED Translate &amp; Rotate Stiffness Simplified \"Pose Stiffness\"</li> <li>ADDED Mesh Export &amp; Import Meshes are now included when exporting and importing!</li> <li>ADDED Attach Constraint Like a Weld Constraint, but soft and animated</li> <li>ADDED Closed Loop Recording Alternatively recording strategy</li> <li>ADDED Pin Constraint Axes Fine-grained control over each axis of a pin constraint</li> <li>ADDED New Frameskip Default More intuitive, less surprising skipped frames</li> <li>ADDED Output Geometry You can now generate Maya geometry from a Ragdoll Convex Hull</li> <li>ADDED Simplified Density No more types, just a number</li> <li>ADDED Convex Decomposition 2.0 More performance, simpler interface</li> <li>ADDED Frameskip Ignore A more intuitive behaviour when skipping frames</li> <li>ADDED Ignore Mass More predictable stiffness</li> <li>ADDED Cache HUD More accessible cache options</li> <li>FIXED Record Stuck at 0% Fix for a semi-common recording issue</li> <li>FIXED Import Solver Attributes Minor bug squashes!</li> <li>FIXED Use Selection for Record and Snap The Use Selection option now works as expected</li> <li>FIXED Group Enable Enable and disable markers of a group, all at once</li> <li>FIXED Locomotion Empty Terrain More robust handling of terrain</li> <li>FIXED Predictable Enabled Attribute</li> <li>FIXED Infinite Terrain More robust terrain for Locomotion</li> <li>FIXED Fields Crash Less of these, begone!</li> <li>FIXED Solver Bounding Box A little improvement</li> <li>FIXED Locomotion on Linux A blunder in the last release prevented use on Linux</li> <li>FIXED Viewport Refresh Meshes and limits sometimes would not refresh properly</li> <li>FIXED Locomotion Crash Occasional crash on scene-open with a plan in your scene</li> <li>FIXED Cacheless Save Fresh simulation on every scene open</li> </ul> <p>Leave any comments and report any issues here.</p> <ul> <li>https://forums.ragdolldynamics.com/t/ragdoll-2022-07-20</li> </ul> <p></p>"},{"location":"releases/2022.07.20/#showcase","title":"Showcase","text":"<p>We've launched a Ragdoll Challenge since the last release, here are some highlights!</p> <ul> <li>July Challenge</li> </ul> <p>Crabomotion</p> <p>From the ongoing competition by Kaehwai.</p> <ul> <li>https://forums.ragdolldynamics.com/t/got-a-plan/464</li> </ul> <p></p> <p>Hands</p> <p>By V4NDL0 on the forums.</p> <ul> <li>https://forums.ragdolldynamics.com/t/crab-competition/399</li> </ul> <p></p> <p></p> <p>Jason</p> <p>Some clips from Jason's LinkedIn feed over the past 2 weeks.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"releases/2022.07.20/#raggraph","title":"Raggraph","text":"<p>In August, we're heading to Siggraph 2022 in Vancouver! </p> <ul> <li>https://forums.ragdolldynamics.com/t/siggraph-2022</li> </ul> <p></p> <p>We'll be over here, at booth 442.</p> <p></p> <p>Running a handful of demos of how Locomotion works under the hood (hint: robotics tech!) along with the basics of Ragdoll.</p> <p>Our booth will look something like this.</p> <p></p> <p>We'll be wearing t-shirts that look like this.</p> <p></p> <p>And have some nice banners that look like this.</p> <p></p> <p>Preliminary schedule looks like this.</p> <ul> <li>Aug 9<sup>th</sup>:<ul> <li>11:00 Intro with manikin</li> <li>13:00 Dragon rig setup</li> <li>14:00 Dneg</li> <li>15:00 Requests</li> <li>18:00 End</li> </ul> </li> <li>Aug 10<sup>th</sup>:<ul> <li>10:00 Hands and fingers</li> <li>11:00 Self-walking rhino</li> <li>14:00 Dneg</li> <li>15:00 Requests</li> <li>18:00 End</li> </ul> </li> <li>Aug 11<sup>th</sup>:<ul> <li>10:00 Locomotion</li> <li>11:00 Dneg</li> <li>13:00 Best of/Requests</li> <li>16:00 End</li> </ul> </li> </ul> <p></p>"},{"location":"releases/2022.07.20/#translate-rotate-stiffness","title":"Translate Rotate Stiffness","text":"<p>The most important and complex aspect of Ragdoll are the Pose parameters.</p> <ul> <li><code>Pose Stiffness</code></li> <li><code>Pose Damping</code></li> <li><code>Pose Space</code></li> </ul> <p></p> <p>In an effort to simplify these attributes, you'll now find an alternative - experimental - set of attributes.</p> <ul> <li><code>Translate Stiffness</code></li> <li><code>Translate Damping</code></li> <li><code>Rotate Stiffness</code></li> <li><code>Rotate Damping</code></li> </ul> <p></p> <p>A <code>Translate Stiffness = -1</code> means \"infinite\" or \"locked\". It's the equivalent of <code>Translate Motion = Locked</code>.</p> <p>Use the new option in the <code>Assign</code> option box to enable these.</p> <p></p> <p></p>"},{"location":"releases/2022.07.20/#mesh-export-import","title":"Mesh Export Import","text":"<p>Any replaced mesh is now included in the exported <code>.rag</code> file, enabling you to import meshes onto characters that are missing the originally replaced mesh.</p> <p></p> <p>This should help keep both scene files and rag files clean and self-contained!</p> <p>To the programmers out there, the <code>.rag</code> file now features this section.</p> <pre><code>\"ConvexMeshComponents\": {\n    \"members\": {\n        \"indices\": {\n            \"type\": \"UintArray\",\n            \"values\": [\n                0,\n                1,\n                2,\n            ]\n        },\n        \"vertices\": {\n            \"type\": \"PointArray\",\n            \"values\": [\n                1.8463890552520752,\n                -0.5881761908531189,\n                -0.28559789061546326,\n            ]\n        }\n    },\n    \"type\": \"ConvexMeshComponents\"\n},\n</code></pre> <p>These are unique vertex positions of one or more meshes. Ragdoll separates them into individual convex hulls by looking towards their connectivity, as per the <code>indices</code> array.</p> <p>As a side-effect, you are now also able to delete the mesh you used with <code>Replace Mesh</code>. Keeping your scene a little more clean.</p> <p></p>"},{"location":"releases/2022.07.20/#convex-decomposition-20","title":"Convex Decomposition 2.0","text":"<p>The automated convex hull mechanic has been updated and is now both faster and easier to work with.</p> <p>Before</p> <p></p> <p>After</p> <p></p> <p>Furthermore, you now have the option of baking the automatically computed convex hull so as to avoid recomputing it each time you open the Maya scene file.</p> <p>For example, here we've got a decomposited human mesh.</p> <p></p> <p>And here you can see how we get to keep the collider, but lose both the connection and the automatic decomposition. File-open times are now optimised, as well as file size. As we only store the bare essential vertices for the convex hulls!</p> <p></p> <p></p>"},{"location":"releases/2022.07.20/#convert-to-mesh","title":"Convert to Mesh","text":"<p>You can now convert any Marker geometry - including convex hulls - into Maya geometry!</p> <p></p> <p></p>"},{"location":"releases/2022.07.20/#attach-constraint","title":"Attach Constraint","text":"<p>The Pin Constraint has been expanded and can now pin one marker to another.</p> <p></p> <p>Under the hood</p> <p>This is exactly the same as calling <code>Reparent</code> to parent one marker to another. Except a marker can be attached to many other markers, and their relationship can be animated!</p> <p>Here's how it works.</p> <ol> <li>Select child</li> <li>Select parent</li> <li>Attach</li> </ol> <p></p> <p>Let's take a closer look.</p> <p></p> <p>Here we've got two independent markers. No parent and child relationship. Now let's attach the box to the torus.</p> <p></p> <p>As you'd expect, the box is now a child of the torus. You can use the handle to reposition exactly where this box is attached onto the torus.</p> <p></p> <p>The position and orientation can be animated too. It's a rather complex little constraint, but very powerful!</p> <p></p>"},{"location":"releases/2022.07.20/#quality-of-life","title":"Quality of Life","text":"<p>Next up, let's have a look at some of the minor improvements made to put a smile on your face.</p> <p></p>"},{"location":"releases/2022.07.20/#closed-loop-recording","title":"Closed Loop Recording","text":"<p>If you parent the tip to the root, you'll get a closed loop. Something Maya natively cannot do, but Ragdoll can. And for good reason, since you can do things like this!</p> <p></p> <p></p> <p>However, it wasn't able to record it.  Until now. :)</p> <p></p> <p>Why make this an option?</p> <p>Yes, if it's able to do more than why not just leave this as default and remove the option?</p> <p>Well, as it happens, there are times when closed loop recording performs worse than regular recording. Keep an eye out for what happens between frames, your rotation channels might be under stress, and let us know in the forums how it got that way. It's something I'd like to sort out.</p> <ul> <li>https://forums.ragdolldynamics.com/t/closed-loop/146</li> </ul> <p></p>"},{"location":"releases/2022.07.20/#pin-constraint-axes","title":"Pin Constraint Axes","text":"<p>You can now control individual axes of a pin constraint, just like you can with <code>Pose Space = World</code> on normal markers.</p> <p></p> <p>For example, here's what happens if we pin it along X and Z, but ignore the Y axis.</p> <p></p> <p>Likewise, here we only pin the Z axis. Notice how it's only allowed to move along the Z plane, staying at wherever the pin is in Z.</p> <p></p> <p>And similarly for X.</p> <p></p> <p>The rotation works the same, except Twist represents the X axis and Swing is both Y and Z.</p> <p></p>"},{"location":"releases/2022.07.20/#predictable-enabled-state","title":"Predictable Enabled State","text":"<p>Every Ragdoll node has an <code>Enabled</code> attribute for you to temporarily and non-destructively enable and disable the node without physically removing it from the scene. It acts indentically to physically deleting that node, but is safe to do even on a referenced node.</p> <p>However, in the previous release you could find yourself..</p> <ol> <li>Setting <code>Enabled = Off</code></li> <li>Setting <code>Enabled = On</code></li> </ol> <p>Only to then not actually having it enabled. What's up with that?  When you..</p> <ol> <li>Setting <code>Enabled = On</code> a second time</li> </ol> <p>It works. That isn't particularly intuitive, and has now been fixed!</p> <p></p>"},{"location":"releases/2022.07.20/#infinite-terrain","title":"Infinite Terrain","text":"<p>If you provide Locomotion with a terrain, it will generate a heightmap from it. Where there wasn't geometry, such as outside the borders of the geometry or inside of holes, it would struggle to figure out what to do.</p> <p>This release now extends your terrain in every direction, such that you get more what you'd expect.</p> <p></p> <p>Notice how he's able to start outside of the terrain, and step on missing parts of the terrain!</p> <p></p>"},{"location":"releases/2022.07.20/#simplified-density","title":"Simplified Density","text":"<p>Fewer options for working with density, now it's just a single number.</p> <p></p> <p>As it turns out, the presets were really limiting and was rarely a good fit for anything. And they didn't make intuitive sense either. \"Uranium\"? I don't know how heavy that is, when should I use it?</p> <p>So instead, a single <code>Density</code> value with a default value of <code>1</code> remains. This is the previous <code>Density Custom</code> attribute with a shorter name, so if you were already using this attribute then you already know what to expect.</p> <p>With a special density of <code>0</code> you'll be greeted by the <code>Mass</code> attribute to disable automatically computing mass from the size and volume of your shape.</p> <p></p>"},{"location":"releases/2022.07.20/#ignore-mass","title":"Ignore Mass","text":"<p>You can now choose to work with <code>Stiffness</code> values without worrying about the weight of markers.</p> <p></p> <p>This can help get a better understanding of what a value of 1 means, as it would no longer depend on the mass of a marker, which is automatically computed per default. The marker would retain its mass, such that if a heavy marker fell on a light marker it would still act accordingly. But the stiffness values would act as though they weighed the same.</p> <p>Should this be enabled per default?  What are the consequences of this option? Let's find out!</p> <p></p>"},{"location":"releases/2022.07.20/#frameskip-default","title":"Frameskip Default","text":"<p>When a frame is skipped, Ragdoll would normally pause simulation and wait for you to return to the last successfully simulated frame. This ensures that the simulation always produces the same result each time you play. But also means it is unable to solve if Maya skips a frame, as can happen when a rig is especially heavy or when playing back with Audio.</p> <p>This mode is called <code>Pause</code> and the alternative is a mode called <code>Ignore</code> which will continue solving even though it isn't given each and every frame.</p> <p></p> <p><code>Ignore</code> is now the new default, to avoid surprises especially for beginners who might not know why simulation suddenly stops for no apparent reason. You are still advised to stick with <code>Pause</code> especially towards the end of fine-tuning your work. That's the only mode in which Ragdoll can guarantee that each and every playthrough is identical unless you have actually changed something in your animation.</p> <p></p> <p>The two lines towards the bottom tell you two things.</p> <ol> <li>Which frames were successfully read from Maya</li> <li>Which frames were simulated</li> </ol> <p>Ideally, for the most accurate and consistent results, these two should be identical. And when they are, they are hidden. They can be explicitly enabled via the Solver Display settings, called <code>Draw Buffer</code>.</p> <p></p> <p></p>"},{"location":"releases/2022.07.20/#output-geometry","title":"Output Geometry","text":"<p>In addition to the <code>Convert to Mesh</code> menu option, advanced users can now also experiment with the new <code>rMarker.outputGeometry</code> attribute which provides access to the computed convex hull!</p> <p></p> <p>This is a live attribute, regenerating the mesh whenever anything affects the convex hull generated for collisions.</p> <p></p>"},{"location":"releases/2022.07.20/#cache-hud","title":"Cache HUD","text":"<p>You'll now find buttons in the viewport for manipulating the solver cache.</p> <p></p> <p></p>"},{"location":"releases/2022.07.20/#record-stuck-at-0","title":"Record Stuck at 0%","text":"<p>Some users experienced recording getting stuck before it even began.</p> <ul> <li>https://forums.ragdolldynamics.com/t/recording-simulation-in-unlimited-progress-stuck-at-0/227/26</li> </ul> <p>This should solve that!</p> <p>Behind the scenes</p> <p>For you programmers and riggers out there; as it turns out, calling <code>OpenMayaAnim.MAnimControl.setCurrentTime</code> is not safe. When Maya wants to compute one or more things in parallel, this call could cause a deadlock. The simple solution, and the one employed here, was to instead use <code>cmds.currentTime</code>. It was the strangest thing.</p> <p>The alternative solution was to use Serial or DG evaluation modes.</p> <p></p>"},{"location":"releases/2022.07.20/#import-solver-attributes","title":"Import Solver Attributes","text":"<p>A bug was found whereby the attributes from your solver would get exported properly, but not imported! This has now been fixed.</p> <p></p>"},{"location":"releases/2022.07.20/#use-selection-for-record","title":"Use Selection for Record","text":"<p>The previous release broke the <code>Use Selection</code> option for <code>Record Simulation</code> and <code>Snap to Simulation</code> commands. This has now been fixed!</p> <p></p>"},{"location":"releases/2022.07.20/#fields-crash","title":"Fields Crash","text":"<p>A bug was found (thanks Andrei!) whereby having fields on your scene could cause a crash. This was related to the field trying to also affect the \"world\" rather than just the markers. This has now been fixed.</p> <p></p>"},{"location":"releases/2022.07.20/#solver-bounding-box","title":"Solver Bounding Box","text":"<p>Minor nitpick, if you had 2 or more solvers, unselected, and tried to \"Fit all\" (the F or A-key), it may not have actually fit all of the solvers. This has now been fixed.</p> <p>The problem was that each solver was taking every marker into account, even those that did not belong to it.</p> <p></p> <p></p>"},{"location":"releases/2022.07.20/#locomotion-on-linux","title":"Locomotion On Linux","text":"<p>We spent a lot of effort getting Locomotion running on Linux, only to trip over our own feet for release and include a spelling error in the Maya <code>.mod</code> file causing Ragdoll to not find the Locomotion executable!</p> <p>This has now been fixed, Linux users unite!</p> <p></p>"},{"location":"releases/2022.07.20/#viewport-refresh","title":"Viewport Refresh","text":"<p>Disabling and enabling a marker could sometimes leave it behind in the viewport, until the solver was hidden and unhidden, or the scene reloaded.</p> <p>This has now been fixed.</p> <p></p>"},{"location":"releases/2022.07.20/#locomotion-crash","title":"Locomotion Crash","text":"<p>Ragdoll could sometimes bring Maya down when opening a scene containing a plan, for locomotion. This happened due to some really intricate memory and threading issues that you would not be interested in knowing more about.  Rest assured, this has now been fixed!</p>"},{"location":"releases/2022.11.29/","title":"Live Mode","text":"<p>Highlight for this release is Live Mode!</p> <ul> <li>ADDED Ragdoll Freelancer Ragdoll for $199</li> <li>ADDED Live Mode Physically-based character posing</li> <li>ADDED Interactive Mode Real-time physics as you animate</li> <li>ADDED Load Physics Lightweight and physically-based character rigs</li> <li>ADDED Asset Library Premade assets with room for your own collection</li> <li>ADDED 2x Performance 4x faster rendering means 2x faster playback performance</li> <li>ADDED Selection Outline Easier and nice-to-look at rendering</li> <li>UPDATED Translate &amp; Rotate Stiffness Simpler! No more \"pose space\", what even was that?!</li> <li>ADDED Selective Export Exclude or include individual Markers, Groups or Solvers</li> <li>ADDED Keyable Gravity Gravity can now be animated!</li> <li>ADDED Replace Mesh API Tweak</li> <li>ADDED Plan Duration Control the default duration of a newly assigned plan</li> <li>ADDED Viewport Selection Select a solver via regular viewport-select!</li> </ul> <p></p>"},{"location":"releases/2022.11.29/#showcase","title":"Showcase","text":"<p>As is tradition, let's have a look at some of the things people have been up to with Ragdoll since the last release.</p> <p>Ragdoll 3 Trailer</p> <p>A 2 minute summary of what you'll find in this document!</p> <ul> <li>YouTube - Trailer (2:00 mins)</li> <li>YouTube - Rigging for Live Mode (4:15 mins)</li> <li>YouTube - Rigging with Multi-Cut (10:06 mins)</li> <li>YouTube - Live Rig and Maya Native Rigs (5:13 mins)</li> </ul> <p></p> <p>Pavel Orsher</p> <p>Some excellent mechanical work by Pavel on the forums.</p> <ul> <li>Forum WIP 1</li> <li>Forum WIP 2</li> </ul> <p></p> <p></p> <p>Live Wyvern</p> <p>Made with the beta version of Live Mode by @emi on the forums.</p> <p></p> <p>Live Dance</p> <p>Animated with Live Mode, and re-simulated for balance!</p> <p></p> <p>Catfish</p> <p>Made with a beta version of Live Mode by @riccardo_p on the forums.</p> <p></p> <p>Halloween</p> <p>This happened. </p> <ul> <li>On LinkedIn</li> </ul> <p></p> <p>Ho Ho Ho</p> <p>A little early, or is it? </p> <p></p> <p>Live Mode Workflow</p> <p>One example of how to use the new Live Mode from this release.</p> <p></p> <p>Interactive Wyvern</p> <p>Animated in Interactive Mode, with caching enabled.</p> <p></p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#ragdoll-30","title":"Ragdoll 3.0","text":"<p>That's right, this is a big one!</p> <p></p> <p>Last major release was the introduction of Markers back in January of this year. A major overhaul to both performance and usability of Ragdoll. This release is no different, with the introduction of Live Mode.</p> <p>This is the direction we have in mind for Ragdoll and, dare I say, for character animation at large. We believe now is the perfect time to leverage much of the untapped technology from the past few decades and throw out much of what we know about animation - starting with how characters are posed.</p> <p></p>"},{"location":"releases/2022.11.29/#ragdoll-freelancer","title":"Ragdoll Freelancer","text":"<p>A new limited edition pricing tier for the individual out there wanting to take Ragdoll to work.</p> <p>Details</p> <ul> <li> $199 for a licence, 1 year of updates included</li> <li> An optional $99 per additional year of updates</li> <li> Individuals can purchase this</li> <li> Companies cannot purchase this</li> <li> Lifetime licences only, no subscription</li> <li> Maximum 1 licence per individual (3 activations for e.g. home and work)</li> <li> Can be used both commercially and non-commercially, namely at work or at home</li> <li> Cannot be activated offline</li> <li> Cannot be activated on a virtual machine</li> <li> Cannot be activated on cloud hardware, like AWS or Google Cloud</li> </ul> <p>Who is this for?</p> <p>It's exclusively for individuals who work on a project-basis and wants to take their Ragdoll licence with them as they move between studios. It</p> <p>Is this you? Click here to get yours today!</p> Buy <p></p>"},{"location":"releases/2022.11.29/#live-mode","title":"Live Mode","text":"<p>Here's \"Live Mode\" in a nutshell.</p> <p></p> <p>Traditional Rig</p> <p>And here's the equivalent task with the traditional rig.</p> <p></p> <p>If you don't make it through all of the 95 seconds that the traditional method takes, I don't blame you. Not only is posing with Live Mode already 3x faster, it also has the following benefits.</p> <ul> <li>It's fun! You don't see that every day.</li> <li>No intersections You don't even have to think about it, like playing with an action figure</li> <li>No broken limits That is, skinning and subsequent muscles and cloth are safe</li> <li>No controls Your geometry are the controls!</li> </ul> <p>But perhaps most importantly.</p> <ul> <li>You don't need rigging!</li> </ul> <p>This same workflow applies to plain joint hierarchies, meaning an animator could:</p> <ol> <li>Import a mesh</li> <li>Plot some joints</li> <li>Skin mesh</li> <li>Assign markers</li> <li>Start animating</li> </ol> <p>For example, here's 30 seconds of \"rigging\" a character from scratch.</p> <p></p> <p>And that's where things are going.</p> <p>Let's have a closer look at what this thing can do today.</p> <p></p>"},{"location":"releases/2022.11.29/#general-posing","title":"General Posing","text":"<p>Clicking and dragging on any marker will affect it the way you'd expect.</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#reset","title":"Reset","text":"<p>Exiting out of the mode or changing from the Manipulator to e.g. the Maya Translate tool (W hotkey) will reset the simulation to where it originally started.</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#drop-press-hold","title":"Drop Press &amp; Hold","text":"<p>Towards the bottom, you'll find a number buttons, one of which is called <code>Drop</code>. This \"drops\" the character. In other words, it temporarily enables gravity. This can help ease a character onto the ground or generally relax things that are hovering. It's also fun to play with. </p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#drop-toggle","title":"Drop Toggle","text":"<p>Hold Shift to toggle gravity on, such that you can throw things around! Also fun to play with </p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#tense-press-hold","title":"Tense Press &amp; Hold","text":"<p>Next up is <code>Tense</code>. This tenses the character.</p> <p></p> <p>What's really happening is that it tries to reach whatever pose your rig is in at that time.</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#tense-toggle","title":"Tense Toggle","text":"<p>Like <code>Drop</code>, the <code>Tense</code> button can be toggled, which would leave the character tense.</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#mask","title":"Mask","text":"<p>Hold Ctrl whilst clicking to \"mask\" a Marker. This prevents it from moving at all, it's technically turning the Marker into a Kinematic object temporarily.</p> <p>Pro tip</p> <p>You can also press Ctrl whilst dragging and release to leave the Marker you are currently dragging in place, for some cool posing mechanic!</p> <p></p>"},{"location":"releases/2022.11.29/#unmask-all","title":"Unmask All","text":"<p>Next up is \"unmask\" which involves \"masking\" via Ctrl + Clicking on a Marker. It's how you prevent a Marker from moving.</p> <p>How does it work?</p> <p>It temporarily turns any marker <code>Kinematic</code>, identical to the <code>Behaviour = Kinematic</code> attribute.</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#mask-parent","title":"Mask Parent","text":"<p>Hold Shift whilst dragging to isolate the effect to a marker and it's children.</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#transfer-pose","title":"Transfer Pose","text":"<p>The final button is the <code>Transfer</code> button. It's what transfers the simulation back onto your animation controls.</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#transfer-toggle","title":"Transfer Toggle","text":"<p>Like Drop and Tense, this button can also be toggled, meaning the pose is transferred as soon as you let go of the mouse cursor.</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#animation","title":"Animation","text":"<p>And these are the tools you use to animate. </p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#visual-undo","title":"Visual Undo","text":"<p>The timeline helps you understand where undo will take you.</p> <p></p> <p>You can also interact with the timeline, for fine control over where in history you want to go.</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#recording-live-mode","title":"Recording Live Mode","text":"<p>Use Live Mode with <code>Cache = Static</code> to enable recording of your interactions!</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#interactive-mode","title":"Interactive Mode","text":"<p>Toggle the Lock button far-right to keep simulating outside of the Manipulator.</p> <p>This enables you to use Ragdoll as a normal Maya deformer, and see real-time updates on contacts and limb limits.</p> <p></p> <p>Here are some more examples!</p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#rigging-for-live-mode","title":"Rigging for Live Mode","text":"<p>In order for your characters to work with Live Mode, you'll need to take a few things into consideration. Primarily that your character has FK controls with the ability to disable space switches and other mechanics that differ from a straightforward parent/child relationship.</p> <ul> <li>https://youtu.be/fx-BT6eDxDE (4:15 mins)</li> </ul> <p></p> <p></p>"},{"location":"releases/2022.11.29/#rigging-with-multi-cut","title":"Rigging with Multi-Cut","text":"<p>A quick tutorial on how to setup a character using Maya's multi-cut, and then export and load this character to assemble it alongside our favourite Manikin!</p> <ul> <li>https://youtu.be/Si_l8B82c9w (10:06 mins)</li> </ul> <p></p> <p></p>"},{"location":"releases/2022.11.29/#live-rig-and-maya-native-rigs","title":"Live Rig and Maya Native Rigs","text":"<p>Here's an example of how you can \"trick\" Live Mode into working for you with any traditional Maya rig.</p> <ul> <li>https://youtu.be/kmY5NSmbkZo (5:13 mins)</li> </ul> <p></p> <p></p>"},{"location":"releases/2022.11.29/#rendering","title":"Rendering","text":"<p>The viewport rendering pipeline has seen an overhaul - replacing much of Maya's own API for our own based on OpenGL 4 and DirectX 11.</p> <p>The result is a much nicer presentation of Markers, especially those with a Mesh.</p> <p>But that's not all. </p> <p>It also resulted in a 4x performance improvement to rendering, which means that playback performance is now 2x faster!</p> <p></p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#selection-outline","title":"Selection Outline","text":"<p>Selection and anything \"wireframe\" in general has been significantly improved.</p> <p>Before</p> <p></p> <p>After</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#group-selection","title":"Group Selection","text":"<p>This has also seen a major face lift since the last release, resulting in a much more clear idea of what's included in a given group. Rather than the lasso from the prior release, which was great! But, it wasn't able to clearly visualise markers inbetween many other markers, since the lasso would encapsulate those too!</p> <p>Before</p> <p></p> <p>After</p> <p></p> <p>Old Rendering</p> <p>If you prefer, you can still enable the old group drawing. It's merely disabled in the Solver Display section of the Attribute Editor.</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#2x-performance","title":"2x Performance","text":"<p>Here's a simple performance test to give you some idea!</p> <p>Before</p> <p></p> <p>After</p> <p></p> <p>Here's one with only rendering and no simulation, meaning that navigating the viewport is even faster than the overall performance improvements.</p> <p>Before</p> <p></p> <p>After</p> <p></p> <p>OpenGL vs DirectX</p> <p>OpenGL is the quickest, use it if you can. DirectX clocks in at 120 fps, versus 200 fps for OpenGL. That's almost half the speed if you desperately need DirectX! But, still faster than the previous version. </p> <p></p>"},{"location":"releases/2022.11.29/#parallelism","title":"Parallelism","text":"<p>Here's what you can expect from parallelism with multiple solvers in this release.</p> <p>1 Solver</p> <p></p> <p>25 solvers</p> <p></p> <p>We'd expect a 25x speedup here, but are only getting on the order of 3-4x. Useful, but room to grow!</p> <p></p>"},{"location":"releases/2022.11.29/#load-physics","title":"Load Physics","text":"<p>You can now open a <code>.rag</code> file without anything already existing in your scene.</p> <p>Before, you could export the layer of physics wrapping around your character rig, and later re-apply this layer via the <code>Import Physics</code> menu item. With this release, you can throw away your character rigs and import and use the physics layer independently!</p> <p>Asset Library Backend</p> <p>This is the functionality the new Asset Library builds upon!</p> <p></p>"},{"location":"releases/2022.11.29/#asset-library","title":"Asset Library","text":"<p>You've now got a number of assets at your fingertips, ready for import.</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#version-history","title":"Version History","text":"<p>Spot which version you are on, and read more about past versions to see how Ragdoll has evolved over time.</p> <p>Clicking on a version will take you to the web page for it, assuming you've got internet access. Otherwise, you can copy the resulting address into somewhere you do.</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#licence-information","title":"Licence Information","text":"<p>The Asset Library is where you'll now also find information about your licence.</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#multiple-loads","title":"Multiple Loads","text":"<p>Load one or load many, they'll all interact with each other and can be manipulated with Live Mode too!</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#assets","title":"Assets","text":"<p>Along with the new library, and your ability to add your own assets, we've got some default ones for you to play with!</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#alien","title":"Alien","text":"<p>Let's have a look at what assets you've got to play with in this release, first up is the \"Alien\".</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#dog","title":"Dog","text":"<p>A friendly dog, ready for posing.</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#manikin","title":"Manikin","text":"<p>The classic Ragdoll Manikin character as a ragfile.</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#spaceman","title":"Spaceman","text":"<p>A zero-gravity astronaut, waiting to be tossed around in space!</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#pirate","title":"Pirate","text":"<p>Argghhhhh! This one's got fingers and a face.</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#rhino","title":"Rhino","text":"<p>A quadruped as well, with fatty bits for some nice secondary motion.</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#wasp","title":"Wasp","text":"<p>The wasp from the tutorial section!</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#cowboy","title":"Cowboy","text":"<p>A plastic doll with gun and hat!</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#dragon","title":"Dragon","text":"<p>A deconstructed version of Antoine Verney-Carron's wyvern, used in one of our early Live Streams.</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#batty","title":"Batty","text":"<p>What do you get if you combine a bat with a frog?</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#shark","title":"Shark","text":"<p>It's the Rag Shark!</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#dude","title":"Dude","text":"<p>If Rag Shark had a friend, it'd be the Dude!</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#lion","title":"Lion","text":"<p>A generic lion, in bad need of limits. Can you help him?</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#beta-videos","title":"Beta Videos","text":"<p>A series of videos made during the beta, some of which are out of date but still potentially useful!</p> <ul> <li>Live Mode 0 - Asset Library</li> <li>Live Mode 1 - Introduction</li> <li>Live Mode 2 - Edit Any Frame</li> <li>Live Mode 3 - Tense Children</li> <li>Live Mode 4 - Shift + Drag</li> <li>Live Mode 5 - Timeline</li> <li>Live Mode 6 - Drop</li> <li>Live Mode 7 - Shift + Drop</li> <li>Live Mode 8 - Tense</li> <li>Live Mode 9 - Shift + Tense</li> <li>Live Mode 10 - Ctrl + Click</li> <li>Live Mode 11 - Transfer</li> <li>Live Mode 12 - Sync Timeline</li> <li>Live Mode 13 - Hierarchy</li> <li>Live Mode 14 - Maintain Child Orientation</li> <li>Live Mode 15 - Pause When Inactive</li> <li>Live Mode 16 - Interactive Mode 3</li> <li>Live Mode 17 - Record your Live Mode 2</li> </ul> <p></p>"},{"location":"releases/2022.11.29/#translate-rotate-stiffness","title":"Translate &amp; Rotate Stiffness","text":"<p>We've making a change to how you animate with the \"stiffness\" attributes.</p> <p></p> <p>Primarily, we're removing the <code>Pose Space</code> attribute. If you hadn't yet used it, good on you. It was far too complicated of an attribute to make sense of.</p> <p>If you have been using it, you'll be pleased to know that the behaviour is now entirely consolidated into the Pin Constraint which performs exactly the same behaviour except without the mental overhead of figuring out what a \"Custom\" space actually is.</p> <p>Before</p> <p></p> <p>After</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#backwards-compatibility","title":"Backwards Compatibility","text":"<p>The previous <code>Pose Stiffness</code> attributes are still available for the time being.</p> <p>To use it, untick the <code>Use Translate/Rotate Stiffness</code> in the <code>Assign</code> menu options.</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#replace-mesh-tweak","title":"Replace Mesh Tweak","text":"<p>Like removing a pebble from your shoe, the <code>api.replaceMesh()</code> command now automatically changes your <code>rMarker.shapeType</code> attribute to <code>Mesh</code>. A small but helpful change!</p> <p></p>"},{"location":"releases/2022.11.29/#selective-export","title":"Selective Export","text":"<p>Prior to this release, whenever you <code>Export Physics</code> you'd get absolutely everything that Ragdoll knows about. Every Marker, every group and every solver too.</p> <p>With this release, you can cherry-pick the things you want included in your export, via the new <code>Export</code> attribute, found on all Ragdoll nodes. <code>On</code> by default, if <code>Off</code> then it will be invisible to the export process.</p> <p>You'd use it when you have things in your scene you know aren't interesting to export. The Ground Plane for example is <code>Off</code> per default, since it's unlikely you'd want that included in a new scene.</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#ragfile-schema-update","title":"Ragfile Schema Update","text":"<p>Two components has seen an update with new members and deprecated members.</p> <ul> <li>MarkerUIComponent</li> <li>GroupUIComponent</li> </ul> <p>These won't affect external use of <code>.rag</code> files in e.g. game engines, and shouldn't have effect anywhere really. They are used as a means of passing Maya-specific values in and out of the <code>.rag</code> file for import and export.</p> <pre><code>\"MarkerUIComponent\": {\n    \"driveStiffness\": \"is now -&gt; angularStiffness\",\n    \"driveDampingRatio\": \"is now -&gt; angularDampingRatio\",\n}\n\n\"GroupUIComponent\": {\n    \"driveStiffness\": \"is now -&gt; angularStiffness\",\n    \"driveDampingRatio\": \"is now -&gt; angularDampingRatio\",\n}\n</code></pre> <p>The prior members remain, but should not be used.</p> <p></p>"},{"location":"releases/2022.11.29/#import-attach-constraint","title":"Import Attach Constraint","text":"<p>You can now export and import the Attach Constraint!</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#scale-attach-constraint","title":"Scale Attach Constraint","text":"<p>You can now scale characters that use the Attach Constraint.</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#scale-distance-constraints","title":"Scale Distance Constraints","text":"<p>The minimum and maximum values of the Distance Constraint is now scaled alongside your character, just as you'd expect!</p> <p>Pro tip</p> <p>Notice how as the character grows in size, the effect of the Distance Constraint diminishes. That's because with greater size comes greater mass. You can control this via <code>Density = 0</code> which allows you to give a character a fixed mass regardless of size, which you may or may not want!</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#mesh-import-in-maya-2023","title":"Mesh Import in Maya 2023","text":"<p>A tiny little typo slipped in with the prior release, 2022.07.20, which led to you being unable to import anything with replaced meshes. \ud83d\ude2d This has now been fixed! \ud83e\udd73</p> <pre><code>ri.import_physics()\n// ragdoll._create_solvers() - Creating solver(s)..\n// ragdoll._create_groups() - Creating group(s)..\n// ragdoll._create_markers() - Creating marker(s)..\n// Warning: ragdoll._import_physics_wrapper() - Traceback (most recent call last):\n//   File \"C:\\Users\\marcus\\Documents\\maya\\modules\\Ragdoll-2022_07_20\\scripts\\ragdoll\\interactive.py\", line 3604, in _import_physics_wrapper\n//     _singleton_import_loader.reinterpret()\n//   File \"C:\\Users\\marcus\\Documents\\maya\\modules\\Ragdoll-2022_07_20\\scripts\\ragdoll\\internal.py\", line 441, in _undo_chunk\n//     return func(*args, **kwargs)\n//   File \"C:\\Users\\marcus\\Documents\\maya\\modules\\Ragdoll-2022_07_20\\scripts\\ragdoll\\dump.py\", line 450, in reinterpret\n//     rdmarkers = self._create_markers(rdgroups, rdsolvers)\n//   File \"C:\\Users\\marcus\\Documents\\maya\\modules\\Ragdoll-2022_07_20\\scripts\\ragdoll\\dump.py\", line 665, in _create_markers\n//     self._apply_marker(mod, entity, rdmarker)\n//   File \"C:\\Users\\marcus\\Documents\\maya\\modules\\Ragdoll-2022_07_20\\scripts\\ragdoll\\dump.py\", line 1272, in _apply_marker\n//     mobj = meshes_to_mobj(Meshes)\n//   File \"C:\\Users\\marcus\\Documents\\maya\\modules\\Ragdoll-2022_07_20\\scripts\\ragdoll\\dump.py\", line 1299, in meshes_to_mobj\n//     for index in range(len(polygon_connects) / 3):\n// TypeError: 'float' object cannot be interpreted as an integer\n// Warning: ragdoll._import_physics_wrapper() - An unexpected error occurred, see Script Editor\n</code></pre> <p></p>"},{"location":"releases/2022.11.29/#known-issue-render-gliches-from-the-inside","title":"Known Issue - Render Gliches from the Inside","text":"<p>Moving the camera inside of a marker with an outline can look a little freaky!</p> <p></p> <p></p>"},{"location":"releases/2022.11.29/#minor-releases","title":"Minor Releases","text":"<p>Following this release, here are some minor changes made.</p> <p>2022.12.01</p> <p>Revert incomplete Locomotion 2.0, coming up in the next larger release.</p> <p>2022.12.05</p> <p>Repair broken Educational licences, they were acting like trial/non-commercial licences.</p> <p>2022.12.13</p> <p>Keep fields with 0 magnitude from affecting anything.</p>"},{"location":"releases/2023.04.01/","title":"Locomotion 2.0","text":"<p>Highlight for this release is Locomotion 2.0</p> <ul> <li>ADDED Locomotion 2.0 A ton of improvements and new abilities!</li> <li>ADDED New Tutorials New Tutorials from Elbebawy</li> <li>ADDED Maya 2024 Support for Maya 2024 is here!</li> <li>ADDED Account Management Manage your Ragdoll account with ease</li> <li>ADDED Stepped Simulation Simulate on 2's!</li> <li>ADDED Blend Simulation Smooth transition between animation and simulation</li> <li>ADDED Collision Group More intuitive management of what does and does not collide</li> <li>ADDED Multi-replace mesh Replace with multiple meshes!</li> <li>ADDED Animation Refinement Turn your blocky animation into final</li> <li>ADDED Iterative Updates More immediate and continuous updates</li> <li>ADDED Trajectories Returns Faster and stronger!</li> <li>ADDED Mass Independent Fields More intuitive fields</li> <li>ADDED Quality of Life Less worry about the start frame</li> <li>UPDATED Solver Update New and improved, subtly different</li> </ul> <p></p>"},{"location":"releases/2023.04.01/#showcase","title":"Showcase","text":"<p>As is tradition, let's start off with some of the cool Ragdoll material surfacing across the interwebs since the last release.</p> <p>Mechanical Spider</p> <p></p> <p></p> <p>\"Mechanical Spider\" by vertexmonster</p> <p>60s Marionettes</p> <p>Some excellent use of Ragdoll here by Ernst-Jan on the forums</p> <p></p> <p></p> <p>Human Ball</p> <p>Zombies + Radial field = This, by Jason</p> <p></p> <p>Oh Deer</p> <p>Another one by Jason from last Christmas.</p> <p></p> <p></p> <p>Fast Food</p> <p>Jason has been on fire lately, here's another knockout!</p> <p></p> <p></p> <p>A Whale of a Time</p> <p>Jason jason jason.</p> <p></p> <p></p>"},{"location":"releases/2023.04.01/#locomotion-20","title":"Locomotion 2.0","text":"<p>First released in June 2022, this automated method of generating complete character locomotion has seen a major update!</p> <p></p> <p>With a new and much more intuitive workflow, ability to locomote along a path, with feet snapping to terrain and interactive updates as the solver works, you'll be able to achieve much greater results with far less headaches.</p> <p></p>"},{"location":"releases/2023.04.01/#new-workflow","title":"New Workflow","text":"<p>Locomotion  Markers.</p> <p>Borrowing from Markers, Locomotion no longer occupies your animation channels directly. Instead, a preview is shown for you to evaluate and later record.</p> <p></p> <p></p>"},{"location":"releases/2023.04.01/#iterative-updates","title":"Iterative Updates","text":"<p>More insight into while you wait.</p> <p>Locomotion will now show you each result it comes up with, as it searches for one that both looks great and fulfils each of your requirement; targets, limits, mass and gravity.</p> <p></p> <p></p>"},{"location":"releases/2023.04.01/#new-manipulators","title":"New Manipulators","text":"<p>Editing targets and limits was a huge chore with Locomotion 1.0. This new release makes authoring plans much less error prone and more fun.</p>"},{"location":"releases/2023.04.01/#translate","title":"Translate","text":"<p>Drag the gizmo to translate a target. Notice how it is no longer possible to author invalid targets that hover above the ground, a significant burden to anyone trying to achieve nice results has been lifted!</p> <p></p>"},{"location":"releases/2023.04.01/#rotate","title":"Rotate","text":"<p>Hold Ctrl (on Windows and Linux, Cmd on Mac) to rotate a target.</p> <p></p>"},{"location":"releases/2023.04.01/#height","title":"Height","text":"<p>Hold Shift to adjust the height of the body. Feet must always touch the ground.</p> <p></p>"},{"location":"releases/2023.04.01/#terrain-snapping","title":"Terrain Snapping","text":"<p>Aligning feet to the ground in the case of having a terrain was even more daunting; but no longer! Now feet automatically snap to any terrain.</p> <p></p> <p></p>"},{"location":"releases/2023.04.01/#multi-target","title":"Multi-target","text":"<p>Go there, then here. Do a twirl, and then go over there!</p> <p>In Locomotion 1.0, you were able to specify a start and end position for your character. But now, you can specify any number of points inbetween, effectively a path!</p> <p></p>"},{"location":"releases/2023.04.01/#timing","title":"Timing","text":"<p>Start fast, then walk slowly. Then finish fast!</p> <p>With more than 1 target, you also need to decide at when you intend on a target being reached. Click and drag on the targets in the UI to adjust.</p> <p></p> <p>Shading</p> <p>You'll notice that each target has two shades, a top and bottom.</p> Shade Meaning Top Distance, dark is less Bottom Timing, dark is less <p></p>"},{"location":"releases/2023.04.01/#pin","title":"Pin","text":"<p>Targets are guidelines to Locomotion. It'll try to follow them, but if some are physically impossible or there are conflicting goals then it will try and find a compromise. Sometimes, you need the target to be more respected, and that's when you can \"pin\" a target.</p> <p></p> <p></p>"},{"location":"releases/2023.04.01/#multi-plan","title":"Multi-plan","text":"<p>Create complex locomotion by stringing together two or more plans.</p> <p></p> <p>Complete the illusion by blending them all together with traditional Marker physics.</p> <p></p> <p>Here's how it works.</p> <ol> <li>Select a plan</li> <li>Select a second plan</li> <li>Run Align Plans</li> </ol> <p>The command will start the second plan where the first plan ends, creating one continuous motion.</p> <p></p> <p></p>"},{"location":"releases/2023.04.01/#animation-to-plan","title":"Animation to Plan","text":"<p>A \"make good\" button?</p> <p>We've talked about generating an animation from a plan, but what about the reverse? What if we could use your animation as input to the plan, and output a refined version of it? </p> <p></p> <p>The <code>Animation to Plan</code> menu item evaluates your animation and converts it into (1) targets and (2) stepsequence; the ingredients to a fully defined plan.</p> <p></p> <p></p>"},{"location":"releases/2023.04.01/#terrain-accuracy","title":"Terrain Accuracy","text":"<p>Plans now more accurately follows your terrain and enables you to visualise what Locomotion sees.</p> <p></p> <p></p>"},{"location":"releases/2023.04.01/#reset-starting-position","title":"Reset Starting Position","text":"<p>If you change the starting position of your plan, or move the character after having assigned a plan, you can re-align the two with the Reset Starting Position command.</p> <p></p> <p></p>"},{"location":"releases/2023.04.01/#terrain-debugging","title":"Terrain Debugging","text":"<p>If your terrain has two sides, Locomotion can struggle to snap its feet to the one you intend.</p> <p>Here's a problematic result.</p> <p></p> <p>If we look at the feet snapping, we can see how they tend to snap towards the lower side of this terrain.</p> <p></p> <p>We can resolve this by removing the lower side altogether.</p> <p></p> <p>And presto, all good!</p> <p></p> <p></p>"},{"location":"releases/2023.04.01/#new-tutorials","title":"New Tutorials","text":"<p>Mohamed Elbebawy has produced a new series of tutorials for Ragdoll, available here.</p> <ul> <li>Elbebawy Playlist<ul> <li>Elbebawy Series 1 - Blowing in the Wind</li> <li>Elbebawy Series 2 - Mocap pt. 1</li> <li>Elbebawy Series 2 - Mocap pt. 2</li> <li>Elbebawy Series 2 - Mocap pt. 3</li> </ul> </li> </ul> <p></p> <p></p>"},{"location":"releases/2023.04.01/#maya-2024","title":"Maya 2024","text":"<p>Released just a few days ago, Ragdoll is fully onboard. </p> <p>On the other hand, Maya 2018 has left the chat and is no longer supported by Ragdoll (or Autodesk, for that matter!)</p> <p></p>"},{"location":"releases/2023.04.01/#account-management","title":"Account Management","text":"<p>You can now monitor and manage your account with us, starting with performing remote deactivation of your node-locked licences.</p> <ul> <li>https://my.ragdolldynamics.com</li> </ul> <p>Features</p> <ul> <li> Deactivate machines for nodelocked licences</li> <li> Download receipts and invoices from past purchases</li> <li> Update payment details for subscription licences</li> <li> Activate licence offline</li> <li> Add seats to a licence</li> <li> Add products to your account</li> <li> Cancel a subscription</li> </ul> <p>Checked items are ready for you, unchecked are coming soon!</p> <p>For the time being, please contact us for login details.</p> <p></p> <p></p>"},{"location":"releases/2023.04.01/#blend-simulation","title":"Blend Simulation","text":"<p>There are now 2 ways in which to blend between simulation and animation; before or after.</p> <p></p>"},{"location":"releases/2023.04.01/#before","title":"Before","text":"<p>There is now an option to blend between animation and simulation before recording!</p> <p></p> <p>Here are some more examples.</p> <p></p> <p>This will also work alongside <code>Translate Motion = Soft</code>.</p> <p></p> <p></p>"},{"location":"releases/2023.04.01/#after","title":"After","text":"<p>Ragdoll typically records your simulation onto a layer, and this layer has a <code>Weight</code> attribute that you can animate to blend between simulation and animation.</p> <p></p> <p>But, most of the time, it isn't doing what you'd expect. </p> <p></p> <p>A new option has been added to the Record Simulation option dialog to solve this.</p> <p></p> <p>Here you can see the effect in action.</p> <p></p> <p></p>"},{"location":"releases/2023.04.01/#stepped-simulation","title":"Stepped Simulation","text":"<p>Japanese anime, and 2D animation in general, is normally animated on 2's, 3's and sometimes 4's and sometimes at arbitrary times altogether.</p> <p>Previously, Ragdoll was only ever able to produce 1 frame per Maya frame, meaning the animator would retroactively need to reduce the keys to only happen when animation happens. No longer!</p> <p></p>"},{"location":"releases/2023.04.01/#smooth-input-stepped-output","title":"Smooth input, Stepped output","text":"<p>In the simplest case, Ragdoll can be instructed to output simulation ever other or every third frame, or every fourth. Creating a 2D or stopmotion kind of look.</p> <p></p> <p></p>"},{"location":"releases/2023.04.01/#stepped-input-stepped-output","title":"Stepped input, Stepped output","text":"<p>In the more complex case, consider this animation.</p> <p></p> <p>Notice how there are pauses between frames, and that keyframes are not distributed evenly. Some have a 2 frame pause, some a 5 frame pause. Here's what would happen if you were to try and simulate this.</p> <p></p> <p>Notice how the torso and especially the tail gets jerked around. Because during each pause, Ragdoll goes ahead and simulates it as though the character came to a complete halt. And then kicks off again when it moves, at a very high velocity.</p> <p>You can now match simulation to when animation occurs, via the new <code>Warp Time</code> menu item.</p> <p></p> <p>Now simulation only happens when the character actually moves. You can control the frequency and time delta of each frame by tuning the resulting animation curve.</p> <p>Restore Time</p> <p>Use <code>Restore Time</code> to get back to a non-stepped simulation.</p> <p></p> <p></p>"},{"location":"releases/2023.04.01/#freaky-time","title":"Freaky Time","text":"<p>Time is controlled via a normal animation curve, and there's no reason it cannot also go backwards. </p> <p></p> <p>Let your creativity out!</p> <p></p>"},{"location":"releases/2023.04.01/#time-method","title":"Time Method","text":"<p>Normally, during playback Maya will transition from one frame to the next. For example, from frame 1 to 2. But sometimes, when a rig is too heavy, Maya may skip a frame or two. For example from 1 to 3, without first visiting frame 2.</p> <p>To Maya, the different in time between frame 1 and 2 is about 1/24 seconds, with a playback rate of 24 fps; that is, about 41 milliseconds. The difference between frames 1 and 3 is 83 milliseconds.</p> <p>To Ragdoll, the difference is always 41 milliseconds. No matter the difference in Maya. Why does that matter? Well, consider this.</p> <p></p> <p>At frame 17, the character hits the ground. But what if we go to frame 17 immediately, and skip a few more frames?</p> <p></p> <p>Now the character hits the ground at frame 78! To Maya, 78 frames has passed; about 3 seconds. But to Ragdoll, barely a second has passed.</p> <p>With the new <code>Time Method</code> attribute, you can now choose to handle this in a realistic way instead.</p> <p></p> <p></p>"},{"location":"releases/2023.04.01/#collision-group","title":"Collision Group","text":"<p>You can now more easily manage which Markers collide, and which does not!</p> <p></p> <p>Create New Collision Group</p> <p>Assign to two or more Markers to create a new collision group.</p> <p></p> <p>Add to Existing Collision Group</p> <p>Select a collision group along with one or more Markers to add.</p> <p></p> <p>Remove from Existing Collision Group</p> <p>Similarly remove Markers.</p> <p></p> <p>Multiple Collision Groups</p> <p>Select multiple groups to visualise them together. They will each occupy a (customisable) color.</p> <p></p> <p>Merge Collision Groups</p> <p>Assign to two or more groups to combine them.</p> <p></p> <p></p>"},{"location":"releases/2023.04.01/#trajectories","title":"Trajectories","text":"<p>You can now visualise the trajectories of your Markers via the Solver Display attribute.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"releases/2023.04.01/#mass-independent-fields","title":"Mass Independent Fields","text":"<p>Fields were introduced in Ragdoll 2022.02.14 to help apply environment effects such as wind and turbulence to your animations.</p> <p>Forces are applied as they would in real life... which isn't always practical!</p> <p>Consider this.</p> <p></p> <p>Here, as the character grows in size, so does its mass. As the mass increases, the effect of the turbulence force diminishes. Since the same force is applied to a now much-heavier object. Like if you pushed on a woodden door and then tried pushing a car; your muscles remain as strong, but the object is now much heavier.</p> <p>With this release, forces are instead applied evenly regardless of mass, which should result is more control and predictability of your simulation.</p> <p></p> <p>You can revert to the old (realistic) behaviour by changing <code>Force Mode</code> from <code>Velocity Change</code> to <code>Force</code> in the <code>rSolver</code> node.</p> <p></p> <p></p>"},{"location":"releases/2023.04.01/#multi-replace-mesh","title":"Multi Replace Mesh","text":"<p>Ragdoll supports 4 geometry types for collisions.</p> <ul> <li>Box</li> <li>Sphere</li> <li>Capsule</li> <li>Mesh</li> </ul> <p>Assign to a control, and then use <code>Replace Mesh</code> alongside any geometry to use this geometry for collision detection.</p> <p>However!</p> <p>Sometimes collisions are more complex and require multiple meshes to make up 1 physical collision shape. You can now achieve this with ease.</p> <p>You can now select any number of meshes and use the combination of them as a collision shape. </p> <p></p> <p></p>"},{"location":"releases/2023.04.01/#pin-constraint-pivot","title":"Pin Constraint Pivot","text":"<p>You can now control where on a Marker to Pin Constrain it.</p> <p>Hold <code>D</code> to edit the position of the rotate pivot</p> <p></p>"},{"location":"releases/2023.04.01/#attach-constraint-pivot","title":"Attach Constraint Pivot","text":"<p>Like the Pin Constraint, Attach Constraints can have their pivots edited too. Especially useful if you are looking to attach two Markers at a specific location.</p> <p></p> <p></p>"},{"location":"releases/2023.04.01/#quality-of-life","title":"Quality of Life","text":"<p>Last but not least, a few minor things to make your life easier.</p> <p></p>"},{"location":"releases/2023.04.01/#new-behaviour-names","title":"New Behaviour Names","text":"<p>The options for a Marker's <code>Behaviour</code> attribute has been updated for more clarity.</p> Old Name New Name <code>Inherit</code> -&gt; <code>Use Group</code> <code>Kinematic</code> -&gt; <code>Animated</code> <code>Dynamic</code> -&gt; <code>Simulated</code> <p>The name \"kinematic\" is the technical term for when something is animated, so we figured we may as well call it what it is! A Marker set to <code>Animated</code> is entirely animated, with no simulation applied. It may affect other <code>Simulated</code> Markers, but cannot be affected by them.</p> <p></p>"},{"location":"releases/2023.04.01/#edits-on-start-frame","title":"Edits on Start Frame","text":"<p>Some things in Ragdoll can be animated, others cannot. Those that cannot can also not be changed on any frame other than the start frame.</p> <p>This used to be a chore, and is no longer! Ragdoll will now automatically return to the start frame when it needs to, leaving you with less to worry about.</p> <p></p> <p></p>"},{"location":"releases/2023.04.01/#symmetry-and-undo","title":"Symmetry and Undo","text":"<p>You can now undo both sides at once, as you'd expect!</p> <p></p> <p></p>"},{"location":"releases/2023.04.01/#z-up-assets","title":"Z-up Assets","text":"<p>You can now export assets from a Y-up Maya scene, and load it into a Z-up Maya scene! This means our default assets, which were made in a Y-up environment, will now load perfectly fine in your Z-up scenes.</p> <p>Before</p> <p></p> <p>After</p> <p></p> <p></p>"},{"location":"releases/2023.04.01/#linked-solver-crash","title":"Linked Solver Crash","text":"<p>Many linked solvers could potentially crash Maya, no longer!</p> <p></p>"},{"location":"releases/2023.04.01/#deprecating-max-mass-ratio","title":"Deprecating Max Mass Ratio","text":"<p>Ragdoll likes when the masses of objects that interact are somewhat similar. A 60kg character sitting on a 100kg horse is \ud83d\udc4c. But a million ton planet falling onto a 60g ant is less than OK.</p> <p>To combat this, an attribute was introduced a while back called <code>Max Mass Ratio</code> whose job it was to even out the differences (\"ratio\") between masses. But it didn't work that great, the simulation was no happier because of it.</p> <p>So in this release, we are deprecating this attribute. It will still exist in your scene, and can be found at the very bottom of the Solver node in the Attribute Editor. If you find yourself needing it, let us know. If not, you have one less thing to worry about.</p> <p></p>"},{"location":"releases/2023.04.01/#restore-t-key","title":"Restore T Key","text":"<p>There's an option to restore the functionality of the T key, and to change it to something else.</p> <p></p> <p></p>"},{"location":"releases/2023.04.01/#one-off-bug","title":"One-off bug","text":"<p>Ragdoll was reading values from Maya that were 1 frame too old.</p> <p>Before</p> <p>I'm stepping through the simulation, notice how the pelvis is set to <code>Animated</code> (Kinematic) but how it doesn't actually have an effect until the next frame?</p> <p></p> <p>After</p> <p>This has now been fixed.</p> <p></p> <p></p>"},{"location":"releases/2023.04.01/#solver-update","title":"Solver Update","text":"<p>The underlying maths behind your physics has been modernised to resolve subtle issues but primarily lay the foundation for new things to come. You shouldn't notice much of any difference, apart from subtle things like this.</p> <ul> <li>Before 600 boxes: 69-81 fps</li> <li>After 600 boxes: 71-84 fps (lots of independent rigid bodies)</li> <li>Before Wyvern: 82 fps</li> <li>After Wyvern: 79 fps (lots of connected and constrained rigid bodies)</li> </ul> <p></p> <p></p>"},{"location":"releases/2023.04.01/#python-api","title":"Python API","text":"<p>For the Python folk out there, these members were added to the Python API.</p> <pre><code>from ragdoll import api\n\n# Create a new group\ngroup = api.assign_collision_group(markers)\n\n# Add some more markers\napi.add_to_collision_group(other_markers, group)\n\n# Remove some markers\napi.remove_from_collision_group(markers, group)\n</code></pre>"},{"location":"releases/2023.10.03/","title":"Beyond Ragdoll","text":"<p>Highlight for this release is.. lots of releases!</p> <ul> <li>ADDED Ragdoll Maya Updated Maya integration</li> <li>ADDED Ragdoll Blender New Blender integration!</li> <li>ADDED Ragdoll Standalone Run Ragdoll without Maya (or Blender)</li> <li>ADDED Ragdoll Web Run Ragdoll from your browser, even on your phone</li> <li>ADDED Ragdoll SDK Developer toolkit for Ragdoll-powered apps</li> </ul> <p></p>"},{"location":"releases/2023.10.03/#overview","title":"Overview","text":"<p>And we're back! This release is going to be a little different. Over the past few months, we've expanded upon Ragdoll's reach. It used to be written as a Maya-only plug-in, but is now written as a software development toolkit, an SDK, and re-integrated into Maya. This means that we can reuse the Ragdoll \"core\" in other software, such as Blender. It also means we can use it without Maya, and without Blender. As its own independent application! It also means developers out there can incorporate Ragdoll into their own software, as a dedicated ragdoll-simulation solution.</p> <p>To summarise, \"Ragdoll\" is now:</p> Product Description Ragdoll Maya Autodesk Maya integration, the one you know! Ragdoll Blender New integration for Blender Ragdoll Standalone Ragdoll without strings Ragdoll Web Ragdoll in your browser and on your phone Ragdoll SDK Software Development Kit (SDK) <p>So, lots of new potential!</p> <p></p>"},{"location":"releases/2023.10.03/#releases","title":"Releases","text":"<p>We'll be releasing each new product separately, so to kick things off starting with the new Maya release which boasts a lot of new fixes and improvements.</p> <p>Read more</p> <ul> <li>Ragdoll Maya 2023.10.03</li> </ul> <p></p> <p></p>"},{"location":"releases/2023.10.03/#next","title":"Next","text":"<p>The next release will be Ragdoll for Blender, follow us on LinkedIn for live updates.</p> <ul> <li>https://www.linkedin.com/company/ragdolldynamics</li> </ul> <p></p>"},{"location":"releases/2024.02.29/","title":"Ragdoll x Blender","text":"<p>Highlight for this release is.. Blender!</p> <ul> <li>ADDED Ragdoll for Blender Now available for Blender!</li> </ul> <p>After months of labour, we're pleased to announce Ragdoll for Blender is now generally available.</p> <p></p>"},{"location":"releases/2024.02.29/#blender","title":"Blender","text":"<p>Find a full breakdown of this new release here.</p> <ul> <li>Ragdoll for Blender 2024.02.29</li> </ul> <p>It's a little different from previous releases, in that it does not assume prior knowledge of Ragdoll since Blender is an entirely new audience for us.</p> <p></p> <p></p>"},{"location":"releases/2024.02.29/#open-source","title":"Open Source","text":"<p>You'll now find much of the source code for Blender's Ragdoll on GitHub, to serve as a reference implementation for the forthcoming Ragdoll SDK that you/developers can use to incorporate Ragdoll into new DCCs and games.</p> <ul> <li>https://github.com/ragdolldynamics/ragdoll-blender</li> <li>https://github.com/ragdolldynamics/bpx</li> </ul> <p>Developers out there may recognise <code>bpx</code> as the Blender equivalent to <code>cmdx</code> we developed for Maya, to cope with the performance and maintainence burden of Ragdoll.</p>"},{"location":"releases/2024.03.xx/","title":"...","text":"<ul> <li>ADDED Impulse Visualisation Gain better understanding of forces </li> </ul>"},{"location":"releases/2024.03.xx/#impulse-visualisation","title":"Impulse Visualisation","text":"<p>Contacts now include the direction and magnitude of the force being applied, helping you understand how strong (or weak) forces are at specific locations.</p>"},{"location":"releases/2024.11.17.beta/","title":"Ragdoll 4.0 Beta","text":"<p>Highlight for this release is 1 year of development!</p> <ul> <li>ADDED Tapered Capsules Pretty!</li> <li>ADDED Impulse Visualisation Gain better understanding of forces</li> <li>ADDED Translate &amp; Rotate Drag Slow down</li> <li>FIXED Custom Maya DPI Scale Ragdoll's option UI now scales properly</li> <li>FIXED Quality of Life Life, but better!</li> </ul> <p></p>"},{"location":"releases/2024.11.17.beta/#new-ui","title":"New UI","text":"<p>The UI has seen a complete overhaul to facilitate the new Ragdoll Standalone, wherein Ragdoll can be used by anyone not familiar with Maya or Blender.</p> <p></p> <p></p>"},{"location":"releases/2024.11.17.beta/#cluster","title":"Cluster","text":"<p>Simulate tens of thousands of pieces with ease.</p> <p></p> <p>It will simulate each individual polygon island of your mesh.</p> <p></p> <p></p>"},{"location":"releases/2024.11.17.beta/#usage-maya","title":"Usage Maya","text":"<ol> <li>Select mesh</li> <li>Ragdoll -&gt; Cluster</li> </ol> <p>Ragdoll will use each polygon island as its own rigid body, perfect for shattered meshes or mesh collections.</p> <p></p>"},{"location":"releases/2024.11.17.beta/#balancer","title":"Balancer","text":"<p>A new solver has been added that lets characters preserve balance as they try and reach the poses you give it.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"releases/2024.11.17.beta/#ragdoll-for-motion-builder","title":"Ragdoll for Motion Builder","text":""},{"location":"releases/2024.11.17.beta/#soft-contacts","title":"Soft Contacts","text":"<p>Contacts can now be soft, like in reality. No contact is 100% hard, unless it's diamond-to-diamond, and not even then. But rigid body solvers traditionally treat contacts as if they were, resulting in a wooden puppet-type of look.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"releases/2024.11.17.beta/#tapered-capsules","title":"Tapered Capsules","text":"<p>More control over shapes, without resorting to polygonal meshes.</p> <p></p> <p></p>"},{"location":"releases/2024.11.17.beta/#rendering-20","title":"Rendering 2.0","text":"<p>The rendering pipeline has been upgraded with some new bells and whistles!</p> <ul> <li>Smooth Shading</li> <li>Shadows</li> <li>Ambient Occlusion</li> <li>Motion Blur</li> </ul> <p></p>"},{"location":"releases/2024.11.17.beta/#smooth-shading","title":"Smooth Shading","text":"<p>The smoothest normals since 1979.</p> <p></p> <p></p>"},{"location":"releases/2024.11.17.beta/#shadows","title":"Shadows","text":"<p>Pixel-perfect shadows should help make it easier to spot issues with your simulation.</p> <p></p> <p></p>"},{"location":"releases/2024.11.17.beta/#screen-space-ambient-occlusion","title":"Screen-space Ambient Occlusion","text":"<p>Darkening in the crevices of your geometry make intersections and close contact pop.</p> <p></p> <p></p>"},{"location":"releases/2024.11.17.beta/#motion-blur","title":"Motion Blur","text":""},{"location":"releases/2024.11.17.beta/#preferences","title":"Preferences","text":"<p>There's a new window to control the overall render settings under <code>Ragdoll</code> -&gt; <code>System</code> -&gt; <code>Ragdoll Rendering</code> that look like this.</p> <p></p> <p></p>"},{"location":"releases/2024.11.17.beta/#impulse-visualisation","title":"Impulse Visualisation","text":"<p>Contacts now include the direction and magnitude of the force being applied, helping you understand how strong (or weak) forces are at specific locations.</p> <p></p> <p></p>"},{"location":"releases/2024.11.17.beta/#translate-and-rotate-drag","title":"Translate and Rotate Drag","text":"<p>Previously called \"Translate Damping\" and \"Rotate Damping\", these attribute lets you block motion of an individual Marker, similar to the <code>Air Density</code> attribute on the Solver except applied to an individual Marker.</p> <p></p> <p></p>"},{"location":"releases/2024.11.17.beta/#custom-maya-dpi-scale","title":"Custom Maya DPI Scale","text":"<p>You can override the scale of your UI in Maya's global preferences.</p> <p></p> <p>Ragdoll wasn't aware of this, and used your display scaling directly. Now it is aware, and scales with Maya as you would expect!</p> <p>Programmers</p> <p>For the programmers out there, the trick is to query <code>maya.MQtUtil.dpiScale</code>, instead of going through native Qt, e.g. <code>QWindow.QScreen().logicalDotsPerInch() / 96.0</code> since Maya overrides this value.</p> <p></p>"},{"location":"releases/2024.11.17.beta/#quality-of-life","title":"Quality of Life","text":""},{"location":"releases/2024.11.17.beta/#record-translation-on-individual-markers","title":"Record Translation on Individual Markers","text":"<p>Typically, Markers are assigned to a hierarchy of controls in a character rig, and thus translation is only relevant to the root control. But when assigning to a series of objects part of, say, a brick wall then you would expect all objects to have translation recorded as well.</p> <p>That is now the case!</p>"},{"location":"releases/blender/2024.02.29/","title":"Ragdoll x Blender","text":"<p>Today we are pleased to announce Ragdoll for Blender!</p> <p>Ragdoll is a real-time physics solver for animators originally built for Autodesk Maya and now available to Blender!</p> <p>Started development in 2021 by animator/programmer Marcus Ottosson, Ragdoll has since been adopted by just about every large visual effects company in the world and several AAA and indie games studios too.</p> <ul> <li>Weta (e.g. Avatar, Planet of the Apes)</li> <li>Double Negative (e.g. Furious X)</li> <li>Framestore (e.g. Harry Potter)</li> <li>Imageworks (e.g. Spiderverse)</li> <li>Digital Domain (e.g. Tron Legacy)</li> <li>Kojima Productions (e.g. Death Stranding)</li> <li>CD Projekt Red (e.g. Cyberpunk 2077)</li> <li>Deck Nine Games (e.g. Life is Strange)</li> <li>... the list goes on!</li> </ul> <p>If you've been to the theatres at any point in the past few years, it is highly likely you've witnessed Ragdoll-powered animations!</p> <p>Now we're extending the reach of Ragdoll to those outside of the Maya domain, to you lovely bunch in the Blender camp. Our hope is that more animators will be able to benefit from Ragdoll, whilst also encouraging new animators to join the field with access to more tools to help simplify the animation process.</p> <p></p>"},{"location":"releases/blender/2024.02.29/#showcase","title":"Showcase","text":"<p>Here are some examples of Ragdoll in the wild.</p> <p></p> <ul> <li>Footage from https://forums.ragdolldynamics.com/t/ragdoll-beta-for-blender/1171</li> </ul> <p></p> <p></p> <p></p> <p></p>"},{"location":"releases/blender/2024.02.29/#why-ragdoll","title":"Why Ragdoll?","text":"<p>Character animation is hard.</p> <p>You've got the techincal barrier of understanding your computer and software, which on its own is hard, but then you've got the artistic choices involved in communicating your story. There are poses and there is timing - critical to any performance. But then you have momentum, contacts and a sense of weight.</p> <p>Equally critical but boring.</p> <p>Your audience has a keen eye for things like momentum and contacts, often without realising it. It feels either right or wrong. And it is incredibly hard - as an animator - to get it right.</p> <p>This is where Ragdoll can help.</p> <p>Animation is all about breathing life into inanimate objects, but also lifelessness. It's a spectrum, and Ragdoll can almost entirely handle a large part of this spectrum on its own.</p> <pre><code>0% Life                                                           100% Life\n|--------------------------------------------------------------------|\n^                                       ^\n|                                       |\n|=======================================|\n                  Ragdoll\n</code></pre> <p>In its most simple form, Ragdoll can entirely generate lifeless animation.</p> <p></p> <p>With keyframes for input, it can generate semi-lifeless animation.</p> <p></p> <p></p>"},{"location":"releases/blender/2024.02.29/#how-does-it-work","title":"How does it work?","text":"<p>Ragdoll monitors your animation and provides you with a preview of what it would look like if you let physics take the wheel.</p> <p></p> <p>In this example, the blue character is your animation. It's the \"guide\" for the simulated version of your animation.</p> <p>Here's what that might look like in practice.</p> <p></p> <p>Here's a more elaborate example, animation versus simulation towards the end.</p> <p></p> <p>Points of interest.</p> <ol> <li>Notice how the rhino has a looping animation, that carries through into simulation</li> <li>Notice how contacts are handled entirely by Ragdoll</li> <li>Notice how simple the animation is!</li> <li>Notice how close the simulation is to the animation, you control how much</li> </ol> <p></p>"},{"location":"releases/blender/2024.02.29/#getting-started","title":"Getting Started","text":"<p>Ok, with that out of the way, let's get you going with Ragdoll!</p> <ul> <li>Download and Install Ragdoll</li> </ul> <p></p>"},{"location":"releases/blender/2024.02.29/#supported-platforms","title":"Supported Platforms","text":"<p>We aim to get Ragdoll to users on all platforms, the one lagging behind is MacOS due to its recent transition to Metal for rendering into the viewport.</p> Blender Windows Linux macOS 3.4 \u2714\ufe0f \u2714\ufe0f \u274c 3.5 \u2714\ufe0f \u2714\ufe0f \u274c 3.6 \u2714\ufe0f \u2714\ufe0f \u274c 4.0 \u2714\ufe0f \u2714\ufe0f \u274c <p>MacOS</p> <p>Tim Apple made it difficult with their transition to Metal, and Blender followed suit with version 3.5. Ragdoll was originally built with OpenGL and DirectX support and it'll take a moment to re-do all of this work (again!) for Metal.</p> <p></p>"},{"location":"releases/blender/2024.02.29/#quickstart","title":"Quickstart","text":"<p>In the Ragdoll menu, load some asset and fool around. </p> <p></p> <p>You can also enter into the \"Manipulator\" to fool around even more.</p> <p>Tense</p> <p>Hold Shift to toggle the \"Tense\" icon, having the character try to reach its current Blender pose.</p> <p></p> <p></p>"},{"location":"releases/blender/2024.02.29/#first-steps","title":"First steps","text":"<p>With our beak wet, let's have a look at how this actually works.</p> <p>Step 1</p> <p>Make a cube.</p> <p></p> <p>Step 2</p> <p>Assign a \"Marker\"</p> <p></p> <p>Step 3</p> <p>Record Simulation.</p> <p></p> <p>And that's it! You'll now find keyframes on your cube.</p> <p></p> <p></p>"},{"location":"releases/blender/2024.02.29/#second-steps","title":"Second Steps","text":"<p>With your first steps out of the way, let's have a look at how this applies to a real-world scenario, to achieve this:</p> <p></p> <p>We'll use one of the Animation Fundamental rigs.</p> <ul> <li>Download Rig</li> </ul> <p></p> <p>Step 1</p> <p>Once you've loaded your character, you can start assigning to the controls you normally use to animate with.</p> <p></p> <p>Step 2</p> <p>Next, we tune our shapes to better fit our character. This helps distribute mass and make things move more realistically, as though your character was an actual physical being.</p> <p></p> <p>In this case, we'll also use some of the meshes of the character directly, as opposed to simple capsules.</p> <p></p> <p>Step 3</p> <p>If your character didn't already have animation, let's add some!</p> <p></p> <p>Step 4</p> <p>Finally, we can record the simulation onto keyframes to witness the result.</p> <p></p> <p></p>"},{"location":"releases/blender/2024.02.29/#third-steps","title":"Third Steps","text":"<p>Many new concepts in the above few steps, here's a full walkthrough of all steps.</p> <ul> <li>YouTube (32:50)</li> </ul> <p></p> <p></p>"},{"location":"releases/blender/2024.02.29/#maya-comparison","title":"Maya Comparison","text":"<p>If you are already familiar with Ragdoll from Maya, here's what's carried over versus missing so far.</p> Feature Status Notes Solver \u2714\ufe0f Marker \u2714\ufe0f Group \u2714\ufe0f Manipulator \u2714\ufe0f Live Mode \u2714\ufe0f Constraints \u2714\ufe0f Export Physics \u2714\ufe0f Load Physics \u2714\ufe0f Record Simulation \u2714\ufe0f Retargeting \u2714\ufe0f Licencing \u2714\ufe0f Collision Group \u274c But you can use Marker's <code>Overlap Group</code> instead Force Fields \u274c Coming Soon \u2122 Snap to Simulation \u2714\ufe0f Import Physics \u274c Export Physics \u2714\ufe0f Update Physics \u274c <p></p>"},{"location":"releases/blender/2024.02.29/#performance","title":"Performance","text":"<p>Ragdoll in Blender runs at 0.6x performance compared to Maya, which is far greater than we'd hoped considering that much of the addon is written in Python whereas the Maya plug-in is entirely written in a compiled language.</p> <p>Compared to Blender's native physics, the comparison is more difficult because Ragdoll does more than Blender, primarily steering the simulation with your animation. What we do share however is a general simulation of loose objects with a high amount of substeps. In this regard, Ragdoll is both more stable (less explosions) and more accurate (automatically computed mass and center of mass).</p> <p>In this scenario, ragdoll runs about 30% faster than native Blender physics.</p> <p></p> <p></p> <p>That said, this scene features heavy interpenetrations of objects which require <code>Split Impulse</code> to be enabled (Ragdoll does something similar). Without it, Blender struggles with intersections but runs much faster, on the order of 10x quicker than Ragdoll.</p> <p></p> <p>With this in mind, native physics is better suited for large scenes of loose objects, like building destruction and the like.</p> <p></p>"},{"location":"releases/blender/2024.02.29/#open-source","title":"Open Source","text":"<p>The Blender Addon is licenced under MIT, and so is <code>bpx</code>; the library we developed specifically for Ragdoll. They can both be found on GitHub, here.</p> <ul> <li>https://github.com/ragdolldynamics/ragdoll-blender</li> <li>https://github.com/ragdolldynamics/bpx</li> </ul> <p></p>"},{"location":"releases/blender/2024.02.29/#next-steps","title":"Next Steps","text":"<p>You're all set. We'll work towards more tutorials, including how to achieve this effect from Kojima's Death Stranding 2.</p> <p></p> <p></p> <p>See also</p> <ul> <li>The rest of the documentation, on use the navigation up-top and to the left \ud83d\udc48</li> <li>The forums for questions and answers</li> <li>Our YouTube channel</li> </ul> <p>Enjoy, and speak soon! :party:</p>"},{"location":"releases/blender/2024.03.07/","title":"Patch 1","text":"<p>Minor patch release for Blender with common issues patched up and ready to go! :party:</p> <ul> <li>FIXED Recording from not-startframe For recording from not-startframe</li> <li>FIXED Recording past 100 Your controls no longer snap to 0, 0, 0</li> <li>FIXED Undoing NLA track edits More stable undo/redo</li> <li>FIXED Snap to Simulation with deleted Markers This could trip up Ragdoll, no longer!</li> <li>FIXED 100 frame limit Trial and Personal users now get a visaul cue that they are limited to 100 frames of recorded simulation</li> <li>FIXED Trial expiry You will now get notified when your trial expires</li> <li>FIXED Activation error Activating worked, but threw an unnecessary error</li> <li>FIXED Codesigning on Windows No more warnings from Chrome or virus scanners</li> <li>FIXED Open file on not-startframe Cosmetic fix for opening a scene when saved on a frame other than the start frame</li> </ul> <p></p>"},{"location":"releases/blender/2024.03.07/#showcase","title":"Showcase","text":"<p>Check out this awesome thread on the forums from user @Manikandan_Rajendran!</p> <ul> <li>https://forums.ragdolldynamics.com/t/the-fall-ragdoll-blender/1287</li> </ul> <p></p> <p>We've got a new tutorial, live and available on YouTube!</p> <ul> <li>YouTube</li> <li>Forums</li> </ul> <p></p> <p></p>"},{"location":"releases/blender/2024.03.07/#quality-of-life","title":"Quality of Life","text":"<p>Ragdoll will now tell you when exceeding the 100 frame limit during trial, it'll also tell you when it expires which for those of you who started the trial on the 1<sup>st</sup> of March should happen around the 1<sup>st</sup> of April. Minor things that solve a lot confusion.</p> <p>The binaries we shipped are now also \"code signed\", meaning Windows will be familiar with them and not warn about potential threats. This should have happened before but we've had a bit of an office move in the past week so things have been up in the air!</p> <p>You'll also find instructions on how to activate your licence on the Download page for Blender.</p> <ul> <li>https://learn.ragdolldynamics.com/blender/download</li> </ul> <p></p>"},{"location":"releases/blender/2024.03.07/#next-steps","title":"Next Steps","text":"<p>Download links are in the usual places, right here:</p> <ul> <li>Blender Addon - https://learn.ragdolldynamics.com/blender/download</li> <li>Ragdoll Core - https://learn.ragdolldynamics.com/sdk/download</li> </ul> <p>Stay tuned for more, and please report any issues or feature requests on our forums, here:</p> <ul> <li>https://forums.ragdolldynamics.com</li> </ul> <p>Enjoy, and see you soon!</p>"},{"location":"releases/blender/2024.04.09/","title":"Patch 2","text":"<p>Minor patch release for Blender with common issues patched up and ready to go! \ud83e\udd73</p> <ul> <li>ADDED New Tutorials More to learn!</li> <li>ADDED Smooth Shading Pleasant for your eyes and soul</li> <li>ADDED Merge Solvers For character-to-character interactions</li> <li>ADDED Export Physics Export from Blender, Load in Maya</li> <li>ADDED Record to Quaternions Euler, Quaternions, Axis-Angle, you name it</li> </ul> <p></p>"},{"location":"releases/blender/2024.04.09/#showcase","title":"Showcase","text":"<p>Let's start with some goodies!</p> <p></p> <p></p> <p></p>"},{"location":"releases/blender/2024.04.09/#new-tutorials","title":"New Tutorials","text":"<p>The above goodies are part of the new tutorials since last release!</p> <ul> <li>Slap'n'Sass 1</li> <li>Slap'n'Sass 2</li> <li>Merge Solvers with Auto Rig Pro</li> </ul> <p></p>"},{"location":"releases/blender/2024.04.09/#smooth-shading","title":"Smooth Shading","text":"<p>You'll now find a more pleasant looking geometry for convex meshes. </p> <p></p> <p></p>"},{"location":"releases/blender/2024.04.09/#merge-solvers","title":"Merge Solvers","text":"<p>You can now append one character into scene with an existing solver, and either continue to simulate each independently or merge their solvers to have them interact.</p> <ul> <li>Merge Solvers with Auto Rig Pro</li> </ul> <p></p> <p>See Maya release notes for the same feature for more details.</p> <ul> <li>2022.02.28</li> </ul> <p></p>"},{"location":"releases/blender/2024.04.09/#export-physics","title":"Export Physics","text":"<p>You can now export your Ragdoll character and load it back in.</p> <p></p> <p>This can be helpful to debug complex characters, but it can also be used for inter-application export and load, like this one to Maya.</p> <p></p> <p>The file format will be compatible with the Standalone and Web versions of Ragdoll too, anything you export will work everywhere!</p> <p></p>"},{"location":"releases/blender/2024.04.09/#record-quaternions","title":"Record Quaternions","text":"<p>Ragdoll will now respect the choice of rotation interpolation, rather than setting them to Euler/XYZ upon recording.</p> <p></p> <p></p>"},{"location":"releases/blender/2024.04.09/#download","title":"Download","text":"<p>As always, you can find the latest download on the Downloads page.</p> <ul> <li>https://learn.ragdolldynamics.com/blender/download</li> </ul> <p>Note</p> <p>This update involves both Ragdoll for Blender and Ragdoll Core, so be sure to get both up to 2024.04.09 for this to work.</p>"},{"location":"releases/core/2023.07.xx/","title":"Ragdoll Core","text":"<ul> <li>ADDED Developer Documentation</li> </ul>"},{"location":"releases/core/2023.07.xx/#developer-documentation","title":"Developer Documentation","text":"<p>No longer just a Maya plug-in. Today we are announcing Ragdoll Core, a Ragdoll software development kit (SDK) to enable third-parties to integrate Ragdoll into their own projects, from Games to DCCs.</p> <p>We extracted all of what was unique about Ragdoll from Maya and turned it into its own project. Ragdoll Core is the enginer that powers Ragdoll, and now you can benefit from this engine too. If you develop your own software or game and are interested in utilising Ragdoll for your character animation needs, contact us!</p> <ul> <li>Ragdoll Core 2023.07.xx</li> </ul>"},{"location":"releases/maya/2023.10.03/","title":"Universal Transfer","text":"<p>Highlight for this release is Universal Transfer!</p> <ul> <li>ADDED Unlimited Simulation Simulate without a licence</li> <li>ADDED Update Physics Presets, finally!</li> <li>ADDED Universal Transfer Now works with any Maya rig!</li> <li>ADDED Snap to Simulation Reliable, like Live Mode</li> <li>ADDED Ghosting Visualise past, present and future</li> <li>ADDED Live Mode Precision More confident posing</li> <li>ADDED Additive Recording For jiggle and secondary motion</li> <li>ADDED Scene Scale Reliable and visual scale</li> <li>ADDED Mass Units Kilograms!</li> <li>ADDED Influence Animatable, one-way attach constraints</li> <li>ADDED Resizable UIs You can horizontally resize these</li> <li>ADDED Root Stiffness Stiffness and damping on the root!</li> <li>ADDED Quality of Life Life, but better</li> <li>UPDATED API Changes For you hackers and slashers out there</li> <li>UPDATED Deprecated A few things less to worry about</li> </ul> <p></p>"},{"location":"releases/maya/2023.10.03/#overview","title":"Overview","text":"<p>These release notes are the Maya-specific notes from the overall notes here.</p> <ul> <li>Ragdoll 2023.10.03</li> </ul> <p>For minor patch notes, e.g. 2023.10.06 see the announcement thread.</p> <ul> <li>https://forums.ragdolldynamics.com/t/ragdoll-2023-10-03</li> </ul> <p></p>"},{"location":"releases/maya/2023.10.03/#showcase","title":"Showcase","text":"<p>Let's start with the good stuff!</p> <p>Jasons Spider</p> <p></p> <p></p> <p></p> <p>Jason's Monkey</p> <p></p> <p>Skeletons</p> <p>Excellent work by Hirokazu-san!</p> <ul> <li>LinkedIn Post</li> </ul> <p></p> <p>Davy Jones</p> <p>Enother excellent piece by Nithin_Piano on our forums.</p> <ul> <li>Read mode</li> </ul> <p></p> <p>Retro</p> <p>Finished work by Erns-Jan on our forums.</p> <ul> <li>Read more</li> </ul> <p></p> <p></p>"},{"location":"releases/maya/2023.10.03/#unlimited-simulation","title":"Unlimited Simulation","text":"<p>Ragdoll will now happily simulate without requiring a licence.</p> <p></p> <p>This has 2 main implications.</p> <ol> <li>Trial licences can be used for simulation and learning forever, yay!</li> <li>Floating licences no longer occupy a seat when simulating, only when recording</li> </ol> <p>Licences now only become relevant when getting simulation out of Ragdoll, primarily to record your simulation. This way, you can learn and experiment with simulation to your hearts content and only pay for a licence and seat when you are happy with the result. How great is that?</p> <p></p>"},{"location":"releases/maya/2023.10.03/#universal-transfer","title":"Universal Transfer","text":"<p>Live Mode now works with native Maya rigs!</p> <p></p> <p></p> <p>Rig from https://agora.community/content/stormtrooper-may</p> <p></p> <p>Rig from https://www.cgspectrum.com/resources/tiger-animation-rig</p> <p>IK too</p> <p>Notice how all controllers, including IK, is transferred. This was not possible before!</p> <p></p>"},{"location":"releases/maya/2023.10.03/#distraction-free-posing","title":"Distraction Free Posing","text":"<p>Use Live Mode as a substitute for your normal animation controls, by SHIFT clicking on the transfer button. This overlays Ragdoll over your character and automatically transfers upon releasing the mouse cursor.</p> <p></p> <p>At this point, we can go distraction-free and hide all NURBS control to work entirely with Live Mode.</p> <p></p> <p></p>"},{"location":"releases/maya/2023.10.03/#background","title":"Background","text":"<p>So, wasn't this the case already?</p> <p>Live Mode was released with Ragdoll 2022.11.29 as a means of experimenting and gaining intuition of limits and contacts. With it came the ability to transfer the live poses back onto the Maya character. However, it only supported characters loaded natively with Ragdoll, or at best very simplistic native Maya rigs. Those that consisted of a plain FK hierarchy, such as a joint hierarchy.</p> <p></p> <p>At the time, it seemed this mechanic would not be possible with native Maya rigs, since Ragdoll relies on this hierarchy to figure out the final position and orientation of each body part. For example, to know where the hand is, Ragdoll first needs to know where the arm is, which needs to know where the torso is and where the hip is and so on. The hand depend on those positions.</p> <p>Native Maya rigs don't work like that; they rarely form a linear hierarchy like this, with IK and space switching constraints and stretchy limbs all complicating the transformation path from hip to hand.</p> <p></p>"},{"location":"releases/maya/2023.10.03/#tuning","title":"Tuning","text":"<p>The universal transfer is an \"iterative\" solver. Here's how it works:</p> <ol> <li>For every control in your rig..</li> <li>Try and match the corresponding Marker..</li> <li>Repeat, until each control is a close match</li> </ol> <p>The challenge is that some control cause other controls to move. For example, after Ragdoll has matched the foot, matching the upper leg would move the foot again. And so the process needs to be repeated until each cyclic dependency is resolved.</p> <p>Per default, Ragdoll will iterate up to 4 times, and stop as soon as controls get \"close enough\". The distance Ragdoll considers \"close enough\" is called \"tolerance\" and the number of times it attempts to reach that position is called \"iterations\".</p> <p>Here's the normal circumstances.</p> <p></p> <p>And here's what happens when you tune iterations.</p> <p></p> <p>Notice how that with just 1 iteration, it isn't enough to transfer once. You'll have to keep pressing the transfer button until your character is close enough. That's that's exactly what iterations do; they keep pressing the button until it's close enough.</p> <p></p>"},{"location":"releases/maya/2023.10.03/#iterations","title":"Iterations","text":"<p>Here's one more visual to help you understand the effect of iterations.</p> <p></p> <p>Here, iterations are set to 1, meaning that each time we click we run exactly 1 iteration.</p> <p>Pro Tip</p> <p>You can manually type in an iteration count, such as 8 or 16, in case 4 is not enough. Generally, it depends on the number of cycles in your rig that contradicts the hierarchy. For example, if the upper leg is affected by the foot, then that's a cycle. This is also the most common cycle for IK-based rigs, where the upper leg is affected by the pole vector which is typically affected by the foot.</p> <p></p>"},{"location":"releases/maya/2023.10.03/#minimum-iterations","title":"Minimum Iterations","text":"<p>Sometimes, Ragdoll thinks it finds a close match, but you as a human know better. That's when you can force Ragdoll to keep trying to find a match for X number of times. This number is the minimum number of iterations.</p> <p></p> <p></p>"},{"location":"releases/maya/2023.10.03/#limitations","title":"Limitations","text":"<p>Some rigs are still out of bounds for Ragdoll, no matter how many iterations. Here are a few things you can potentially expect depending on the complexity of your rigs.</p> <p></p> <p>Notice how the arm sometimes doesn't match, until you hit the transfer button a few more times.</p> <p>Help</p> <p>If you find a pattern, something small that consistently fails, let us know. We'd like to solve this!</p> <p></p>"},{"location":"releases/maya/2023.10.03/#update-physics","title":"Update Physics","text":"<p>Work faster and in parallel with your peers using this new feature.</p> <p>Rag files can now be used presets and save-states for your characters, enabling updates to your character as you animate.</p> <p></p> <p></p>"},{"location":"releases/maya/2023.10.03/#options","title":"Options","text":"<p>Everything is updated per default, minus any attribute that is already keyframed or otherwise locked. For more control, see the options provided in the UI.</p> Option Description Include Materials Friction, restitution and collide attributes Include Shapes Extents, radius and shape type Include Limits On/off state, angles, frames Include Springs Stiffness and damping Include Solvers Whether to include solver attributes at all Include Markers Whether to include any Marker attributes at all Include Constraints Whether to include pin constraints et. al. Include Groups Whether to include groups Include Targets If Markers have been retargeted, include the new target <p></p> <p></p>"},{"location":"releases/maya/2023.10.03/#update-api","title":"Update API","text":"<p>Since this is suitable for pipeline automation, here's what you tech gurus can do.</p> <pre><code>from ragdoll import api\napi.update_physics(fname, opts)\n</code></pre> <p>Where <code>fname</code> is the full path to a <code>.rag</code> file, such as <code>c:\\assets\\storm1.rag</code> and <code>opts</code> is an optional dictionary with the same options as for <code>import_physics</code>.</p> <p>Options</p> <p>You'll generally want to match these with whatever options you used to originally import your <code>.rag</code> file.</p> <pre><code>opts = {\n    \"roots\": [],\n    \"matchBy\": constants.MatchByHierarchy,\n    \"searchAndReplace\": [\"\", \"\"],\n    \"namespace\": None,\n    \"preserveAttributes\": True,\n    \"retarget\": True,\n\n    \"overrideSolver\": \"\",\n    \"createMissingTransforms\": False,\n\n    \"includeSprings\": True,\n    \"includeLimits\": True,\n    \"includeShapes\": True,\n    \"includeMarkers\": True,\n    \"includeGroups\": True,\n    \"includeSolvers\": True,\n    \"includeConstraints\": True,\n    \"includeMaterials\": True,\n    \"includeTargets\": True,\n}\n</code></pre> <p></p>"},{"location":"releases/maya/2023.10.03/#snap-to-simulation","title":"Snap to Simulation","text":"<p>This button has seen an upgrade too, and now works like the Live Mode transfer!</p> <p></p> <p></p>"},{"location":"releases/maya/2023.10.03/#ghosting","title":"Ghosting","text":"<p>Gain greater control over your animation by visualising past and present.</p> <p></p> <p></p>"},{"location":"releases/maya/2023.10.03/#caching","title":"Caching","text":"<p>Cache your simulation to see the future too, this can be helpful when making tweaks without changing time to see the effects of your tweaks with very high precision.</p> <p></p> <p></p>"},{"location":"releases/maya/2023.10.03/#past-future","title":"Past &amp; Future","text":"<p>Tune the number of frames to look ahead or into the past.</p> <p></p> <p></p>"},{"location":"releases/maya/2023.10.03/#increment","title":"Increment","text":"<p>Choose how many frames in between each frame to skip.</p> <p></p> <p></p>"},{"location":"releases/maya/2023.10.03/#colors","title":"Colors","text":"<p>Finally, tune the colors of your ghosts to fit your preference. </p> <p></p> <p></p>"},{"location":"releases/maya/2023.10.03/#live-mode-precision","title":"Live Mode Precision","text":"<p>You'll now find greater precision when posing your character in Live Mode, along with an improved IK behaviour.</p> <p></p> <p>IK will now lock the grandparent of anything you drag, just like traditional IK, in addition to keeping the Marker you drag from rotating.</p> <p></p> <p>Pro Tip</p> <p>Hold the SHIFT key for a \"full-body IK\" type behaviour.</p> <p></p>"},{"location":"releases/maya/2023.10.03/#additive-recording","title":"Additive Recording","text":"<p>You can now record physics onto an additive layer, meaning layers can be combine, blended and kept active even when changing the underlying animation.</p> <p></p> <p></p>"},{"location":"releases/maya/2023.10.03/#scene-scale","title":"Scene Scale","text":"<p>There is now an interactive widget to configure Ragdoll to fit your character.</p> <p></p> <p>When creating your first scene, Ragdoll will automatically try and detect your scene scale based on your first assignments.</p> <p>See this option in the UI for how to control this.</p> <p></p> <p></p>"},{"location":"releases/maya/2023.10.03/#mass-units","title":"Mass Units","text":"<p>Units now make physical sense.</p> <p></p> <p>Kilograms all around</p> <p>Notice how values are in kg</p> <p>This not only enables you to get a clear sense of what scale simulation happens at, but also provides accurate values of mass, in kilograms. A typical human weighs 60-100 kg and Ragdoll's forces depend on this being an accurate measure. Previously, mass was rather fixed at 6-10 kg as Ragdoll assumed your characters were roughly 18 cm tall, as is the norm in visual effects and animation (strangely enough!).</p> <p>You'll also see the effect of making your character a giant, via the new Scene Scale manipulator.</p> <p></p> <p>With this release, characters of any scale will produce identical results.</p> <p>Pro Tip</p> <p>Because a giant weighs more, it also has an effect on any forces that act upon it. Like trying to push a car versus pushing a planet; the same amount of push will affect the object differently.</p> <p></p>"},{"location":"releases/maya/2023.10.03/#rotation-mass","title":"Rotation Mass","text":"<p>You'll also notice a new member to the property panel; <code>Rotate Mass</code>. This can help you understand how easily an object starts to spin and how strongly it is affected by <code>Rotate Stiffness</code> in which axis.</p> <p>An axis with little mass will move more quickly and with less force; it will also affect other objects less. Just like <code>Mass</code>, except for rotations!</p> <p>Pro Tip</p> <p>This is also called Moment of Inertia and Angular Momentum, if you would like to Google it.</p> <p></p>"},{"location":"releases/maya/2023.10.03/#influence","title":"Influence","text":"<p>The Attach Constraint has a new attribute called <code>Influence</code> that lets you control the amount of influence the child has over its parent.</p> Value Meaning 0.0 Child has no influence, pulls child towards itself 0.5 Parent and child hinfluence, pulls parent towards itself have equal influence, this is  the default 1.0 Child has all influence <p></p>"},{"location":"releases/maya/2023.10.03/#usecases","title":"Usecases","text":"<p>You can use it when you want one Marker to reach another, without the other being influenced by it. Notice here for example how the monkey limbs reach for the limb, without the limb being affected (until eventually reaching, at which point the influence is animated back to 0.5).</p> <p></p> <ul> <li>Punching a punch bag and always landing exactly where you intend \u2026 even when the bag is in motion</li> <li>Catching a ball where you have it only follow Z and X so the hand adjusts to catch</li> <li>For the legs pulling towards the branch, rather then both pulling to each other</li> <li>An action hero jumping to grab a rope, can get the hand to pull or go to where it needs to be then lock it in for the swing</li> </ul> <p></p>"},{"location":"releases/maya/2023.10.03/#how-it-works","title":"How it works","text":"<p>And yes, you can animate this attribute!</p> <p></p> <p></p>"},{"location":"releases/maya/2023.10.03/#resizable-uis","title":"Resizable UIs","text":"<p>Sometimes names of things gets too long, and the UI is unable to fully show it to you. Until now, when you can (finally) resize the UI horizontally!</p> <p></p> <p></p>"},{"location":"releases/maya/2023.10.03/#root-stiffness","title":"Root Stiffness","text":"<p>The first controller in your character hierarchy can now make use of Rotate and Translate Stiffness, just like any of its children. The difference is, the parent of the root is the world; so it will behave just like it was Pin Constrained.</p> <p></p> <p></p>"},{"location":"releases/maya/2023.10.03/#quality-of-life","title":"Quality of Life","text":"<p>A number of smaller things have been addressed, take a look!</p> <p></p>"},{"location":"releases/maya/2023.10.03/#multi-select-replace-mesh","title":"Multi-select Replace Mesh","text":"<p>Sometimes, you need more than just a single mesh for your Marker. That's when you can combine your meshes and use the resulting combined mesh to replace with. We've saved you the extra clicks in this release, making it possible to do this!</p> <ol> <li>Select Marker</li> <li>Select one or more meshes</li> <li>Replace Mesh</li> </ol> <p>Each mesh will be combined into a single Marker mesh.</p> <p></p> <p></p>"},{"location":"releases/maya/2023.10.03/#prevent-duplicate-markers","title":"Prevent Duplicate Markers","text":"<p>Sometimes, you accidentally assign</p> <p></p> <p></p>"},{"location":"releases/maya/2023.10.03/#attach-constraint-parent","title":"Attach Constraint Parent","text":"<p>You can now unparent an attach constraint, leaving it at the root of your Outliner. There's also a new option called \"Parent\" in the UI you can use to set the default.</p> <p></p> <p></p>"},{"location":"releases/maya/2023.10.03/#record-translation-rotation","title":"Record Translation &amp; Rotation","text":"<p>When Markers were first added to Ragdoll, they came with two attributes called:</p> <ul> <li><code>Record Translation</code></li> <li><code>Record Rotation</code></li> </ul> <p>The idea being that you can choose whether controls should receive translation keyframes, rotation keyframes or both. It didn't work; because the way we recorded was somewhat limited.</p> <p>This changes today, and you are now able to use these attribute to selectively skip or include channels that would otherwise receive keyframes.</p> <p></p> <p></p>"},{"location":"releases/maya/2023.10.03/#api-changes","title":"API Changes","text":"<p>There is now an alias for <code>reinterpret_physics</code>, which has already had a bit of a difficult name. The word \"import\" has special meaning in Python, hence it was mostly avoided. But alongside <code>_physics</code> it is now available as:</p> <pre><code>from ragdoll import api\napi.import_physics(fname, opts)\n</code></pre> <p></p>"},{"location":"releases/maya/2023.10.03/#deprecated","title":"Deprecated","text":"<p>Less attributes to worry about in this release; if you use them you are adviced to transition away from these.</p> <ul> <li> <code>Mass Ratio</code> on the <code>rdSolver</code> node has been deprecated</li> <li> The <code>Drive Per Substep</code> attribute on the Solver node turned out to be a success and is now always-on!</li> <li> The <code>Frameskip Method</code> attribute on the Solver node has been removed, turns out Pausing the simulation is never really that useful!</li> </ul>"},{"location":"releases/maya/2023.11.xx/","title":"...","text":"<p>Highlight for this release is ...!</p> <ul> <li>ADDED Impulse Visualisation Gain better understanding of forces</li> <li>ADDED Translate &amp; Rotate Drag Slow down</li> <li>FIXED Custom Maya DPI Scale Ragdoll's option UI now scales properly</li> <li>FIXED Quality of Life Life, but better!</li> </ul> <p></p>"},{"location":"releases/maya/2023.11.xx/#rendering-20","title":"Rendering 2.0","text":"<p>The rendering pipeline has been upgraded with some new bells and whistles!</p> <ul> <li>Shadows</li> <li>Smooth Shading</li> </ul>"},{"location":"releases/maya/2023.11.xx/#shadows","title":"Shadows","text":""},{"location":"releases/maya/2023.11.xx/#smooth-shading","title":"Smooth Shading","text":""},{"location":"releases/maya/2023.11.xx/#preferences","title":"Preferences","text":"<p>There's a new window to control the overall render settings under <code>Ragdoll</code> -&gt; <code>System</code> -&gt; <code>Ragdoll Rendering</code> that look like this.</p> <p></p> <p></p>"},{"location":"releases/maya/2023.11.xx/#impulse-visualisation","title":"Impulse Visualisation","text":"<p>Contacts now include the direction and magnitude of the force being applied, helping you understand how strong (or weak) forces are at specific locations.</p> <p></p>"},{"location":"releases/maya/2023.11.xx/#translate-and-rotate-drag","title":"Translate and Rotate Drag","text":"<p>Previously called \"Translate Damping\" and \"Rotate Damping\", these attribute lets you block motion of an individual Marker, similar to the <code>Air Density</code> attribute on the Solver except applied to an individual Marker.</p> <p></p>"},{"location":"releases/maya/2023.11.xx/#custom-maya-dpi-scale","title":"Custom Maya DPI Scale","text":"<p>You can override the scale of your UI in Maya's global preferences.</p> <p></p> <p>Ragdoll wasn't aware of this, and used your display scaling directly. Now it is away, and scales with Maya as you would expect!</p> <p>Programmers</p> <p>For the programmers out there, the trick is to query <code>maya.MQtUtil.dpiScale</code>, instead of going through native Qt, e.g. <code>QWindow.QScreen().logicalDotsPerInch() / 96.0</code> since Maya overrides this value.</p> <p></p>"},{"location":"releases/maya/2023.11.xx/#quality-of-life","title":"Quality of Life","text":""},{"location":"releases/maya/2023.11.xx/#record-translation-on-individual-markers","title":"Record Translation on Individual Markers","text":"<p>Typically, Markers are assigned to a hierarchy of controls in a character rig, and thus translation is only relevant to the root control. But when assigning to a series of objects part of, say, a brick wall then you would expect all objects to have translation recorded as well.</p> <p>That is now the case!</p>"},{"location":"sdk/download/","title":"Download","text":"Download Ragdoll Core <p>If you agree with the Ragdoll Dynamics EULA, you may select a platform below.</p> Windows Linux <p>Ragdoll 2024.05.23 awaits. Read about it -     Previous versions </p> <p>Join the community of ragdollers on Discord and/or Discourse.</p> Chat Forums Version Notes 2024.05.23 Fix for integrated Intel and AMD GPUs <p></p>"},{"location":"sdk/download/#install-on-windows","title":"Install on Windows","text":"<p>To install Ragdoll Core, double-click the <code>RagdollCore.msi</code> you downloaded from above, and click through the dialogs.</p> <p></p> <p></p>"},{"location":"sdk/download/#install-on-linux","title":"Install on Linux","text":"<p>Ragdoll core installation on Linux is basically two steps:</p> <ol> <li>Download the <code>RagdollCore*.zip</code> above</li> <li>Unpack it in your home directory, i.e. <code>/home/user-name</code>, replacing <code>user-name</code> with your username</li> </ol> <p>For example, to install current latest core:</p> <pre><code>cd ~/\nwget https://content.ragdolldynamics.com/6fb6a202-bd24-4db0-8d03-40e8c306c20c/RagdollCore-linux-2024.03.07.zip\nunzip RagdollCore-linux-2024.03.07.zip\n</code></pre> <p>If you prefer to place core libraries in elsewhere, environment variable <code>RAGDOLL_CORE_PATH</code> can be used.</p> <p>For example:</p> <pre><code>export RAGDOLL_CORE_PATH=/home/user-name/ragdolldynamics/core/2024.03.07/lib\n</code></pre>"},{"location":"sdk/home/","title":"SDK","text":"<p>The Ragdoll SDK is not Object Oriented, it is Data-Oriented in the form of an Entity Component System (ECS).</p> Concept Is A Description Entity <code>unsigned int</code> Represents a \"thing\", like a marker, group and solver Component <code>struct</code> Represents some data, like a name, position and color System <code>for-loop</code> Represents some operation on said data <p>Stay Tuned</p> <p>This is where you'll find documentation for Ragdoll Core.</p>"},{"location":"sdk/serialisation/","title":"Serialisation","text":"<p>Serialise all rigid bodies to JSON, for import into external software such as Unreal, Unity, Godot, CryEngine or any other engine able to read and parse JSON, including your own custom game engine.</p> <p>Units</p> <ul> <li>All linear units are in <code>centimeters</code></li> <li>All angular units are in <code>radians</code></li> <li>All quaternions are ordered <code>XYZW</code></li> </ul> <p></p>"},{"location":"sdk/serialisation/#overview","title":"Overview","text":"<p>On playback, Ragdoll generates a physical representation of your Maya scene, suitable for simulation. You can gain access to that representation, independent of Maya, for use in your own software and for your own purposes.</p> <p>This enables you to use Maya as an authoring environment for general-purpose physics scenes, including full or partial ragdolls, for characters or props and even full environments.</p>"},{"location":"sdk/serialisation/#target-audience","title":"Target Audience","text":"<ul> <li>Game programmers working on a custom engine</li> <li>Technical Directors working with e.g. Unreal Engine, Unity or CryEngine</li> <li>Roboticists exploring algorithms on humanoids with rigid bodies</li> <li>Scientists in Machine Learning in need of bespoke ragdolls for their work</li> </ul>"},{"location":"sdk/serialisation/#usecases","title":"Usecases","text":"<p>Once a ragdoll has been authored in Maya, it can be exported for later import into external software for a variety of purposes.</p> <ul> <li>Game Development where main or secondary characters need a physics representation</li> <li>Virtual Production where you need Motion Builder or Unreal Engine to reproduce physics happening in Maya for real-time feedback</li> <li>Robotics where you want interactive control over parameters that are also applied to a physical real-world equivalent, like Boston Dynamics's Atlas</li> <li>Reinforcement Learning where algorithm and articulation depend on each other and are iterated upon in parallel, like OpenAI's gym environments and algorithms</li> <li>Debugging in cases where odd things happen and you just require deep insight into what the solver sees</li> </ul> <p></p>"},{"location":"sdk/serialisation/#concepts","title":"Concepts","text":"<p>Ragdoll internally stores data as \"entities\" and \"components\".</p> <ul> <li>Entity is a unique identifier for any \"thing\" in the solver, like a rigid body, a constraint or force.</li> <li>Component is a set of data, like the transformation or rigid body properties, associated to an entity</li> </ul> <p>The exported format reflects this relationship and looks something like this.</p> <pre><code>{\n  \"entities\": {\n    \"10\": {\n      \"components\": {\n        \"NameComponent\": \"upperArm\",\n        \"ColorComponent\": [1.0, 0.0, 0.0],\n        \"GeometryDescriptionComponent\": \"Capsule\",\n        ...\n      }\n    },\n    \"15\": {\n      \"components\": {\n        \"NameComponent\": \"lowerArm\",\n        \"ColorComponent\": [0.0, 1.0, 0.0],\n        \"GeometryDescriptionComponent\": \"Box\",\n        ...\n      }\n  }\n}\n</code></pre> <p></p>"},{"location":"sdk/serialisation/#rigid-body","title":"Rigid Body","text":"<p>A single translation/rotation pair.</p> <p>Components</p> Component Description <code>NameComponent</code> Name and path in Maya <code>ColorComponent</code> Used in Maya viewport <code>SceneComponent</code> Reference to the scene entity this rigid belongs to <code>RestComponent</code> Initial transformation <code>RigidComponent</code> Physics attributes <code>GeometryDescriptionComponent</code> Shape attributes <pre><code>\"RigidComponent\": {\n  \"type\": \"RigidComponent\",\n  \"members\": {\n    \"enabled\": true,\n    \"mass\": 1.0,\n    \"friction\": 0.80,\n    \"restitution\": 0.10,\n    \"thickness\": 0.0,\n    \"disableGravity\": false,\n    \"collide\": true,\n    \"kinematic\": false,\n    \"dynamic\": true,\n    \"sleeping\": false,\n    \"linearDamping\": 0.5,\n    \"angularDamping\": 1.0,\n    \"positionIterations\": 8,\n    \"velocityIterations\": 1,\n    \"maxContactImpulse\": -1.0,\n    \"maxDepenetrationVelocity\": -1.0,\n    \"sleepThreshold\": 0.00,\n    \"enableCCD\": false,\n\n    # A value of -1 means \"automatically computed\"\n    \"angularMass\": {\n      \"type\": \"Vector3\",\n      \"values\": [-1.0, -1.0, -1.0]\n    },\n\n    # A value of 0 means \"automatically computed\"\n    \"centerOfMass\": {\n      \"type\": \"Vector3\",\n      \"values\": [0.0, 0.0, 0.0]\n    }\n  }\n}\n</code></pre>"},{"location":"sdk/serialisation/#shape","title":"Shape","text":"<p>Every rigid has exactly one collision shape. The transformation of this shape can be optionally offset, and that offset happens in the frame of the rigid.</p> <pre><code>    ________\n ^ |\\       \\\n | | \\_______\\\n | |  |      |\n o--\\-|-&gt;    |\n  \\  \\|______|\n   \\\n    v\n</code></pre> <p>In this example, the center of the box is offset from the center of the rigid along the X axis. Notice how the geometry is relative the axis of the rigid, so rotating the rigid along the Z axis would naturally take the geometry with it.</p> <pre><code>\"GeometryDescriptionComponent\": {\n  \"type\": \"GeometryDescriptionComponent\",\n  \"members\": {\n    \"type\": \"Capsule\",\n\n    # Used by Capsule\n    \"length\": 0.123,\n\n    # Used by Sphere\n    \"radius\": 0.012,\n\n    # Used by Box\n    \"extents\": {\n      \"type\": \"Vector3\",\n      \"values\": [0.123, 0.024, 0.0247]\n    },\n\n    # Translation relative the associated rigid\n    \"offset\": {\n      \"type\": \"Vector3\",\n      \"values\": [0.033, -0.05, 0.00]\n    },\n\n    # Rotation relative the associated rigid\n    # Ordered as XYZW\n    \"rotation\": {\n      \"type\": \"Quaternion\",\n      \"values\": [0.87, -0.47, 0.00, 0.00]\n    }\n  }\n}\n</code></pre> <p></p>"},{"location":"sdk/serialisation/#constraint","title":"Constraint","text":"<p>A relationship between two rigid bodies is referred to as a \"constraint\". A constraint constrains the way two rigid bodies move relative each other.</p> <p>For example, the position of the lower arm is typically associated with the tip of the upper arm. Wherever the upper arm goes, the lower arm must follow. It may also be further limited in how it is oriented, to e.g. prevent a lower arm from bending past the natural elbow limit; i.e. to rotate between 20-180 degrees along the Z axis, and 0-10 degrees around the X and Y axis (as that rotation would normally come from twisting the upper arm).</p> <ul> <li>All constraints are bi-directional</li> <li>Rigid A attaches to B, as B attaches to A</li> <li>The point on A where B attaches is referred to as the <code>parentFrame</code></li> <li>The point on B where A attaches is referred to as the <code>childFrame</code></li> </ul> <p>Despite the name, there is no notion of hierarchy or \"parent\" in Ragdoll; the naming reflects the hierarchy as represented in Maya, where constraints are parented to the rigid representing the <code>childFrame</code>.</p> <p>Components</p> Component Description <code>JointComponent</code> References to associated rigids and frame matrices <code>LimitComponent</code> Optional limits on translation and/or rotation <code>DriveComponent</code> Optional target transformation, i.e. the animation <pre><code>\"JointComponent\": {\n  \"type\": \"JointComponent\",\n  \"members\": {\n\n    # Reference to the associated rigid body entities\n    \"parent\": 1048586,\n    \"child\": 1048584,\n\n    # The translate/rotate of the parent\n    # rigid in the frame of child rigid\n    \"parentFrame\": {\n      \"type\": \"Matrix44\",\n      \"values\": [\n        0.760, -0.594, -0.259, 0.0,\n        -0.648, -0.680, -0.340, 0.0,\n        0.0262, 0.4274, -0.903, 0.0,\n        10.51, -0.646, 0.0, 1.0\n      ]\n    },\n\n    # The translate/rotate of the child\n    # rigid in the frame of parent rigid\n    \"childFrame\": {\n      \"type\": \"Matrix44\",\n      \"values\": [\n        0.606, -0.751, -0.259, 0.0,\n        -0.785, -0.515, -0.340, 0.0,\n        0.122, 0.4103, -0.903, 0.0,\n        0.0, 0.0, 0.0, 1.0\n      ]\n    },\n\n    # Allow intersections between connected rigids\n    \"disableCollision\": true\n  }\n}\n</code></pre> <p></p>"},{"location":"sdk/serialisation/#limit","title":"Limit","text":"<p>Constraints may optionally have a \"limit\", which means it can keep a rigid within a given angle (\"angular limit\") or position (\"linear limit\").</p> <p>Min &amp; Max</p> <p>Values represent a upper end of a range. With <code>x=5</code> the minimum value of the linear X axis is <code>-5</code>.</p> <pre><code>\"LimitComponent\": {\n  \"type\": \"LimitComponent\",\n  \"members\": {\n    \"enabled\": true,\n    \"x\": -1.0,           # Linear limit along the X-axis\n    \"y\": -1.0,\n    \"z\": -1.0,\n    \"twist\": 0.78,       # Angular limit along the X-axis\n    \"swing1\": 0.78,      # ..Y\n    \"swing2\": 0.78,      # ..Z\n    \"angularStiffness\": 1000000.0,\n    \"angularDamping\": 10000.0,\n    \"linearStiffness\": 1000000.0,\n    \"linearDamping\": 10000.0\n  }\n}\n</code></pre> <p>Locked, Free or Limited</p> <p>A value of <code>-1</code> means the axis is \"Locked\", i.e. the value along this axis cannot change. A Point Constraint is typically locked on all linear axes, but free on the angular axes. A value of <code>0</code> means the axis if \"Free\", meaning it has no effect. It is \"limitless\". A value above <code>0</code> indicates the range of a given limit.</p> <ul> <li><code>&lt;0</code> means Locked</li> <li><code>=0</code> means Free</li> <li><code>&gt;0</code> means Limited</li> </ul> <p></p>"},{"location":"sdk/serialisation/#drive","title":"Drive","text":"<p>A constraint may optionally have a \"drive\", which means having one rigid reach a <code>target</code> position and/or angle relative another rigid. The typical use case is having simulation match your input animation, where the animation provides the positions and angles.</p> <pre><code>\"DriveComponent\": {\n  \"type\": \"DriveComponent\",\n  \"members\": {\n    \"enabled\": true,\n    \"linearStiffness\": 0.0,\n    \"linearDamping\": 0.0,\n    \"angularStiffness\": 10000.0,\n    \"angularDamping\": 1000.0,\n    \"acceleration\": true,\n    \"target\": {\n      \"type\": \"Matrix44\",\n      \"values\": [\n        0.973, 0.2267, 0.0, 0.0,\n        -0.226, 0.973, 0.0, 0.0,\n        0.0, 0.0, 0.999, 0.0,\n        0.1051, -0.006, 0.0, 1.0\n      ]\n    }\n  }\n}\n</code></pre> <p></p>"},{"location":"sdk/serialisation/#data-types","title":"Data Types","text":"<p>In addition to the plain-old-data types <code>int</code>, <code>double</code> and <code>bool</code>, these are all possible data types found in the exported JSON.</p> <pre><code>{\n  \"type\": \"Color4\",\n  \"values\": [\n    0.4429999887943268,  # red\n    0.7049999833106995,  # green\n    0.9520000219345093   # blue\n    1.0                  # alpha\n  ]\n}\n\n{\n  \"type\": \"Vector3\",\n  \"values\": [\n    100.00001788139201,  # x\n    100.00001788139201,  # y\n    100.00000000000003   # z\n  ]\n}\n\n{\n  \"type\": \"Quaternion\",\n  \"values\": [\n    0.8791841887437938,     # x\n    -0.47648206919348187,   # y\n    -2.7953360940182678e-8, # z\n    1.191501461145112e-7    # w\n  ]\n}\n\n{\n  # Unscaled, unsheared matrix\n  \"type\": \"Matrix44\",\n  \"values\": [\n    1.0, # rotation matrix\n    0.0, # rotation matrix\n    0.0, # rotation matrix\n    0.0,\n    0.0, # rotation matrix\n    1.0, # rotation matrix\n    0.0, # rotation matrix\n    0.0,\n    0.0, # rotation matrix\n    0.0, # rotation matrix\n    1.0, # rotation matrix\n    0.0,\n    0.0, # translateX\n    0.0, # translateY\n    0.0, # translateZ\n    1.0\n  ]\n}\n</code></pre> <p></p>"},{"location":"sdk/serialisation/#reference","title":"Reference","text":""},{"location":"sdk/serialisation/#components","title":"Components","text":"<p>These are all possible types of components found in the exported JSON.</p> <ul> <li><code>SolverComponent</code></li> <li><code>SceneComponent</code></li> <li><code>NameComponent</code></li> <li><code>ColorComponent</code></li> <li><code>RestComponent</code></li> <li><code>ScaleComponent</code></li> <li><code>RigidComponent</code></li> <li><code>GeometryDescriptionComponent</code></li> <li><code>JointComponent</code></li> <li><code>DriveComponent</code></li> <li><code>LimitComponent</code></li> <li><code>ConstraintUIComponent</code></li> <li><code>RigidUIComponent</code></li> <li><code>DriveUIComponent</code></li> <li><code>LimitUIComponent</code></li> </ul> <p></p>"},{"location":"sdk/serialisation/#output-example","title":"Output Example","text":"<p>Here's an example of what a complete dump looks like.</p> <ul> <li>Ragdoll Dump Output Example</li> </ul> <p></p> <p></p>"},{"location":"sdk/serialisation/#code-example","title":"Code Example","text":"<p>Test your dump, by re-building the scene in Maya.</p> <p></p> <pre><code>from maya import cmds\nfrom ragdoll.vendor import cmdx\n\n\nclass Component(dict):\n    \"\"\"Simplified access to component members\"\"\"\n    def __getattr__(self, key):\n        value = self[\"members\"][key]\n\n        if not isinstance(value, dict):\n            return value\n\n        if value[\"type\"] == \"Vector3\":\n            return cmdx.Vector(value[\"values\"])\n\n        elif value[\"type\"] == \"Color4\":\n            return cmdx.Color(value[\"values\"])\n\n        elif value[\"type\"] == \"Matrix44\":\n            return cmdx.Matrix4(value[\"values\"])\n\n        elif value[\"type\"] == \"Quaternion\":\n            return cmdx.Quaternion(*value[\"values\"])\n\n        else:\n            raise TypeError(\"Unsupported type: %s\" % value)\n\n\ndef dedump(dump):\n    with cmdx.DagModifier() as mod:\n        root = mod.createNode(\"transform\", name=\"dump\")\n\n    for entity, data in dump[\"entities\"].items():\n        comps = data[\"components\"]\n\n        if \"RigidComponent\" not in comps:\n            continue\n\n        name = Component(comps[\"NameComponent\"])\n\n        if not name.path:\n            # Bad export\n            continue\n\n        joint = name.path.rsplit(\"|\", 3)[-2]\n\n        scale = Component(comps[\"ScaleComponent\"])\n        rest = Component(comps[\"RestComponent\"])\n        desc = Component(comps[\"GeometryDescriptionComponent\"])\n\n        # Establish rigid transformation\n        tm = cmdx.TransformationMatrix(rest.matrix)\n\n        # Establish shape\n        if desc.type in (\"Cylinder\", \"Capsule\"):\n            radius = desc.radius * scale.absolute.x\n            length = desc.length * scale.absolute.y\n            geo, _ = cmds.polyCylinder(axis=(1, 0, 0),\n                                       radius=radius,\n                                       height=length,\n                                       roundCap=True,\n                                       subdivisionsCaps=5)\n\n        elif desc.type == \"Box\":\n            extents = desc.extents\n            extents.x *= scale.absolute.x\n            extents.y *= scale.absolute.y\n            extents.z *= scale.absolute.z\n            geo, _ = cmds.polyCube(width=extents.x,\n                                   height=extents.y,\n                                   depth=extents.z)\n\n        elif desc.type == \"Sphere\":\n            radius = desc.radius * scale.absolute.x\n            geo, _ = cmds.polySphere(radius=radius)\n\n        else:\n            print(\"Unsupported shape type: %s.type=%s\" % (name.path, desc.type))\n            continue\n\n        with cmdx.DagModifier() as mod:\n            transform = mod.createNode(\"transform\", name=joint, parent=root)\n            transform[\"translate\"] = tm.translation()\n            transform[\"rotate\"] = tm.rotation()\n\n        # Establish shape transformation\n        offset = desc.offset\n        offset.x *= scale.absolute.x\n        offset.y *= scale.absolute.y\n        offset.z *= scale.absolute.z\n\n        geo = cmdx.encode(geo)\n        geo[\"translate\"] = offset\n        geo[\"rotate\"] = desc.rotation\n\n        transform.addChild(geo)\n\n\n# Usage Example\nimport json\ndump = cmds.ragdollDump()\ndump = json.loads(dump)\ndedump(dump)\n</code></pre> <p></p>"},{"location":"sdk/serialisation/#more-examples","title":"More Examples","text":""},{"location":"sdk/serialisation/#tiger","title":"Tiger","text":"<p>Courtesy of www.cgspectrum.com</p> <ul> <li><code>mytiger.rag</code></li> </ul> <p></p>"},{"location":"sdk/serialisation/#ragcar","title":"Ragcar","text":"<p>Model from https://mecabricks.com</p> <ul> <li><code>ragcar.rag</code></li> </ul> <p></p>"},{"location":"sdk/serialisation/#advanced-skeleton","title":"Advanced Skeleton","text":"<p>A generic human character, rigged with AS.</p> <ul> <li><code>mycharacter.rag</code></li> </ul> <p></p>"},{"location":"tutorials/20240308_bombsaway/","title":"20240308 bombsaway","text":"<p>Jason worked on this shot of bombs falling from an airplane.</p> <p>https://youtu.be/98Ys1aI9a_Y?t=56</p>"},{"location":"tutorials/20240308_rebelmoon/","title":"20240308 rebelmoon","text":"<p>One or more shots in Rebel Moon used Ragdoll. Ask Jason.</p>"},{"location":"tutorials/20240309_houseofdragon/","title":"20240309 houseofdragon","text":"<p>Something about a dragon eating bits. Ask Jason.</p>"},{"location":"tutorials/20240310_avatarii/","title":"20240310 avatarii","text":"<p>It was used on Avatar II, but where? Ask Jason.</p>"},{"location":"tutorials/20240311_buffalokids/","title":"20240311 buffalokids","text":"<p>Was used here:</p> <ul> <li>https://www.imdb.com/title/tt26530493/?language=es-es</li> </ul> <p>It 's scheduled to be released in August the 30<sup>th</sup>. We used Ragdoll in the movie to create secondaries animations, specially for movement of Dress, hairs, etc. This way this kind of secondary animations don't depend on every animator as we give the same style with Ragdoll.</p>"},{"location":"tutorials/bouncing_ball/","title":"Bouncing Ball","text":""},{"location":"tutorials/bouncing_ball/#bouncing-ball","title":"Bouncing Ball","text":"<p>The fundamentals of animation</p> <p>In this tutorial, we will reproduce a classic animation tutorial, the Bouncing Ball. With it, we will explore various material properties of a ball whilst learning about the inner workings of Ragdoll.</p> <p>Version 1.0 - Up to date</p> <p>Written for Ragdoll <code>2022.05.04</code> and above.</p> <p>Estimated Time</p> <ul> <li>\ud83d\udd50 5 minutes</li> </ul> <p>You will learn</p> <ul> <li>\u2714\ufe0f How to assign a \"marker\" onto a <code>polySphere</code></li> <li>\u2714\ufe0f How to tune physical properties such as bounciness and friction</li> <li>\u2714\ufe0f How to configure the solver for accurate high-frequency motion</li> </ul> <p>Where to find help</p> <p>If you find or run into any issues with these tutorials, here's what you can do.</p> <ul> <li>\u2714\ufe0f Ask on the forums</li> </ul> Download Final Scene <p></p>"},{"location":"tutorials/bouncing_ball/#motivation","title":"Motivation","text":"<p>Why should an animator simulate a ball bouncing, rather than just keyframe it?</p> <p>If you are new to animation or in a neighbouring field such as modeling or lighting, it might seem silly to consider such a trivial task for simulation. But as the more seasoned animator knows, getting the trajectory of any free-flying object right is incredibly hard. It can mean the difference between a believable character, and a character that looks like Earths gravity varies for the duration of a single jump, or one that appears to be on a different planet altogether.</p> <p>With that in mind, although a single ball bouncing on a flat plane may seem trivial, it can be enough to challenge even the most senior of animators.</p> <p></p>"},{"location":"tutorials/bouncing_ball/#setup","title":"Setup","text":"<p>For this tutorial, all you need is an empty Maya scene. So go ahead and clear out all of those references and meshes with hours of history on it and let's get crackin'!</p> <p></p>"},{"location":"tutorials/bouncing_ball/#poly-sphere","title":"Poly Sphere","text":"<p>Let's make our ball out of a regular Maya <code>polySphere</code>.</p> <ol> <li>Run <code>Sphere</code> from the <code>Polygon Primitives</code> submenu of the <code>Create</code> main menu</li> <li>Translate the sphere to <code>Translate Y = 5.0</code></li> </ol> What about NURBS? <p>Yes, if you prefer, you can also use a NURBS sphere.</p> <p></p> <p></p>"},{"location":"tutorials/bouncing_ball/#dynamics","title":"Dynamics","text":"<p>With our sphere in place, let's give it some physical properties by turning it into a <code>Active Rigid</code>.</p> <ol> <li>Select <code>pSphere1</code></li> <li>Run <code>Assign Marker</code> from the <code>Ragdoll</code> Menu</li> </ol> <p></p> <p>That's great! Except hm.. It's not really a bouncing ball just yet.</p> <p></p>"},{"location":"tutorials/bouncing_ball/#bounciness","title":"Bounciness","text":"<p>Default settings make the ball rather dull, so let's try introducing some bounciness via its material properties.</p> <ol> <li>Select <code>pSphere1</code></li> <li>Select <code>rMarker_pSphere1</code> in the Channel Box</li> <li>Set <code>Bounciness = 1.0</code></li> </ol> What does 1.0 mean? <p>It means 100%! Technically, it means any force produced by the ball hitting the ground is reversed in its entirety with no loss of energy what-so-ever.</p> <p></p> <p></p>"},{"location":"tutorials/bouncing_ball/#infinite-bounciness","title":"Infinite Bounciness","text":"<p>The reason the ball stops bouncing is that even though our ball is 100% bouncy, the ground is not. Like dropping a bowling ball on grass or a wooden floor. For perfect bounce, they both need to be 100% bouncy.</p> <ol> <li>Select <code>rGround</code></li> <li>Select <code>rMarker_rGround</code> in the Channel Box</li> <li>Set <code>Bounciness = 1.0</code></li> </ol> Where did the ground come from? <p>Ragdoll creates this ground automatically for you whenever the first marker is assigned. It can be disabled by setting <code>Create Ground = Off</code> in the <code>Assign Marker</code> option dialog.</p> <p></p> <p></p>"},{"location":"tutorials/bouncing_ball/#finalise","title":"Finalise","text":"<p>Now that we have complete control over our ball, let's put it to good use.</p> <p>You have learnt</p> <ul> <li>\u2714\ufe0f How to assign a \"marker\" onto a <code>polySphere</code></li> <li>\u2714\ufe0f How to tune physical properties such as bounciness and friction</li> <li>\u2714\ufe0f How to configure the solver for accurate high-frequency motion</li> </ul> <p></p>"},{"location":"tutorials/bouncing_ball/#initial-velocity","title":"Initial Velocity","text":"<p>Give the ball a little push.</p> <ol> <li>Select <code>pSphere1</code></li> <li>Animate it moving forward beteween frame 1-2</li> <li>Animate <code>Behaviour</code> from <code>Animated</code> to <code>Simulated</code></li> </ol> Frames 2 3 <code>Translate X</code> <code>0.0</code> <code>0.5</code> <code>Behaviour</code> <code>Animated</code> <code>Simulated</code> <p></p> <p></p>"},{"location":"tutorials/bouncing_ball/#trajectory","title":"Trajectory","text":"<p>With our bouncing ball underway, let's gain a deeper understanding of what it looks like over time.</p> <ol> <li>Run <code>Record Simulation</code> from the Ragdoll menu</li> <li>Select <code>pSphere1</code></li> <li>Run <code>Create Editable Motion Trail</code> from Maya's Visualize menu</li> </ol> <p></p> <p>Now, as every animator knows, this is not the trajectory of a bouncing ball. It looks as if the ball isn't actually touching the floor half the time, what's up with that? \ud83e\udd14</p> Expected Result\u2714\ufe0f Actual Result\u274c <p>This is a problem of resolution. Cameras have this problem too.</p> <p></p> <p>See how despite this most definitely not being a simulation (or is it?) we are still getting bounces that don't actually touch the ground! The reason is simply that a camera can only capture moments of reality. It can only sample it.</p> <p>In this case, the ball did touch the floor, but the camera caught at a slightly different time. Shortly before and after contact. This is how you can think of Ragdoll too; a camera for physics.</p> Can you overeducate me? <p>With pleasure. \ud83d\ude01 Let's look at audio.</p> <p></p> <ul> <li>Wikipedia Reference</li> </ul> <p>Notice how sound itself, represented by the curved line, is continuous - of infinite resolution - and that what we capture in our computers are samples of it, at some fixed resolution - typically at 44,000 fps or as it is more commonly known <code>44khz</code>.</p> <p>Ragdoll works like this too. Physics is continuous, but Ragdoll can only provide you with snapshots of physics at a fixed resolution; the resolution of your framerate.</p> Is every bouncing ball tutorial on YouTube wrong? <p>A typical bouncing ball tutorial has the ball come into contact on whole frames. But because the time between each bounce is decreasing, it is impossible for every bounce to land on a whole frame.</p> <p>So in a way, yes, they are wrong! Science says so!</p> Should I change the way I animate? <p>Well, it depends. Take motion blur for example.</p> <p>Because you see, the final position from a video recorded tennis ball is only half the story. Motion blur isn't the result of only these samples, but of the actual continuous motion. As light hits the lens inbetween the shutter opening and closing, the ball is still moving.</p> <p>To accurately reproduce this effect in your animation or with Ragdoll, you still need those inbetween positions of the ball. Just so that your renderer can throw those away once it's done computing motion blur.</p> <p>Even without motion blur, your eyes and brain still interprets the ball not hitting the ground as though it floats or hits an invisible obstacle. So for the greatest sense of realism when everything has been said and done and the images actually reach your eyes (brain), you may still want to defy physics and realism.</p> <p>Because at the end of the day, the animation curves isn't what you are making. They are mere tools for you to achieve realism in the final output picture.</p> <p></p>"},{"location":"tutorials/bouncing_ball/#tennis-ball","title":"Tennis Ball","text":"<p>Now that we've got some reference for a tennis ball, let's tune our settings to match.</p> <ol> <li>Select <code>pSphere1</code></li> <li>Select <code>rMarker_pSphere1</code> in the Channel Box</li> <li>Set <code>Bounciness = 0.4</code></li> </ol> <p>Let's also take it out of orbit and into Earths atmosphere by restoring the <code>Air Density</code></p> <ol> <li>Select <code>rSolver</code></li> <li>Set <code>Air Density = 1.0</code></li> </ol> <p></p> <p></p>"},{"location":"tutorials/bouncing_ball/#practical-examples","title":"Practical Examples","text":"<p>Now that we've got a ball, what could we possibly do with it?</p> <p></p>"},{"location":"tutorials/bouncing_ball/#soft-bounce","title":"Soft Bounce","text":"<p>Notice our trajectory now has a smooth transition from being in contact to lifting off the ground.</p> <p>By playing around with the density, we can get different effects.</p> <p></p> <p>Or playing around with this invisible collision sphere we've created.</p> <p></p> <p>So what's going on here?</p> <ol> <li>Create a new sphere, <code>pSphere2</code></li> <li>Parent <code>pSphere2</code> under <code>pSphere1</code></li> </ol> <p></p> <p>Next, let's assign to <code>pSphere2</code> with <code>pSphere1</code> as its parent.</p> <ol> <li>Select <code>pSphere1</code> and <code>pSphere2</code></li> <li>Run <code>Assign and Connect</code></li> </ol> <p></p> <p>Not much happens, they both move together. Let's change that.</p> <ol> <li>Select <code>pSphere2</code></li> <li>Set <code>Translate Motion = Soft</code></li> <li>Select <code>pSphere1</code></li> <li>Set <code>Collide = Off</code></li> </ol> <p>I found values of <code>Translate Stiffness = 0.1</code> and <code>Translate Damping = 0.1</code> to look decent.</p> <p></p> <p>And that does it! This same technique can be used on full ragdolls too to achieve all manner of soft contacts, have fun. </p> <p></p>"},{"location":"tutorials/bouncing_ball/#troubleshooting","title":"Troubleshooting","text":"<p>Let's have a look at some common issues.</p> <p></p>"},{"location":"tutorials/bouncing_ball/#vibrating-at-rest","title":"Vibrating at Rest","text":"<p>There is no right value for <code>Bounce Threshold</code>, it's an art. And it depends on the size of your scene and rigids, their shape, how fast they move and the look you are after.</p> <p>When the threshold is too low, Ragdoll can get into an infinite bounce like this.</p> <p></p> <p>To address this, increase the threshold until it stops.</p> <p></p>"},{"location":"tutorials/cloth_emulation/","title":"Cloth Emulation","text":""},{"location":"tutorials/cloth_emulation/#cloth-emulation","title":"Cloth Emulation","text":"<p>In this tutorial, we'll use many interconnected Markers to emulate cloth.</p> <p>Version 1.0 - Up to date</p> <p>Written for Ragdoll <code>2022.03.14</code> and above.</p> <p>Estimated Time</p> <ul> <li>\ud83d\udd50 20 minutes</li> </ul> <p>You will need</p> <ul> <li>\u2714\ufe0f Nothing, assets are provided</li> </ul> <p>You will learn</p> <ul> <li>\u2714\ufe0f How to create a grid of connected Markers</li> <li>\u2714\ufe0f How to tune this grid to look like cloth</li> </ul> <p>Where to find help</p> <p>If you find or run into any issues with these tutorials, here's what you can do.</p> <ul> <li>\u2714\ufe0f Ask in the chat</li> <li>\u2714\ufe0f Ask on the forums</li> </ul> <p></p>"},{"location":"tutorials/cloth_emulation/#videos","title":"Videos","text":"<p>See here for part 1 of 1 this tutorial.</p> <ul> <li>Introduction</li> <li>First Draft</li> <li>Final Version</li> <li>Walkthrough</li> </ul> <p></p>"},{"location":"tutorials/cloth_emulation/#next-steps","title":"Next Steps","text":"<p>This has been a tutorial on how to emulate - not simulate - cloth. Because Ragdoll currently does not understand deformations. It only understands hard objects.</p> <p>So, how else can you make hard objects appear like cloth? Share your experiences with the community!</p> <ul> <li>Forums</li> </ul>"},{"location":"tutorials/manikin/","title":"Manikin I","text":""},{"location":"tutorials/manikin/#manikin","title":"Manikin","text":"<p>\"Make your own motion reference\"</p> <p>In this tutorial, we will setup a human-like character for use as reference or constraint target to your rig. You will be able to pose and position this Manikin like you would a real Manikin, and drop it from various heights and onto various obstacles to produce realistic poses as it falls.</p> <p>Something the animator can import and throw around for reference on how it would look like.</p> <p>Version 1.2 - Up to date</p> <p>Written for Ragdoll <code>2023.08.01</code> and above.</p> <p>Estimated Time</p> <ul> <li>\ud83d\udd50 10 minutes</li> </ul> <p>You will learn</p> <ul> <li>\u2714\ufe0f How to apply markers onto rig controls</li> <li>\u2714\ufe0f How to tune the collision shapes of the markers</li> <li>\u2714\ufe0f How to record your simulation back onto the rig controls</li> </ul> <p>Where to find help</p> <p>If you find or run into any issues with this tutorials, here's what you can do.</p> <ul> <li>\u2714\ufe0f Ask in the chat</li> <li>\u2714\ufe0f Ask on the forums</li> </ul> Spelling <p>There are two ways to spell \"Manikin\", this tutorial is based on this term here.</p> <ul> <li>https://www.healthysimulation.com/Manikin/</li> </ul> <p></p>"},{"location":"tutorials/manikin/#bring-your-own-rig","title":"Bring Your Own Rig","text":"<p>Follow this tutorial either using our provided Manikin rig, or your own character. It can have any number of limbs.</p> <p></p> Download Manikin Download Final Scene <p></p>"},{"location":"tutorials/manikin/#motivation","title":"Motivation","text":"<p>Why should we even bother simulating a character?</p> <p>Finding motion reference is one of the most important activities for any animator. And yet I can safely challenge you to find reference for perhaps the most common motion in all blockbuster movies today, something that is either impossible or dangerous for actors or animators alike.</p> <p></p> <p>Or how about reference of someone simply falling over, perhaps from heat stroke or staring into the sun.</p> <p>This is, after all, one of the major reasons for pursuing computer graphics in storytelling rather than real people.</p> <p>Animators bring life to characters, but of equal challenge is that of lifelessness. Of natural and realistic motion without someone behind the wheel. Be it getting hit or shot, blasted or thrown, animating lifelessness is enough to challenge even the most senior of animators.</p> <p>As you will find, there is a lot more we can do once our motion reference is in 3D, on our actual character rig within Maya and infinitely customisable. As opposed to some video on the internet.</p> <p></p>"},{"location":"tutorials/manikin/#setup","title":"Setup","text":"<p>Create a new reference of your chosen character rig or download this Manikin rig to get started.</p> <p></p> <p>Play around with the controls to get a feel for what we're working with. This character is entirely FK which will make simulating it straightforward.</p> <p></p> <p></p>"},{"location":"tutorials/manikin/#simulation","title":"Simulation","text":"<p>The stage is set, now let's apply physics!</p> <p></p>"},{"location":"tutorials/manikin/#torso","title":"Torso","text":"<p>Let's start with the Torso.</p> <ol> <li>Select <code>hip_ctl</code></li> <li>Shift select <code>torso_ctl</code></li> <li>Shift select <code>head_ctl</code></li> <li>Run <code>Assign and Connect</code></li> </ol> <p>This will produce our first <code>Group</code>, which is a collection of connected <code>Markers</code>.</p> <p>New Concept</p> <p>Group</p> <p>The <code>rdGroup</code> node contains attributes that affect all contained markers. It's where you'd edit the overall look and feel of your character, like how stiff it should be and whether or not body parts should collide with each other.</p> <p>Each Marker can either inherit or otherwise override these values.</p> <p></p> <p></p>"},{"location":"tutorials/manikin/#left-arm","title":"Left Arm","text":"<p>Next we will continue from the <code>torso_ctl</code> and out into the arms.</p> <ol> <li>Select the <code>torso_ctl</code></li> <li>Shift select <code>L_clavicle_ctl</code></li> <li>Shift select <code>L_upperArm_ctl</code></li> <li>Shift select <code>L_lowerArm_ctl</code></li> <li>Shift select <code>L_hand_ctl</code></li> <li>Run <code>Assign and Connect</code></li> </ol> Is the order important? <p>Yes, the order in which you select will determine how the markers are connected.</p> <p>Your first selection is extra important, as it determines whether to start a new group, like for the <code>hip_ctl</code>, or to add to an existing group, like the <code>torso_ctl</code>.</p> <p>In this case, we would very much like our arm to be connected to the torso.</p> Can I skip the clavicles? <p>Yes, if you have extra controls - such as <code>twist</code> or <code>bend</code> - you can skip these if you don't care to simulate them.</p> <p>Simply skip over them as you select, from <code>torso_ctl</code> directly to <code>L_upperarm_ctl</code>.</p> <p></p> <p></p>"},{"location":"tutorials/manikin/#right-arm","title":"Right Arm","text":"<p>Now repeat the above process for the other arm.</p> <p></p> <p></p>"},{"location":"tutorials/manikin/#legs","title":"Legs","text":"<p>Now let's continue down the hips and into the legs.</p> <ol> <li>Select the <code>hip_ctl</code></li> <li>Shift select <code>L_thigh_ctl</code></li> <li>Shift select <code>L_knee_ctl</code></li> <li>Shift select <code>L_foot_ctl</code></li> <li>Run <code>Assign and Connect</code></li> </ol> <p>We will address those long feet shortly. \ud83d\udc43</p> <p></p> <p></p>"},{"location":"tutorials/manikin/#drop-test","title":"Drop Test","text":"<p>That's enough setup, let's drop him!</p> <p>New Concept</p> <p>Behaviour</p> <p>Each Marker has a \"behaviour\", which tells Ragdoll it should interpret the control it has been assigned. Should it fall with gravity? Should it try and match the pose? Should it remain fully animated, even in simulation?</p> <ol> <li>Select <code>hip_ctl</code></li> <li>Set <code>Behaviour = Simulated</code></li> <li>Drop the Manikin a few times</li> </ol> <p></p> <p>The default behaviour for <code>Assign and Connect</code> is to give the first selection - the \"root\" - a <code>Animated</code> behaviour.</p> <p>What does Animated mean?</p> <p>Animated means \"copy the animation into simulation and make no changes to it\"</p> <p>By instead setting this to <code>Simulated</code>, then Ragdoll will only use the animation for the starting position and orientation of the simulation.</p> <p>Inherit</p> <p>Alternatively, you can set it to <code>Inherit</code> to have it inherit the value of the <code>rGroup</code> node that was created for the whole character.</p> <p></p>"},{"location":"tutorials/manikin/#tuning","title":"Tuning","text":"<p>Next let's address the elephant in the room; the shapes. They look awful.</p> <p></p> <p></p>"},{"location":"tutorials/manikin/#volumes","title":"Volumes","text":"<p>The shape of each collider affects your simulation in 2 ways.</p> <ul> <li>Contact Points</li> <li>Rotation Mass</li> </ul> <p>The contact point can be important if your character interacts with an environment or another character. Like in this case where the feet are incorrectly colliding with the ground because of a bad shape.</p> <p></p> <p>That's not always the case though, sometimes you just want overlapping motion without contacts in which case the shapes won't matter.</p> <p>They do however also affect their resistance to rotation. Consider this.</p> <p></p> <p>Here, we rotate the exact same shapes, the exact same amount in the exact same amount of time. And yet they respond differently.</p> <p>This shape has vastly different dimensions in the X, Y and Z directions, resulting in a different rotation mass for each one. As a result, the effort required to rotate it in each axis differs too.</p> <p>In practice, you'll find this for just about any limb on a character, which is typically longer in one axis. For our Manikin, this is especially true for the default clavicle shapes.</p> <p>Override Rotate Mass</p> <p>In some cases, you have a shape but want it to act like a different shape. <code>Rotate Mass</code> is very similar to normal <code>Mass</code>, except in 3 dimensions. Where the position of an object is affected equal in X, Y and Z directions, rotations have 3 separate masses.</p> <p></p>"},{"location":"tutorials/manikin/#shapes","title":"Shapes","text":"<p>With this in mind, let's tune some shapes.</p> <ol> <li>Run <code>Manipulator</code> from the <code>Ragdoll</code> menu</li> </ol> <p>Alternatively</p> <p>Select a <code>rMarker</code> node in the Channel Box, or the <code>rGroup</code> node in your Outliner, and hit the <code>T</code> key on your keyboard. You can also select the shape of the <code>rSolver</code> node.</p> <p>This brings up the Manipulator interface, where you can manipulate shapes using mouse gestures.</p> <p></p> <p>Great, now let's turn those hands and feet into boxes.</p> <p></p> <p>Translate, Rotate and Scale</p> <p>Notice I'm using the..</p> <ul> <li>Middle-Mouse Button to <code>Translate</code></li> <li>CTRL + Middle-Mouse Button to <code>Rotate</code></li> <li>CTRL + Left-Mouse Button to <code>Scale</code></li> </ul> <p>The help text screen-right will help you remember these.</p> <p>Greater Value Step</p> <p>While dragging the value on Manipulator UI panel, you may hold <code>Shift</code> to increase value changing step.</p> <p>Symmetry</p> <p>Also notice the edits are symmetrical; even when they don't start out that way like the feet!</p> <p></p>"},{"location":"tutorials/manikin/#recording","title":"Recording","text":"<p>That's all there is for setting up your character rig for simulation! Let's now transfer the simulation back onto the rig.</p> <ol> <li>Run <code>Record Simulation</code></li> <li>Enjoy</li> </ol> <p></p>"},{"location":"tutorials/manikin/#start-again","title":"Start Again","text":"<p>The recorded simulation ends up on an Animation Layer, and is also Cached. To start over, delete this layer and disable the cache.</p> <p></p> <p></p>"},{"location":"tutorials/manikin/#next-steps","title":"Next Steps","text":"<p>In the next tutorial, we'll take this a bit further. As you play around with the <code>Rotate Stiffness</code> on either the <code>rGroup</code> or individual <code>rMarker</code> nodes, you'll find some limbs start to misbehave. Especially the knees and elbows, that normally won't allow rotations past a certain angle in a real human (or Manikin for that matter!).</p> <p>That isn't the case here, because we've left out a critical part of any ragdoll - \"limits\".</p> <ul> <li>Full Ragdoll</li> </ul> <p>See you there!</p>"},{"location":"tutorials/manikin_blender/","title":"Blender Manikin I","text":""},{"location":"tutorials/manikin_blender/#manikin","title":"Manikin","text":"<p>\"Make your own motion reference\"</p> <p>In this tutorial, we will setup a human-like character for use as reference or constraint target to your rig. You will be able to pose and position this Manikin like you would a real Manikin, and drop it from various heights and onto various obstacles to produce realistic poses as it falls.</p> <p>Something the animator can import and throw around for reference on how it would look like.</p> <p>Estimated Time</p> <ul> <li>\ud83d\udd50 10 minutes</li> </ul> <p>You will learn</p> <ul> <li>\u2714\ufe0f How to apply markers onto rig controls</li> <li>\u2714\ufe0f How to tune the collision shapes of the markers</li> <li>\u2714\ufe0f How to record your simulation back onto the rig controls</li> </ul> <p>Where to find help</p> <p>If you find or run into any issues with this tutorials, here's what you can do.</p> <ul> <li>\u2714\ufe0f Ask in the chat</li> <li>\u2714\ufe0f Ask on the forums</li> </ul> Spelling <p>There are two ways to spell \"Manikin\", this tutorial is based on this term here.</p> <ul> <li>https://www.healthysimulation.com/Manikin/</li> </ul> <p></p>"},{"location":"tutorials/manikin_blender/#bring-your-own-rig","title":"Bring Your Own Rig","text":"<p>Follow this tutorial either using our provided Manikin rig, or your own character. It can have any number of limbs.</p> <p></p> Download Manikin Download Final Scene <p></p>"},{"location":"tutorials/manikin_blender/#motivation","title":"Motivation","text":"<p>Why should we even bother simulating a character?</p> <p>Finding motion reference is one of the most important activities for any animator. And yet I can safely challenge you  to find reference for perhaps the most common motion in all blockbuster movies today, something that is either impossible  or dangerous for actors or animators alike.</p> <p></p> <p>Or how about reference of someone simply falling over, perhaps from heat stroke or staring into the sun.</p> <p></p> <p>This is, after all, one of the major reasons for pursuing computer graphics in storytelling rather than real people.</p> <p>Animators bring life to characters, but of equal challenge is that of lifelessness. Of natural and realistic motion  without someone behind the wheel. Be it getting hit or shot, blasted or thrown, animating lifelessness is  enough to challenge even the most senior of animators.</p> <p>As you will find, there is a lot more we can do once our motion reference is in 3D, on our actual character rig within  Blender/Maya and infinitely customisable. As opposed to some video on the internet.</p> <p></p>"},{"location":"tutorials/manikin_blender/#setup","title":"Setup","text":"<p>Open your chosen character rig or download the above Manikin rig to get started.</p> <p>Play around with the controls to get a feel for what we're working with.</p> <p></p> <p>FK or IK</p> <p>Use FK for this tutorial</p> <p>This Manikin rig has FK and IK (legs) controls, but we will focus on FK controls for this tutorial because it makes  simulating much straightforward.</p> <p></p>"},{"location":"tutorials/manikin_blender/#simulation","title":"Simulation","text":"<p>The stage is set, now let's apply physics.</p> <p></p>"},{"location":"tutorials/manikin_blender/#torso","title":"Torso","text":"<p>Let's start with the Torso.</p> <ol> <li>Select <code>hip_FK</code></li> <li>Shift select <code>torso_FK</code></li> <li>Shift select <code>head_FK</code></li> <li>In <code>Physics Properties</code> panel, run <code>Assign and Connect</code></li> </ol> <p>This will produce our first <code>Group</code> (named as <code>hip_FK_rGroup</code>, in <code>Ragdoll</code> collection), which is a set of connected  <code>Markers</code>.</p> <p></p> <p>New Concept</p> <p>Group</p> <p>The <code>Group</code> object contains properties that affect all contained markers. It's where you'd edit the overall look and  feel of your character, like how stiff it should be and whether or not body parts should collide with each other.</p> <p>Each Marker can either inherit or otherwise override these values.</p> <p>Markable Objects</p> <p>Who can have Marker assigned?</p> <ul> <li>Mesh objects and</li> <li>Pose Bones</li> </ul> <p></p>"},{"location":"tutorials/manikin_blender/#left-arm","title":"Left Arm","text":"<p>Next we will continue from the <code>torso_FK</code> and out into the arms.</p> <ol> <li>Select the <code>torso_FK</code></li> <li>Shift select <code>L_clavicle_FK</code></li> <li>Shift select <code>L_upperArm_FK</code></li> <li>Shift select <code>L_lowerArm_FK</code></li> <li>Shift select <code>L_hand_FK</code></li> <li>Run <code>Assign and Connect</code></li> </ol> Is the order important? <p>Yes, the order in which you select will determine how the markers are connected.</p> <p>Your first selection is extra important, as it determines whether to start a new group, like for the <code>hip_FK</code>, or to add to an existing group, like the <code>torso_FK</code>.</p> <p>In this case, we would very much like our arm to be connected to the torso.</p> Can I skip the clavicles? <p>Yes, if you have extra controls - such as <code>twist</code> or <code>bend</code> - you can skip these if you don't care to simulate them.</p> <p>Simply skip over them as you select, from <code>torso_FK</code> directly to <code>L_upperArm_FK</code>.</p> <p></p> <p></p>"},{"location":"tutorials/manikin_blender/#right-arm","title":"Right Arm","text":"<p>Now repeat the above process for the other arm.</p> <p></p> <p></p>"},{"location":"tutorials/manikin_blender/#legs","title":"Legs","text":"<p>Now let's continue down the hips and into the legs.</p> <ol> <li>Select the <code>hip_FK</code></li> <li>Shift select <code>L_thigh_FK</code></li> <li>Shift select <code>L_knee_FK</code></li> <li>Shift select <code>L_foot_FK</code></li> <li>Run <code>Assign and Connect</code></li> <li>Repeat for the right leg</li> </ol> <p></p> <p></p>"},{"location":"tutorials/manikin_blender/#drop-test","title":"Drop Test","text":"<p>That's enough setup, let's drop him!</p> <ol> <li>Select <code>hip_FK</code></li> <li>Set <code>Behaviour = Simulated</code></li> <li>Drop the Manikin a few times</li> </ol> <p>New Concept</p> <p>Behaviour</p> <p>Each Marker has a \"behaviour\", which tells Ragdoll it should interpret the control it has been assigned. Should it  fall with gravity? Should it try and match the pose? Should it remain fully animated, even in simulation?</p> <p></p> <p>The default behaviour for <code>Assign and Connect</code> is to give the first selection - the \"root\" - an <code>Animated</code> behaviour.</p> <p>What does 'Animated'/'Simulated' mean?</p> <p>Animated means \"copy the animation into simulation and make no changes to it\"</p> <p>By instead setting this to <code>Simulated</code>, then Ragdoll will only use the animation for the starting position and  orientation of the simulation.</p> <p>Use Group</p> <p>Alternatively, you can set it to <code>Use Group</code> to have it use the value of the <code>rGroup</code> node that was created for the  whole character.</p> <p></p>"},{"location":"tutorials/manikin_blender/#tuning","title":"Tuning","text":"<p>Next let's address the elephant in the room; the shapes. They look awful.</p> <p></p> <p></p>"},{"location":"tutorials/manikin_blender/#volumes","title":"Volumes","text":"<p>The shape of each collider affects your simulation in 2 ways.</p> <ul> <li>Contact Points</li> <li>Rotation Mass</li> </ul> <p>The contact point can be important if your character interacts with an environment or another character. Like in this case where the feet are incorrectly colliding with the ground because of a bad shape.</p> <p></p> <p>That's not always the case though, sometimes you just want overlapping motion without contacts in which case the shapes won't matter.</p> <p>They do however also affect their resistance to rotation. Consider this.</p> <p></p> <p>Here, we rotate the exact same shapes, the exact same amount in the exact same amount of time. And yet they respond  differently.</p> <p>This shape has vastly different dimensions in the X, Y and Z directions, resulting in a different rotation mass for each  one. As a result, the effort required to rotate it in each axis differs too.</p> <p>In practice, you'll find this for just about any limb on a character, which is typically longer in one axis. For our  Manikin, this is especially true for the default clavicle shapes.</p> <p>Override Rotate Mass</p> <p>In some cases, you have a shape but want it to act like a different shape. <code>Rotate Mass</code> is very similar to normal  <code>Mass</code>, except in 3 dimensions. Where the position of an object is affected equal in X, Y and Z directions, rotations  have 3 separate masses.</p> <p></p>"},{"location":"tutorials/manikin_blender/#shapes","title":"Shapes","text":"<p>With this in mind, let's tune some shapes.</p> <ol> <li>Select <code>rSolver</code> object, within <code>Ragdoll</code> collection.</li> <li>Activate <code>Manipulator</code> tool at the Toolbar</li> </ol> <p>This brings up the Manipulator interface, where you can manipulate shapes using mouse  gestures.</p> <p></p> <p>Great, now let's turn those hands and feet into boxes.</p> <p></p> <p>Translate, Rotate and Scale</p> <p>Notice I'm using the..</p> <ul> <li>Middle-Mouse Button to <code>Translate</code></li> <li>CTRL + Middle-Mouse Button to <code>Rotate</code></li> <li>CTRL + Left-Mouse Button to <code>Scale</code></li> </ul> <p>The help text screen-right will help you remember these.</p> <p>Greater Value Step</p> <p>While dragging the value on Manipulator UI panel, you may hold <code>Shift</code> to increase value changing step.</p> <p>Symmetry</p> <p>Also notice the edits are symmetrical; even when they don't start out that way like the feet!</p> <p></p>"},{"location":"tutorials/manikin_blender/#recording","title":"Recording","text":"<p>That's all there is for setting up your character rig for simulation! Let's now transfer the simulation back onto the rig.</p> <ol> <li>Run <code>Record Simulation</code></li> <li>Enjoy</li> </ol> <p></p> <p>Recording options?</p> <p>By holding <code>Ctrl</code> while clicking <code>Record Simulation</code>, a dialog pops up provides you more control over recording process.</p> <p></p> <p></p>"},{"location":"tutorials/manikin_blender/#start-again","title":"Start Again","text":"<p>The simulation was recorded into the NLA Track of each marker assigned object with Solo enabled for playback. To start over, disable Solo mode for those tracks (or delete them).</p> <p></p> <p>Initial Key</p> <p>By default, Ragdoll adds one keyframe on the simulation starting frame, this is to keep original pose intact after playback recorded animation.</p> <p>Auto Cache</p> <p>If you have recording option <code>Auto Cache</code> enabled while recording, solver will remember simulation result after recorded, which can be helpful if you wish to compare the simulation against baked result. If so, don't forget to turn it off before next simulation.</p> <p></p> <p></p>"},{"location":"tutorials/manikin_blender/#next-steps","title":"Next Steps","text":"<p>In the next tutorial, we'll take this a bit further. As you play around with the <code>Rotate Stiffness</code> on either the <code>rGroup</code> or  individual <code>rMarker</code> nodes, you'll find some limbs start to misbehave. Especially the knees and elbows, that normally won't  allow rotations past a certain angle in a real human (or Manikin for that matter!). That isn't the case here, because we've  left out a critical part of any complete ragdoll.</p> <ul> <li>Full Ragdoll</li> </ul> <p>See you there!</p>"},{"location":"tutorials/manikin_ik/","title":"Manikin and IK","text":""},{"location":"tutorials/manikin_ik/#manikin-and-ik","title":"Manikin and IK","text":"<p>In the previous tutorial we turned a character rig into a ragdoll, driven by your animation.</p> <p>In this tutorial, we'll have a look at how we apply this to the IK controls of a rig.</p> <p>Version 1.1 - Up to date</p> <p>Written for Ragdoll <code>2021.12.10</code> and above.</p> <p>Estimated Time</p> <ul> <li>\ud83d\udd50 10 minutes</li> </ul> <p>You will learn</p> <ul> <li>\u2714\ufe0f How to assign markers to joints</li> <li>\u2714\ufe0f How to retarget joints to controls</li> </ul> <p>Where to find help</p> <p>If you find or run into any issues with these tutorials, here's what you can do.</p> <ul> <li>\u2714\ufe0f Ask in the chat</li> <li>\u2714\ufe0f Ask on the forums</li> </ul> <p></p>"},{"location":"tutorials/manikin_ik/#bring-your-own-rig","title":"Bring Your Own Rig","text":"<p>Follow this tutorial either using our provided Manikin rig, or your own character. It can have any number of limbs.</p> <p></p> Download Manikin Download Final Scene <p></p>"},{"location":"tutorials/manikin_ik/#setup","title":"Setup","text":"<p>Let's start fresh, with a non-dynamic character rig. In this case, the IK controls are disabled per default, so let's enable them.</p> <ol> <li>Select <code>master_ctl</code></li> <li>Set <code>Left Leg Fk Ik = 1</code></li> <li>Set <code>Right Leg Fk Ik = 1</code></li> </ol> <p></p> <p></p>"},{"location":"tutorials/manikin_ik/#assign-to-upper-body","title":"Assign to Upper Body","text":"<p>As per usual, let's assign markers onto the FK controls in the upper body.</p> <p></p> <p></p>"},{"location":"tutorials/manikin_ik/#find-ik-joints","title":"Find IK Joints","text":"<p>The legs are different. We don't want to pass the position of the IK controls in the solver, instead what we want are the joints they drive.</p> <p>Where are the joints in my rig?</p> <p>The location of these will differ in every rig. What's important is that they are the ones that move when you move your IK controls. Any joints that do that will suffice.</p> <p>In the case of the Manikin, these will be located under the <code>skeleton_grp</code>.</p> <p></p> <p></p>"},{"location":"tutorials/manikin_ik/#assign-to-ik-joints","title":"Assign to IK Joints","text":"<p>Once you've found a suitable set of joints, assign to them as per usual. Starting from the hip.</p> <p></p> <p></p>"},{"location":"tutorials/manikin_ik/#recording","title":"Recording","text":"<p>Per default, Ragdoll will record onto the control you assign.</p> <p>However, we don't want keyframes on our IK joints. We want keyframes on our IK controls. Therefore, we aren't ready to record just yet.</p> <p></p> <p>Notice how our IK controls didn't get any keyframes?</p> <p></p>"},{"location":"tutorials/manikin_ik/#retarget","title":"Retarget","text":"<p>Because we did not assign to our IK controls, we'll need to retarget the joints onto the controls.</p> <p></p> <p>Now when we record, our retargeted IK controls will be getting keyframes from our simulated IK joints.</p> <p>Not Just IK</p> <p>This will work between any controls or joints. Even from one rig to another, or more complex IK like Spline IK. The <code>Record Simulation</code> command uses a native Maya <code>Parent Constraint</code> between the assigned and retargeted controls, so anywhere you could manually do this will work with this command.</p> <p></p>"},{"location":"tutorials/manikin_ik/#finalise","title":"Finalise","text":"<p>That's it for this tutorial! Here's some test animation.</p> <p></p>"},{"location":"tutorials/manikin_ik/#shapes","title":"Shapes","text":"<p>Grab the manipulator and tweak those shapes to fit your character.</p> <p></p> <p></p>"},{"location":"tutorials/manikin_ik/#test-animation","title":"Test Animation","text":"<p>Then drop some keys on our IK rig to see it in action.</p> <p></p>"},{"location":"tutorials/manikin_ragdoll/","title":"Manikin II","text":""},{"location":"tutorials/manikin_ragdoll/#manikin-ragdoll","title":"Manikin Ragdoll","text":"<p>In the previous tutorial we assigned markers onto a rig such that you can achieve overlapping motion.</p> <p>That's enough for some things, but other times you don't want any animation. You just want to drop a ragdoll someplace dangerous and watch it go.</p> <p>Version 1.2 - Up to date</p> <p>Written for Ragdoll <code>2023.08.01</code> and above.</p> <p>Estimated Time</p> <ul> <li>\ud83d\udd50 10 minutes</li> </ul> <p>You will learn</p> <ul> <li>\u2714\ufe0f How to prevent unrealistic poses</li> <li>\u2714\ufe0f How to author and tune \"limits\"</li> </ul> <p>Where to find help</p> <p>If you find or run into any issues with these tutorials, here's what you can do.</p> <ul> <li>\u2714\ufe0f Ask in the chat</li> <li>\u2714\ufe0f Ask on the forums</li> </ul> <p></p>"},{"location":"tutorials/manikin_ragdoll/#bring-your-own-rig","title":"Bring Your Own Rig","text":"<p>Either continue from the last tutorial or start anew with your own rig.</p> <p></p> Download Manikin Download Final Scene <p></p>"},{"location":"tutorials/manikin_ragdoll/#limits","title":"Limits","text":"<p>Next let's see how our character behaves when there isn't any animation around to steer it.</p> <ol> <li>Select <code>hip_ctl_rGroup</code></li> <li>Set <code>Rotate Stiffness = 0.0</code></li> </ol> <p>As in our last tutorial when we changed the <code>hip_ctl</code> from <code>Animated</code> to <code>Simulated</code>, now we do the same but for the whole character!</p> <p>Yikes! That's a mess. No longer is the animation holding a pose together, it's all up to gravity and the anatomy of our character now.</p> <p>The way we will address this is via \"limits\", which is like locked rotate channels except they also lock a range of values. We can use this to replicate natural limits in our human joints.</p> <p></p>"},{"location":"tutorials/manikin_ragdoll/#legs","title":"Legs","text":"<p>Let's start at legs and work our way up. First, let's figure out what axis we want to rotate, and which we want to lock.</p> <p></p> <p>Ok, great. The Z axis should rotate but X and Y should be locked.</p> <ol> <li>Run <code>Ragdoll -&gt; Manipulator</code></li> <li>Select the lower leg</li> <li>Switch to <code>Limit Mode</code></li> <li>Enable limits around <code>X</code>, <code>Y</code> and <code>Z</code></li> <li>Lock <code>X</code> and <code>Y</code></li> </ol> <p></p> <p>Next, tune the minimum and maximum values of the limit.</p> <p>Tune Minimum and Maximum Separately</p> <p>By holding the Ctrl key, you can manipulate one bound at a time.</p> <p></p> <p>Then we can do the same for the feet.</p> <p></p> <p>Something like that should do the trick.</p> <p></p>"},{"location":"tutorials/manikin_ragdoll/#clavicles","title":"Clavicles","text":"<p>Let's keep the clavicles simple. We'll allow only 1 axis of rotation by locking the others.</p> <ol> <li>Run <code>Ragdoll -&gt; Manipulator</code></li> <li>Edit the clavicle</li> </ol> <p></p> <p></p>"},{"location":"tutorials/manikin_ragdoll/#arms","title":"Arms","text":"<p>We'll lock the <code>X</code> and <code>Y</code> axes of the lower arm like we did for the lower leg.</p> <ol> <li>Run <code>Ragdoll -&gt; Manipulator</code></li> <li>Edit the lower arm</li> <li>Edit the hand</li> </ol> <p></p> <p></p>"},{"location":"tutorials/manikin_ragdoll/#hip-and-spine","title":"Hip and Spine","text":"<p>Both the hip and spine should be allowed to rotate around all three axes, so we can leave these at their default values for now.</p> <ol> <li>Run <code>Ragdoll -&gt; Manipulator</code></li> <li>Edit the hip and spine</li> </ol> <p></p> <p>And that's it! From here, we can hide the limits to have another look at contacts.</p> <p></p>"},{"location":"tutorials/manikin_ragdoll/#contacts","title":"Contacts","text":"<p>If we hide away our limits for a moment, we can see something that's not right. Notice how the arms and legs intersecting each other? That's because, per default, limbs within a single group are allowed to overlap.</p> <p></p> Should I enable Self Collision? <p>Normally the answer is \"no\", but when you do, this can be overridden on the <code>rGroup</code> node.</p> <p></p> <p></p>"},{"location":"tutorials/manikin_ragdoll/#overlap-group","title":"Overlap Group","text":"<p>Let's address this by having these overlap with <code>Nothing</code>.</p> <p></p> <p></p>"},{"location":"tutorials/manikin_ragdoll/#finalise","title":"Finalise","text":"<p>You now know enough to construct any character of any anatomy!</p> <p>You have learnt</p> <ul> <li>\u2714\ufe0f How to limit the motion between two limbs</li> <li>\u2714\ufe0f How to tune the minimum and maximum bound of each limit</li> </ul> <p>As you tune, try dropping the Manikin from different heights and angles. Put an obstacle underneath for more detail and to catch more edge cases. Once you are unable to produce an unnatural pose, you are done!</p> <p></p> <p>Download Completed Scene</p> <p>For your reference, here is the completed scene with the Manikin file referenced.</p> Download Manikin Download Final Scene <p></p>"},{"location":"tutorials/manikin_ragdoll/#damped-limits","title":"Damped Limits","text":"<p>You can tune the behaviour of each limit to capture the look you're after, such as making things a little more damped.</p> <p></p> <p>Global Damping</p> <p>This, and other stiffness and damping-related attributes, can be controlled globally - for every limit in your scene - via the <code>rSolver</code> node.</p> <p></p> <p></p>"},{"location":"tutorials/manikin_ragdoll/#soft-limits","title":"Soft Limits","text":"<p>Sometimes, a limit is hard. Like your elbow. It won't allow you to continue rotating it once it's straightened out. You'll break it!</p> <p>Other limits are more flexible. Let's reflect this in our simulation by reducing their range and lowering their <code>Stiffness</code>, accepting that they will exceed it, but get gently pushed back.</p> <p></p> <p></p>"},{"location":"tutorials/manikin_ragdoll/#accurate-feet","title":"Accurate Feet","text":"<p>Feet contact with the ground is often more important than other contacts. For such cases, a box or capsule shape may not be enough.</p> <p>So let's use <code>Replace Mesh</code> to fix that.</p> <ol> <li>Select <code>L_foot_jnt</code></li> <li>Select a mesh</li> <li>Run <code>Replace Mesh</code></li> </ol> <p></p>"},{"location":"tutorials/manikin_ragdoll/#animation","title":"Animation","text":"<p>In most cases, you'll want some control over the resulting simulation. Just a little bit.</p> <p>Group Markers</p> <p>You could add/remove groups as you go for better control, each group multiplies stiffnesses and damping on each contained Marker.</p> <p></p>"},{"location":"tutorials/manikin_ragdoll_blender/","title":"Blender Manikin II","text":""},{"location":"tutorials/manikin_ragdoll_blender/#manikin-ragdoll","title":"Manikin Ragdoll","text":"<p>In the previous tutorial we assigned markers onto a rig such that you can achieve overlapping motion.</p> <p>That's enough for some things, but other times you don't want any animation. You just want to drop a ragdoll someplace dangerous and watch it go.</p> <p>Estimated Time</p> <ul> <li>\ud83d\udd50 10 minutes</li> </ul> <p>You will learn</p> <ul> <li>\u2714\ufe0f How to prevent unrealistic poses</li> <li>\u2714\ufe0f How to author and tune \"limits\"</li> </ul> <p>Where to find help</p> <p>If you find or run into any issues with these tutorials, here's what you can do.</p> <ul> <li>\u2714\ufe0f Ask in the chat</li> <li>\u2714\ufe0f Ask on the forums</li> </ul> <p></p>"},{"location":"tutorials/manikin_ragdoll_blender/#bring-your-own-rig","title":"Bring Your Own Rig","text":"<p>Either continue from the last tutorial or start anew with your own rig.</p> <p></p> Download Manikin Download Final Scene <p></p>"},{"location":"tutorials/manikin_ragdoll_blender/#limits","title":"Limits","text":"<p>Next let's see how our character behaves when there isn't any animation around to steer it.</p> <ol> <li>Select <code>hip_FK_rGroup</code></li> <li>Set <code>Behaviour = Simulated</code></li> <li>Set <code>Rotate Stiffness = 0.0</code></li> </ol> <p>As in our last tutorial when we changed the <code>hip_FK</code> from <code>Animated</code> to <code>Simulated</code>, now we do the same but for the whole character!</p> <p>Yikes! That's a mess. No longer is the animation holding a pose together, it's all up to gravity and the anatomy of our character now.</p> <p>The way we will address this is via \"limits\", which is like locked rotate channels except they also lock a range of values. We can use this to replicate natural limits in our human joints.</p> <p></p>"},{"location":"tutorials/manikin_ragdoll_blender/#legs","title":"Legs","text":"<p>Let's start at legs and work our way up. First, let's figure out what axis we want to rotate, and which we want to lock.</p> <p></p> <p>Ok, great. The Z axis should rotate but X and Y should be locked.</p> <p>Except... no. Because Ragdoll uses different axis system at the moment, so we better head right into <code>Limit Mode</code> and find out!</p> <ol> <li>Activate Ragdoll workspace tool <code>Manipulator</code></li> <li>Select the lower leg</li> <li>Switch to <code>Limit Mode</code></li> <li>Enable limits around <code>X</code>, <code>Y</code> and <code>Z</code></li> <li>Have a look at which axis should be locked</li> <li>Lock them, should be <code>X</code> and <code>Z</code></li> </ol> <p></p> <p>Next, tune the minimum and maximum values of the limit.</p> <p>Tune Minimum and Maximum Separately</p> <p>By holding the Ctrl key, you can manipulate one bound at a time.</p> <p></p> <p>Then we can do the same for the feet.</p> <p></p> <p>Something like that should do the trick.</p> <p></p>"},{"location":"tutorials/manikin_ragdoll_blender/#clavicles","title":"Clavicles","text":"<p>Let's keep the clavicles simple. We'll allow only 1 axis of rotation by locking the others.</p> <ol> <li>Activate <code>Manipulator</code></li> <li>Edit the clavicle</li> </ol> <p></p> <p></p>"},{"location":"tutorials/manikin_ragdoll_blender/#arms","title":"Arms","text":"<p>We'll lock the <code>X</code> and <code>Z</code> axes of the lower arm like we did for the lower leg.</p> <ol> <li>Activate <code>Manipulator</code></li> <li>Edit the lower arm</li> <li>Edit the hand</li> </ol> <p></p> <p></p>"},{"location":"tutorials/manikin_ragdoll_blender/#hip-and-spine","title":"Hip and Spine","text":"<p>Both the hip and spine should be allowed to rotate around all three axes, so we can leave these at their default values for now.</p> <ol> <li>Activate <code>Manipulator</code></li> <li>Edit the hip and spine</li> </ol> <p></p> <p>And that's it! From here, we can hide the limits to have another look at contacts.</p> <p></p>"},{"location":"tutorials/manikin_ragdoll_blender/#contacts","title":"Contacts","text":"<p>If we hide away our limits for a moment, we can see something that's not right. Notice how the arms and legs intersecting each other? That's because, per default, the limbs within a single group are allowed to overlap.</p> <p></p> Should I enable Self Collision? <p>Normally the answer is \"no\", but when you do, this can be overridden on the <code>rGroup</code> node.</p> <p></p> <p></p>"},{"location":"tutorials/manikin_ragdoll_blender/#overlap-group","title":"Overlap Group","text":"<p>Let's address this by having these overlap with <code>Nothing</code>.</p> <p></p> <p></p>"},{"location":"tutorials/manikin_ragdoll_blender/#finalise","title":"Finalise","text":"<p>You now know enough to construct any character of any anatomy!</p> <p>You have learnt</p> <ul> <li>\u2714\ufe0f How to limit the motion between two limbs</li> <li>\u2714\ufe0f How to tune the minimum and maximum bound of each limit</li> </ul> <p>As you tune, try dropping the Manikin from different heights and angles. Put an obstacle underneath for more detail and to catch more edge cases. Once you are unable to produce an unnatural pose, you are done!</p> <p></p> <p>Download Completed Scene</p> <p>For your reference, here is the completed scene with the Manikin file referenced.</p> Download Manikin Download Final Scene <p></p>"},{"location":"tutorials/manikin_ragdoll_blender/#damped-limits","title":"Damped Limits","text":"<p>You can tune the behaviour of each limit to capture the look you're after, such as making things a little more damped.</p> <p></p> <p>Global Damping</p> <p>This, and other stiffness and damping-related attributes, can be controlled globally - for every limit in your scene - via the <code>rSolver</code> node.</p> <p></p>"},{"location":"tutorials/manikin_ragdoll_blender/#soft-limits","title":"Soft Limits","text":"<p>Sometimes, a limit is hard. Like your elbow. It won't allow you to continue rotating it once it's straightened out. You'll break it!</p> <p>Other limits are more flexible. Let's reflect this in our simulation by reducing their range and lowering their <code>Stiffness</code>, accepting that they will exceed it, but get gently pushed back.</p> <p></p> <p></p>"},{"location":"tutorials/manikin_ragdoll_blender/#accurate-feet","title":"Accurate Feet","text":"<p>Feet contact with the ground is often more important than other contacts. For such cases, a box or capsule shape may not be enough.</p> <p>So let's use <code>Replace Mesh</code> to fix that.</p> <ol> <li>Select <code>L_foot_blend_jnt</code></li> <li>In Physics tab, scroll to <code>Default Shape</code> and find <code>Custom mesh shape</code> property</li> <li>Pick <code>L_foot_geo</code></li> <li>Change <code>Shape</code> to <code>Mesh</code> type</li> <li>Do the same to the other foot</li> </ol> <p></p> <p></p>"},{"location":"tutorials/manikin_ragdoll_blender/#animation","title":"Animation","text":"<p>In most cases, you'll want some control over the resulting simulation. Just a little bit.</p> <p>Group Markers</p> <p>You could add additional marker group for better control over stiffness and damping on different part of limbs, which then decides how your input animation affects simulation.</p> <p></p> <p></p>"},{"location":"tutorials/manikin_ragdoll_blender/#bonus-pin-constraint","title":"Bonus: Pin Constraint","text":"<ol> <li>Select one or many objects that have marker assigned.</li> <li>Go to the <code>Constraint</code> panel, click <code>Pin Marker</code> (or <code>Pin All Selected</code>) button.</li> <li>Once done, drag the empty object around and simulate!</li> </ol> <p>Other Constraints?</p> <p>At this moment (2023.08 release), only <code>Pin Constraint</code> works, other type of constraints coming soon!</p> <p></p>"},{"location":"tutorials/masterclass/","title":"Masterclasses","text":""},{"location":"tutorials/masterclass/#secondary-animation-series","title":"Secondary Animation Series","text":"Topics Description Hair Anime-like, long and short, along with traditional guide hairs for use in realistic hair rendering. Props Like a gun holster, a backpack, a whip like Indiana Jones Cloth Skirts, capes, sleeves Usage Constraints and collision groups, fine tuning <p>We don't cover this yet, as it's partly CreatureFX and Technical Animation - something I've wanted to steer clear of. But there is value for animators here, a lot of animators are stuck with this because a studio simply cannot afford (or understand) technical animation.</p> <p>So we'll need a character that we'll apply motion capture to, and only worry about secondary effects. The character would look somewhere along the lines of the below. Familiar, common in the animation field, with things we can make dynamic.</p> <p>We'd combine this with general dynamics on limbs too, like swings and trajectories for jumps, that kind of thing. Maybe we can repurpose Skye for this?</p> <p> </p> <p></p>"},{"location":"tutorials/masterclass/#human-masterclass","title":"Human Masterclass","text":"Topics Description Hinges Knees and elbows Spherical Hips and shoulders Fingers Palm and thumb, up to individual fingers Facial Fleshy cheeks, lips, jaw Usage Leave some pose stiffness, soft limits, soft translation <p>This one would focus on anatomy and what people most associate with \"ragdolls\". People getting struck, falling, lying on things that move, floating, the Jedi-grip, crash-dummy. That kind of thing.</p> <p>For this we'll need a realistic character, not necessarily with clothing as our focus would be on the body itself and not so much on the input animation or character.</p> <p></p>"},{"location":"tutorials/masterclass/#mecha-masterclass-series","title":"Mecha Masterclass Series","text":"Topics Description Linear limits Like hydraulics Spherical Hips and shoulders Animation How to animate something to look like a robot <p>We can do a really strong job here, animating things to look robotic is a lot easier and forgiving than a human. As a robot generally needs to move one limb at a time, in a controlled manner. Which is funny, as it's a look that's based on how difficult it is to approximate human motion. A heavily controlled, slow movement. We'll have overshoots and jiggles, because that's just how motors work in real life.</p> <p>For feet, I think we'll do especially well too, as we can stick with the pointed feet like with Locomotion, and rely on contacts to animate anything coming into contact with the ground.</p> <p>I found these which will serve as an excellent foundation for this.</p> <p>https://www.artstation.com/marketplace/p/k1yK9/10-sci-fi-robot-models</p> <p></p>"},{"location":"tutorials/masterclass/#weightlessness-series","title":"Weightlessness Series","text":"<p>Using the setups from the previous 3 masterclasses, put them underwater, in space and thrown around with magic/Jedi force.</p>"},{"location":"tutorials/mecha_series/","title":"Mecha series","text":"<ul> <li>https://www.mecabricks.com/en/models/KbjQxXE92dG</li> </ul> <p>Steps</p> <ul> <li> Combining meshes that move together</li> <li> Hierarchy<ul> <li>Testing the kinematics</li> </ul> </li> <li> Pivots<ul> <li>Alignment</li> <li>Bake</li> <li>Testing kinematics</li> <li>Locking channels</li> </ul> </li> <li> Mirroring<ul> <li>Minding scale</li> </ul> </li> <li> Multi-cut<ul> <li>Settings</li> <li>Selecting faces to make precise cuts</li> </ul> </li> </ul>"},{"location":"tutorials/meindbender_signs/","title":"Meindbender signs","text":"<p>Walk through how to do these signs with Ragdoll. :) https://youtu.be/xPDGoVml5RU?t=10</p>"},{"location":"tutorials/mocap_chap/","title":"Mocap Chap","text":""},{"location":"tutorials/mocap_chap/#mocap-chap","title":"Mocap Chap","text":"<p>In the previous tutorials we've turned a character rig into a full ragdoll, driven by your animation.</p> <p>This time we'll look at applying physics to only parts of a character, like the upper body of this mocap clip found in Maya's default Content Browser.</p> <p>Version 1.1 - Up to date</p> <p>Written for Ragdoll <code>2021.12.10</code> and above.</p> <p>Estimated Time</p> <ul> <li>\ud83d\udd50 10 minutes</li> </ul> <p>You will learn</p> <ul> <li>\u2714\ufe0f How to apply physics to mocap</li> <li>\u2714\ufe0f How to simulate only part of a character</li> </ul> <p>Where to find help</p> <p>If you find or run into any issues with these tutorials, here's what you can do.</p> <ul> <li>\u2714\ufe0f Ask in the chat</li> <li>\u2714\ufe0f Ask on the forums</li> </ul> <p></p>"},{"location":"tutorials/mocap_chap/#overview","title":"Overview","text":"<p>When and why would you even want simulation on parts of a character?</p> <ol> <li>Tails</li> <li>Props</li> <li>Muscles</li> </ol> <p>Are three simple and somewhat obvious examples, more complex examples include what we're about to do in this tutorial. Namely, edit the mass of an object picked up during the original motion capture.</p> <p></p> <p></p> Download Final Scene <p></p>"},{"location":"tutorials/mocap_chap/#setup","title":"Setup","text":"<p>Let's start by importing our motion capture clip; this can be any clip but if you'd like to follow along here's what you do.</p> <ol> <li><code>Windows -&gt; General Editors -&gt; Content Browser</code></li> <li>Drag and drop <code>Smash.fbx</code></li> </ol> Unrecognized file type? <p>Make sure the <code>fbxmaya.mll</code> plug-in is loaded via the Maya Plug-in Manager.</p> <p></p> <p>Here's what this clip looks like.</p> <p></p> <p></p>"},{"location":"tutorials/mocap_chap/#symmetry-optional","title":"Symmetry (optional)","text":"<p>In order for Ragdoll to recognise symmetry later when we edit the shapes using the <code>Manipulator</code>, we'll need to assign markers in a symmetrical pose.</p> <ol> <li>Rewind to frame 0</li> <li>Select the root</li> <li>Set <code>Translate X</code> and <code>Translate Z</code> to 0</li> <li>Run <code>Select -&gt; Select Hierarchy</code></li> <li>Right-click and hold</li> <li>Run <code>Assume Preferred Angle</code></li> <li>Set a keyframe on everything</li> </ol> <p></p> <p></p>"},{"location":"tutorials/mocap_chap/#assign-markers","title":"Assign Markers","text":"<p>In this case, I'm ignoring fingers along with the center joint in each limb, like the lower arms and upper legs.</p> <p></p> <p>From here, we can move our simulation to frame to <code>1</code>. We don't need frame <code>0</code> anymore.</p> <p></p> <p></p>"},{"location":"tutorials/mocap_chap/#animated-legs","title":"Animated Legs","text":"<p>In this tutorial, we're only going to worry about the upper body, so let's turn those legs into 100% animation via the <code>Animated</code> behaviour.</p> <p></p> <p></p>"},{"location":"tutorials/mocap_chap/#tuning","title":"Tuning","text":"<p>The stage is set, it's time to tune!</p> <p></p>"},{"location":"tutorials/mocap_chap/#shapes","title":"Shapes","text":"<p>Nothing special here, and since we have no geometry to fill we have some creative freedom in how we want our character to look!</p> <p></p> <p>Let's have a look at where defaults values gets us.</p> <p></p> <p>Not bad! But since we want our simulation to be close to the original mocap, we'll need to make some changes.</p> <p></p>"},{"location":"tutorials/mocap_chap/#stiffness-and-substeps","title":"Stiffness and Substeps","text":"<p>The default solver substeps and iterations get you to a <code>Stiffness</code> of about <code>10</code>. In order to achieve a higher stiffness, we'll need more of those.</p> <ol> <li>Select <code>rSolver</code></li> <li>Set <code>Substeps = 8</code></li> <li>Set <code>Iterations = 8</code></li> <li>Select <code>Hips_rGroup</code></li> <li>Set <code>Rotate Stiffness = 40</code></li> <li>Set <code>Rotate Damping = 0.25</code></li> </ol> <p></p> <p></p>"},{"location":"tutorials/mocap_chap/#box","title":"Box","text":"<p>Let's get the box in on the action.</p> <p></p> <p></p>"},{"location":"tutorials/mocap_chap/#attach-hands-to-box","title":"Attach Hands to Box","text":"<p>He does a good job holding onto that box through friction between hand and box alone, but let's help him out by \"glueing\" the two together using a <code>Distance Constraint</code></p> <ol> <li>Select the box</li> <li>Shift select the left hand</li> <li>Run <code>Ragdoll -&gt; Constrain -&gt; Distance</code></li> <li>Repeat the process for the right hand</li> </ol> <p></p> <p>The default distance will be <code>From Start</code>, meaning it will try and keep whatever the distance was between the box and the hands at the start of the simulation.</p> <p>What we want however is for the <code>Maximum</code> distance to be <code>0</code>, and for it to only start having an effect once the hands overlap the box.</p> <p></p> <p>Now let's edit the point at which the hand and box snap together.</p> <ol> <li>Select one of the constraints</li> <li>Edit the <code>Parent Offset</code></li> </ol> <p>Since we selected the box first, it is considered the \"parent\".</p> <p></p> <p></p>"},{"location":"tutorials/mocap_chap/#animate-on-and-off","title":"Animate On and Off","text":"<p>Next, let's activate this constraint once hands are in place.</p> <ol> <li>Go to frame <code>80</code></li> <li>Set a keyframe on both constraints <code>Stiffness = 0</code></li> <li>Go to frame <code>81</code></li> <li>Key <code>Stiffness = 0.5</code></li> </ol> <p>Likewise, we'll want the hands to release the box at some point later.</p> <ol> <li>Go to frame <code>178</code></li> <li>Key <code>Stiffness = 0.5</code></li> <li>Go to frame <code>179</code></li> <li>Key <code>Stiffness = 0</code></li> </ol> <p></p> <p></p>"},{"location":"tutorials/mocap_chap/#finalise","title":"Finalise","text":"<p>And that's it! We've now massaged our original motion capture into carrying a box of similar weight to the motion.</p> <p>Let's make some changes and see what happens.</p> <p></p>"},{"location":"tutorials/mocap_chap/#more-mass","title":"More Mass","text":"<p>What if the box was heavier?</p> <ol> <li>Select the box</li> <li>Select the <code>rMarker_pCube1</code> in the Channel Box</li> <li>Press <code>T</code> on your keyboard</li> <li>Set <code>Mass = 10</code></li> </ol> <p></p> <p></p>"},{"location":"tutorials/mocap_chap/#mass-and-cache","title":"Mass and Cache","text":"<p>When tuning single values like this, it can be helpful to leave the Maya timeline in place and let the simulation update independently.</p> <p></p> <p></p>"},{"location":"tutorials/mocap_chap/#next-steps","title":"Next Steps","text":"<p>At this point, you're able to turn any old motion capture hierarchy into a partial or fully-fledged ragdoll. Why not try a few more from the Content Browser? Or download any of the hundreds of freely available clips from here.</p> <ul> <li>https://www.mixamo.com</li> <li>https://www.rokoko.com</li> <li>http://mocap.cs.cmu.edu</li> </ul>"},{"location":"tutorials/ragdog/","title":"Ragdog","text":""},{"location":"tutorials/ragdog/#ragdog","title":"Ragdog","text":"<p>In this tutorial, we'll rig a character from scratch and assign meshes and limits to it.</p> <p>Version 1.0 - Up to date</p> <p>Written for Ragdoll <code>2022.03.14</code> and above.</p> <p>Estimated Time</p> <ul> <li>\ud83d\udd50 30 minutes</li> </ul> <p>You will need</p> <ul> <li>\u2714\ufe0f Nothing, assets are provided</li> </ul> <p>You will learn</p> <ul> <li>\u2714\ufe0f How to rig a mesh with Maya joints</li> <li>\u2714\ufe0f How to assign Markers to joints</li> <li>\u2714\ufe0f How to prepare a mesh for collisions</li> <li>\u2714\ufe0f How to assign complex anatomical limits</li> </ul> <p>Where to find help</p> <p>If you find or run into any issues with these tutorials, here's what you can do.</p> <ul> <li>\u2714\ufe0f Ask in the chat</li> <li>\u2714\ufe0f Ask on the forums</li> </ul> <p></p>"},{"location":"tutorials/ragdog/#videos","title":"Videos","text":"<p>Here's the video on YouTube.</p> <ul> <li>YouTube</li> </ul> <p></p>"},{"location":"tutorials/ragdog/#next-steps","title":"Next Steps","text":"<p>This technique applies to any mesh you can find and is suitable for animators to go at themselves, so go crazy!</p>"},{"location":"tutorials/rookie_wasp/","title":"Rookie Wasp","text":""},{"location":"tutorials/rookie_wasp/#rookie-wasp","title":"Rookie Wasp","text":"<p>In this tutorial, we'll make an animation cycle using Ragdoll.</p> <p>Version 1.1 - Up to date</p> <p>Written for Ragdoll <code>2021.12.13</code> and above.</p> <p>Estimated Time</p> <ul> <li>\ud83d\udd50 15 minutes</li> </ul> <p>You will learn</p> <ul> <li>\u2714\ufe0f How to rig a model from Maya's Content Browser</li> <li>\u2714\ufe0f How to simulate a cycle</li> <li>\u2714\ufe0f How to create a seamless cycle</li> </ul> <p>Where to find help</p> <p>If you find or run into any issues with these tutorials, here's what you can do.</p> <ul> <li>\u2714\ufe0f Ask in the chat</li> <li>\u2714\ufe0f Ask on the forums</li> </ul> <p></p>"},{"location":"tutorials/rookie_wasp/#videos","title":"Videos","text":"<p>See here for part 1 and 2 of this tutorial.</p> <ul> <li>Part I - Setup (07:02 mins)</li> <li>Part II - Looping (07:31 mins)</li> </ul> <p></p>"},{"location":"tutorials/self_walking/","title":"Self-Walking Rhino","text":""},{"location":"tutorials/self_walking/#walking-rhino","title":"Walking Rhino","text":"<p>In this tutorial, we'll make a self-walking character using our Rhino asset.</p> <p>Version 1.0 - Up to date</p> <p>Written for Ragdoll <code>2022.03.14</code> and above.</p> <p>Estimated Time</p> <ul> <li>\ud83d\udd50 5 minutes</li> </ul> <p>You will need</p> <ul> <li>\u2714\ufe0f The Rhino asset</li> <li>\u2714\ufe0f Or your own character</li> </ul> <p>You will learn</p> <ul> <li>\u2714\ufe0f How to pin just the rotation of a marker</li> <li>\u2714\ufe0f How to get your character walking on its own</li> </ul> <p>Where to find help</p> <p>If you find or run into any issues with these tutorials, here's what you can do.</p> <ul> <li>\u2714\ufe0f Ask in the chat</li> <li>\u2714\ufe0f Ask on the forums</li> </ul> <p></p>"},{"location":"tutorials/self_walking/#videos","title":"Videos","text":"<p>See here for part 1 of 1 this tutorial.</p> <ul> <li>YouTube Video (03:16 mins)</li> </ul> <p>Timeline</p> <ul> <li>00:00 Import and Setup</li> <li>00:25 Pinning the Chest</li> <li>00:40 Different Pin Values</li> <li>01:25 Animating a Basic Walk Cycle</li> <li>02:10 Final tweaks</li> <li>02:40 Record and Render</li> </ul> <p></p>"},{"location":"tutorials/self_walking/#next-steps","title":"Next Steps","text":"<p>Why not put a few of them together with Solver Linking? </p> <ul> <li>Stampede Tutorial</li> </ul>"},{"location":"tutorials/videos/","title":"Videos","text":""},{"location":"tutorials/videos/#videos","title":"Videos","text":"<p>Learn by watching.</p> <ul> <li>Introduction to Ragdoll on YouTube @ 26:00 mins</li> </ul> <p></p> <p></p>"},{"location":"tutorials/videos/#more-videos","title":"More Videos","text":"<p>The forum is a goldmine of learning material, have a look here next!</p> <ul> <li>https://forums.ragdolldynamics.com/c/tutorials</li> </ul> <p>Then have a look at the videos and examples by following along with each released version of Ragdoll!</p> <ul> <li>https://learn.ragdolldynamics.com/news/</li> </ul> <p>Heads up</p> <p>The below were recorded just before Markers were finalised, but are still applicable to 2021.12.12 and above.</p> Tutorial Duration Description Markers 101 01:23 What are markers? Markers 101 - Key Concepts 03:23 Overview of Input Type and Pose Space Markers 101 - Local and World 03:00 Overview of the two Pose Spaces, local and world Overlapping Motion I 02:27 The very basics or Capture and Record Overlapping Motion II 02:21 Animation layers Full Ragdoll I 04:08 Hierarchy and volume Full Ragdoll II 04:05 Kinematic and animation Full Ragdoll III 04:30 Self collisions and recording IK I 03:00 Capturing the skeleton IK II 01:59 Retargeting to IK controls IK III 01:59 Record both Translation and Rotation Practical Example I 06:53 Fix table and elbow intersection in this dialog performance Replace Reference Workflow 01:34 An ideal workflow for Ragdoll in a production pipeline with animators."}]}